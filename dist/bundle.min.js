/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var page = __webpack_require__(46);
	var auth = __webpack_require__(146);

	var viewHandler = __webpack_require__(144);
	var dataHandler = __webpack_require__(143);
	// var authHandler = require('./handler/authHandler');

	// on every page load
	page('*', viewHandler.init, dataHandler.init);

	// redirect to library
	page('/', function () { page('/library'); });

	page('/library', dataHandler.library, viewHandler.library);

	page('/search', dataHandler.search, viewHandler.search);

	page('/settings', viewHandler.settings);

	page('/account', viewHandler.account);

	page('/about', viewHandler.about);

	page('/manga/:id', dataHandler.manga, viewHandler.manga);

	page('/chapter/:id', dataHandler.chapter, viewHandler.chapter);

	page.start({hashbang: true});

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory();
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define([], factory);
		}
		else {
			// Global (browser)
			root.CryptoJS = factory();
		}
	}(this, function () {

		/**
		 * CryptoJS core components.
		 */
		var CryptoJS = CryptoJS || (function (Math, undefined) {
		    /**
		     * CryptoJS namespace.
		     */
		    var C = {};

		    /**
		     * Library namespace.
		     */
		    var C_lib = C.lib = {};

		    /**
		     * Base object for prototypal inheritance.
		     */
		    var Base = C_lib.Base = (function () {
		        function F() {}

		        return {
		            /**
		             * Creates a new object that inherits from this object.
		             *
		             * @param {Object} overrides Properties to copy into the new object.
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         field: 'value',
		             *
		             *         method: function () {
		             *         }
		             *     });
		             */
		            extend: function (overrides) {
		                // Spawn
		                F.prototype = this;
		                var subtype = new F();

		                // Augment
		                if (overrides) {
		                    subtype.mixIn(overrides);
		                }

		                // Create default initializer
		                if (!subtype.hasOwnProperty('init')) {
		                    subtype.init = function () {
		                        subtype.$super.init.apply(this, arguments);
		                    };
		                }

		                // Initializer's prototype is the subtype object
		                subtype.init.prototype = subtype;

		                // Reference supertype
		                subtype.$super = this;

		                return subtype;
		            },

		            /**
		             * Extends this object and runs the init method.
		             * Arguments to create() will be passed to init().
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var instance = MyType.create();
		             */
		            create: function () {
		                var instance = this.extend();
		                instance.init.apply(instance, arguments);

		                return instance;
		            },

		            /**
		             * Initializes a newly created object.
		             * Override this method to add some logic when your objects are created.
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         init: function () {
		             *             // ...
		             *         }
		             *     });
		             */
		            init: function () {
		            },

		            /**
		             * Copies properties into this object.
		             *
		             * @param {Object} properties The properties to mix in.
		             *
		             * @example
		             *
		             *     MyType.mixIn({
		             *         field: 'value'
		             *     });
		             */
		            mixIn: function (properties) {
		                for (var propertyName in properties) {
		                    if (properties.hasOwnProperty(propertyName)) {
		                        this[propertyName] = properties[propertyName];
		                    }
		                }

		                // IE won't copy toString using the loop above
		                if (properties.hasOwnProperty('toString')) {
		                    this.toString = properties.toString;
		                }
		            },

		            /**
		             * Creates a copy of this object.
		             *
		             * @return {Object} The clone.
		             *
		             * @example
		             *
		             *     var clone = instance.clone();
		             */
		            clone: function () {
		                return this.init.prototype.extend(this);
		            }
		        };
		    }());

		    /**
		     * An array of 32-bit words.
		     *
		     * @property {Array} words The array of 32-bit words.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var WordArray = C_lib.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of 32-bit words.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.create();
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 4;
		            }
		        },

		        /**
		         * Converts this word array to a string.
		         *
		         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
		         *
		         * @return {string} The stringified word array.
		         *
		         * @example
		         *
		         *     var string = wordArray + '';
		         *     var string = wordArray.toString();
		         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
		         */
		        toString: function (encoder) {
		            return (encoder || Hex).stringify(this);
		        },

		        /**
		         * Concatenates a word array to this word array.
		         *
		         * @param {WordArray} wordArray The word array to append.
		         *
		         * @return {WordArray} This word array.
		         *
		         * @example
		         *
		         *     wordArray1.concat(wordArray2);
		         */
		        concat: function (wordArray) {
		            // Shortcuts
		            var thisWords = this.words;
		            var thatWords = wordArray.words;
		            var thisSigBytes = this.sigBytes;
		            var thatSigBytes = wordArray.sigBytes;

		            // Clamp excess bits
		            this.clamp();

		            // Concat
		            if (thisSigBytes % 4) {
		                // Copy one byte at a time
		                for (var i = 0; i < thatSigBytes; i++) {
		                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
		                }
		            } else {
		                // Copy one word at a time
		                for (var i = 0; i < thatSigBytes; i += 4) {
		                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
		                }
		            }
		            this.sigBytes += thatSigBytes;

		            // Chainable
		            return this;
		        },

		        /**
		         * Removes insignificant bits.
		         *
		         * @example
		         *
		         *     wordArray.clamp();
		         */
		        clamp: function () {
		            // Shortcuts
		            var words = this.words;
		            var sigBytes = this.sigBytes;

		            // Clamp
		            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
		            words.length = Math.ceil(sigBytes / 4);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = wordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone.words = this.words.slice(0);

		            return clone;
		        },

		        /**
		         * Creates a word array filled with random bytes.
		         *
		         * @param {number} nBytes The number of random bytes to generate.
		         *
		         * @return {WordArray} The random word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.random(16);
		         */
		        random: function (nBytes) {
		            var words = [];

		            var r = (function (m_w) {
		                var m_w = m_w;
		                var m_z = 0x3ade68b1;
		                var mask = 0xffffffff;

		                return function () {
		                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
		                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
		                    var result = ((m_z << 0x10) + m_w) & mask;
		                    result /= 0x100000000;
		                    result += 0.5;
		                    return result * (Math.random() > .5 ? 1 : -1);
		                }
		            });

		            for (var i = 0, rcache; i < nBytes; i += 4) {
		                var _r = r((rcache || Math.random()) * 0x100000000);

		                rcache = _r() * 0x3ade67b7;
		                words.push((_r() * 0x100000000) | 0);
		            }

		            return new WordArray.init(words, nBytes);
		        }
		    });

		    /**
		     * Encoder namespace.
		     */
		    var C_enc = C.enc = {};

		    /**
		     * Hex encoding strategy.
		     */
		    var Hex = C_enc.Hex = {
		        /**
		         * Converts a word array to a hex string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The hex string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var hexChars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                hexChars.push((bite >>> 4).toString(16));
		                hexChars.push((bite & 0x0f).toString(16));
		            }

		            return hexChars.join('');
		        },

		        /**
		         * Converts a hex string to a word array.
		         *
		         * @param {string} hexStr The hex string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
		         */
		        parse: function (hexStr) {
		            // Shortcut
		            var hexStrLength = hexStr.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < hexStrLength; i += 2) {
		                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
		            }

		            return new WordArray.init(words, hexStrLength / 2);
		        }
		    };

		    /**
		     * Latin1 encoding strategy.
		     */
		    var Latin1 = C_enc.Latin1 = {
		        /**
		         * Converts a word array to a Latin1 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Latin1 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var latin1Chars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                latin1Chars.push(String.fromCharCode(bite));
		            }

		            return latin1Chars.join('');
		        },

		        /**
		         * Converts a Latin1 string to a word array.
		         *
		         * @param {string} latin1Str The Latin1 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
		         */
		        parse: function (latin1Str) {
		            // Shortcut
		            var latin1StrLength = latin1Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < latin1StrLength; i++) {
		                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
		            }

		            return new WordArray.init(words, latin1StrLength);
		        }
		    };

		    /**
		     * UTF-8 encoding strategy.
		     */
		    var Utf8 = C_enc.Utf8 = {
		        /**
		         * Converts a word array to a UTF-8 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-8 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            try {
		                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
		            } catch (e) {
		                throw new Error('Malformed UTF-8 data');
		            }
		        },

		        /**
		         * Converts a UTF-8 string to a word array.
		         *
		         * @param {string} utf8Str The UTF-8 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
		         */
		        parse: function (utf8Str) {
		            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
		        }
		    };

		    /**
		     * Abstract buffered block algorithm template.
		     *
		     * The property blockSize must be implemented in a concrete subtype.
		     *
		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
		     */
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
		        /**
		         * Resets this block algorithm's data buffer to its initial state.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm.reset();
		         */
		        reset: function () {
		            // Initial values
		            this._data = new WordArray.init();
		            this._nDataBytes = 0;
		        },

		        /**
		         * Adds new data to this block algorithm's buffer.
		         *
		         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm._append('data');
		         *     bufferedBlockAlgorithm._append(wordArray);
		         */
		        _append: function (data) {
		            // Convert string to WordArray, else assume WordArray already
		            if (typeof data == 'string') {
		                data = Utf8.parse(data);
		            }

		            // Append
		            this._data.concat(data);
		            this._nDataBytes += data.sigBytes;
		        },

		        /**
		         * Processes available data blocks.
		         *
		         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
		         *
		         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
		         *
		         * @return {WordArray} The processed data.
		         *
		         * @example
		         *
		         *     var processedData = bufferedBlockAlgorithm._process();
		         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
		         */
		        _process: function (doFlush) {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var dataSigBytes = data.sigBytes;
		            var blockSize = this.blockSize;
		            var blockSizeBytes = blockSize * 4;

		            // Count blocks ready
		            var nBlocksReady = dataSigBytes / blockSizeBytes;
		            if (doFlush) {
		                // Round up to include partial blocks
		                nBlocksReady = Math.ceil(nBlocksReady);
		            } else {
		                // Round down to include only full blocks,
		                // less the number of blocks that must remain in the buffer
		                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
		            }

		            // Count words ready
		            var nWordsReady = nBlocksReady * blockSize;

		            // Count bytes ready
		            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

		            // Process blocks
		            if (nWordsReady) {
		                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
		                    // Perform concrete-algorithm logic
		                    this._doProcessBlock(dataWords, offset);
		                }

		                // Remove processed words
		                var processedWords = dataWords.splice(0, nWordsReady);
		                data.sigBytes -= nBytesReady;
		            }

		            // Return processed words
		            return new WordArray.init(processedWords, nBytesReady);
		        },

		        /**
		         * Creates a copy of this object.
		         *
		         * @return {Object} The clone.
		         *
		         * @example
		         *
		         *     var clone = bufferedBlockAlgorithm.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone._data = this._data.clone();

		            return clone;
		        },

		        _minBufferSize: 0
		    });

		    /**
		     * Abstract hasher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
		     */
		    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         */
		        cfg: Base.extend(),

		        /**
		         * Initializes a newly created hasher.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
		         *
		         * @example
		         *
		         *     var hasher = CryptoJS.algo.SHA256.create();
		         */
		        init: function (cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this hasher to its initial state.
		         *
		         * @example
		         *
		         *     hasher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-hasher logic
		            this._doReset();
		        },

		        /**
		         * Updates this hasher with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {Hasher} This hasher.
		         *
		         * @example
		         *
		         *     hasher.update('message');
		         *     hasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            // Append
		            this._append(messageUpdate);

		            // Update the hash
		            this._process();

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the hash computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The hash.
		         *
		         * @example
		         *
		         *     var hash = hasher.finalize();
		         *     var hash = hasher.finalize('message');
		         *     var hash = hasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Final message update
		            if (messageUpdate) {
		                this._append(messageUpdate);
		            }

		            // Perform concrete-hasher logic
		            var hash = this._doFinalize();

		            return hash;
		        },

		        blockSize: 512/32,

		        /**
		         * Creates a shortcut function to a hasher's object interface.
		         *
		         * @param {Hasher} hasher The hasher to create a helper for.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
		         */
		        _createHelper: function (hasher) {
		            return function (message, cfg) {
		                return new hasher.init(cfg).finalize(message);
		            };
		        },

		        /**
		         * Creates a shortcut function to the HMAC's object interface.
		         *
		         * @param {Hasher} hasher The hasher to use in this HMAC helper.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
		         */
		        _createHmacHelper: function (hasher) {
		            return function (message, key) {
		                return new C_algo.HMAC.init(hasher, key).finalize(message);
		            };
		        }
		    });

		    /**
		     * Algorithm namespace.
		     */
		    var C_algo = C.algo = {};

		    return C;
		}(Math));


		return CryptoJS;

	}));

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Overload = __webpack_require__(6);

	/**
	 * A shared object that can be used to store arbitrary data between class
	 * instances, and access helper methods.
	 * @mixin
	 */
	var Shared = {
		version: '1.3.465',
		modules: {},
		plugins: {},

		_synth: {},

		/**
		 * Adds a module to ForerunnerDB.
		 * @memberof Shared
		 * @param {String} name The name of the module.
		 * @param {Function} module The module class.
		 */
		addModule: function (name, module) {
			// Store the module in the module registry
			this.modules[name] = module;

			// Tell the universe we are loading this module
			this.emit('moduleLoad', [name, module]);
		},

		/**
		 * Called by the module once all processing has been completed. Used to determine
		 * if the module is ready for use by other modules.
		 * @memberof Shared
		 * @param {String} name The name of the module.
		 */
		finishModule: function (name) {
			if (this.modules[name]) {
				// Set the finished loading flag to true
				this.modules[name]._fdbFinished = true;

				// Assign the module name to itself so it knows what it
				// is called
				if (this.modules[name].prototype) {
					this.modules[name].prototype.className = name;
				} else {
					this.modules[name].className = name;
				}

				this.emit('moduleFinished', [name, this.modules[name]]);
			} else {
				throw('ForerunnerDB.Shared: finishModule called on a module that has not been registered with addModule(): ' + name);
			}
		},

		/**
		 * Will call your callback method when the specified module has loaded. If the module
		 * is already loaded the callback is called immediately.
		 * @memberof Shared
		 * @param {String} name The name of the module.
		 * @param {Function} callback The callback method to call when the module is loaded.
		 */
		moduleFinished: function (name, callback) {
			if (this.modules[name] && this.modules[name]._fdbFinished) {
				if (callback) { callback(name, this.modules[name]); }
			} else {
				this.on('moduleFinished', callback);
			}
		},

		/**
		 * Determines if a module has been added to ForerunnerDB or not.
		 * @memberof Shared
		 * @param {String} name The name of the module.
		 * @returns {Boolean} True if the module exists or false if not.
		 */
		moduleExists: function (name) {
			return Boolean(this.modules[name]);
		},

		/**
		 * Adds the properties and methods defined in the mixin to the passed object.
		 * @memberof Shared
		 * @param {Object} obj The target object to add mixin key/values to.
		 * @param {String} mixinName The name of the mixin to add to the object.
		 */
		mixin: new Overload({
			'object, string': function (obj, mixinName) {
				var mixinObj;

				if (typeof mixinName === 'string') {
					mixinObj = this.mixins[mixinName];

					if (!mixinObj) {
						throw('ForerunnerDB.Shared: Cannot find mixin named: ' + mixinName);
					}
				}

				return this.$main.call(this, obj, mixinObj);
			},

			'object, *': function (obj, mixinObj) {
				return this.$main.call(this, obj, mixinObj);
			},

			'$main': function (obj, mixinObj) {
				if (mixinObj && typeof mixinObj === 'object') {
					for (var i in mixinObj) {
						if (mixinObj.hasOwnProperty(i)) {
							obj[i] = mixinObj[i];
						}
					}
				}

				return obj;
			}
		}),

		/**
		 * Generates a generic getter/setter method for the passed method name.
		 * @memberof Shared
		 * @param {Object} obj The object to add the getter/setter to.
		 * @param {String} name The name of the getter/setter to generate.
		 * @param {Function=} extend A method to call before executing the getter/setter.
		 * The existing getter/setter can be accessed from the extend method via the
		 * $super e.g. this.$super();
		 */
		synthesize: function (obj, name, extend) {
			this._synth[name] = this._synth[name] || function (val) {
				if (val !== undefined) {
					this['_' + name] = val;
					return this;
				}

				return this['_' + name];
			};

			if (extend) {
				var self = this;

				obj[name] = function () {
					var tmp = this.$super,
						ret;

					this.$super = self._synth[name];
					ret = extend.apply(this, arguments);
					this.$super = tmp;

					return ret;
				};
			} else {
				obj[name] = this._synth[name];
			}
		},

		/**
		 * Allows a method to be overloaded.
		 * @memberof Shared
		 * @param arr
		 * @returns {Function}
		 * @constructor
		 */
		overload: Overload,

		/**
		 * Define the mixins that other modules can use as required.
		 * @memberof Shared
		 */
		mixins: {
			'Mixin.Common': __webpack_require__(61),
			'Mixin.Events': __webpack_require__(63),
			'Mixin.ChainReactor': __webpack_require__(60),
			'Mixin.CRUD': __webpack_require__(59),
			'Mixin.Constants': __webpack_require__(62),
			'Mixin.Triggers': __webpack_require__(67),
			'Mixin.Sorting': __webpack_require__(65),
			'Mixin.Matching': __webpack_require__(64),
			'Mixin.Updating': __webpack_require__(68),
			'Mixin.Tags': __webpack_require__(66)
		}
	};

	// Add event handling to shared
	Shared.mixin(Shared, 'Mixin.Events');

	module.exports = Shared;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Cipher core components.
		 */
		CryptoJS.lib.Cipher || (function (undefined) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var Base64 = C_enc.Base64;
		    var C_algo = C.algo;
		    var EvpKDF = C_algo.EvpKDF;

		    /**
		     * Abstract base cipher template.
		     *
		     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
		     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
		     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
		     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
		     */
		    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {WordArray} iv The IV to use for this operation.
		         */
		        cfg: Base.extend(),

		        /**
		         * Creates this cipher in encryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createEncryptor: function (key, cfg) {
		            return this.create(this._ENC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Creates this cipher in decryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createDecryptor: function (key, cfg) {
		            return this.create(this._DEC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Initializes a newly created cipher.
		         *
		         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
		         */
		        init: function (xformMode, key, cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Store transform mode and key
		            this._xformMode = xformMode;
		            this._key = key;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this cipher to its initial state.
		         *
		         * @example
		         *
		         *     cipher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-cipher logic
		            this._doReset();
		        },

		        /**
		         * Adds data to be encrypted or decrypted.
		         *
		         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.process('data');
		         *     var encrypted = cipher.process(wordArray);
		         */
		        process: function (dataUpdate) {
		            // Append
		            this._append(dataUpdate);

		            // Process available blocks
		            return this._process();
		        },

		        /**
		         * Finalizes the encryption or decryption process.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after final processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.finalize();
		         *     var encrypted = cipher.finalize('data');
		         *     var encrypted = cipher.finalize(wordArray);
		         */
		        finalize: function (dataUpdate) {
		            // Final data update
		            if (dataUpdate) {
		                this._append(dataUpdate);
		            }

		            // Perform concrete-cipher logic
		            var finalProcessedData = this._doFinalize();

		            return finalProcessedData;
		        },

		        keySize: 128/32,

		        ivSize: 128/32,

		        _ENC_XFORM_MODE: 1,

		        _DEC_XFORM_MODE: 2,

		        /**
		         * Creates shortcut functions to a cipher's object interface.
		         *
		         * @param {Cipher} cipher The cipher to create a helper for.
		         *
		         * @return {Object} An object with encrypt and decrypt shortcut functions.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
		         */
		        _createHelper: (function () {
		            function selectCipherStrategy(key) {
		                if (typeof key == 'string') {
		                    return PasswordBasedCipher;
		                } else {
		                    return SerializableCipher;
		                }
		            }

		            return function (cipher) {
		                return {
		                    encrypt: function (message, key, cfg) {
		                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
		                    },

		                    decrypt: function (ciphertext, key, cfg) {
		                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
		                    }
		                };
		            };
		        }())
		    });

		    /**
		     * Abstract base stream cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
		     */
		    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
		        _doFinalize: function () {
		            // Process partial blocks
		            var finalProcessedBlocks = this._process(!!'flush');

		            return finalProcessedBlocks;
		        },

		        blockSize: 1
		    });

		    /**
		     * Mode namespace.
		     */
		    var C_mode = C.mode = {};

		    /**
		     * Abstract base block cipher mode template.
		     */
		    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
		        /**
		         * Creates this mode for encryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
		         */
		        createEncryptor: function (cipher, iv) {
		            return this.Encryptor.create(cipher, iv);
		        },

		        /**
		         * Creates this mode for decryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
		         */
		        createDecryptor: function (cipher, iv) {
		            return this.Decryptor.create(cipher, iv);
		        },

		        /**
		         * Initializes a newly created mode.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
		         */
		        init: function (cipher, iv) {
		            this._cipher = cipher;
		            this._iv = iv;
		        }
		    });

		    /**
		     * Cipher Block Chaining mode.
		     */
		    var CBC = C_mode.CBC = (function () {
		        /**
		         * Abstract base CBC mode.
		         */
		        var CBC = BlockCipherMode.extend();

		        /**
		         * CBC encryptor.
		         */
		        CBC.Encryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // XOR and encrypt
		                xorBlock.call(this, words, offset, blockSize);
		                cipher.encryptBlock(words, offset);

		                // Remember this block to use with next block
		                this._prevBlock = words.slice(offset, offset + blockSize);
		            }
		        });

		        /**
		         * CBC decryptor.
		         */
		        CBC.Decryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // Remember this block to use with next block
		                var thisBlock = words.slice(offset, offset + blockSize);

		                // Decrypt and XOR
		                cipher.decryptBlock(words, offset);
		                xorBlock.call(this, words, offset, blockSize);

		                // This block becomes the previous block
		                this._prevBlock = thisBlock;
		            }
		        });

		        function xorBlock(words, offset, blockSize) {
		            // Shortcut
		            var iv = this._iv;

		            // Choose mixing block
		            if (iv) {
		                var block = iv;

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            } else {
		                var block = this._prevBlock;
		            }

		            // XOR blocks
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= block[i];
		            }
		        }

		        return CBC;
		    }());

		    /**
		     * Padding namespace.
		     */
		    var C_pad = C.pad = {};

		    /**
		     * PKCS #5/7 padding strategy.
		     */
		    var Pkcs7 = C_pad.Pkcs7 = {
		        /**
		         * Pads data using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to pad.
		         * @param {number} blockSize The multiple that the data should be padded to.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
		         */
		        pad: function (data, blockSize) {
		            // Shortcut
		            var blockSizeBytes = blockSize * 4;

		            // Count padding bytes
		            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		            // Create padding word
		            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

		            // Create padding
		            var paddingWords = [];
		            for (var i = 0; i < nPaddingBytes; i += 4) {
		                paddingWords.push(paddingWord);
		            }
		            var padding = WordArray.create(paddingWords, nPaddingBytes);

		            // Add padding
		            data.concat(padding);
		        },

		        /**
		         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to unpad.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
		         */
		        unpad: function (data) {
		            // Get number of padding bytes from last byte
		            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		            // Remove padding
		            data.sigBytes -= nPaddingBytes;
		        }
		    };

		    /**
		     * Abstract base block cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
		     */
		    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Mode} mode The block mode to use. Default: CBC
		         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
		         */
		        cfg: Cipher.cfg.extend({
		            mode: CBC,
		            padding: Pkcs7
		        }),

		        reset: function () {
		            // Reset cipher
		            Cipher.reset.call(this);

		            // Shortcuts
		            var cfg = this.cfg;
		            var iv = cfg.iv;
		            var mode = cfg.mode;

		            // Reset block mode
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                var modeCreator = mode.createEncryptor;
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                var modeCreator = mode.createDecryptor;

		                // Keep at least one block in the buffer for unpadding
		                this._minBufferSize = 1;
		            }
		            this._mode = modeCreator.call(mode, this, iv && iv.words);
		        },

		        _doProcessBlock: function (words, offset) {
		            this._mode.processBlock(words, offset);
		        },

		        _doFinalize: function () {
		            // Shortcut
		            var padding = this.cfg.padding;

		            // Finalize
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                // Pad data
		                padding.pad(this._data, this.blockSize);

		                // Process final blocks
		                var finalProcessedBlocks = this._process(!!'flush');
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                // Process final blocks
		                var finalProcessedBlocks = this._process(!!'flush');

		                // Unpad data
		                padding.unpad(finalProcessedBlocks);
		            }

		            return finalProcessedBlocks;
		        },

		        blockSize: 128/32
		    });

		    /**
		     * A collection of cipher parameters.
		     *
		     * @property {WordArray} ciphertext The raw ciphertext.
		     * @property {WordArray} key The key to this ciphertext.
		     * @property {WordArray} iv The IV used in the ciphering operation.
		     * @property {WordArray} salt The salt used with a key derivation function.
		     * @property {Cipher} algorithm The cipher algorithm.
		     * @property {Mode} mode The block mode used in the ciphering operation.
		     * @property {Padding} padding The padding scheme used in the ciphering operation.
		     * @property {number} blockSize The block size of the cipher.
		     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
		     */
		    var CipherParams = C_lib.CipherParams = Base.extend({
		        /**
		         * Initializes a newly created cipher params object.
		         *
		         * @param {Object} cipherParams An object with any of the possible cipher parameters.
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.lib.CipherParams.create({
		         *         ciphertext: ciphertextWordArray,
		         *         key: keyWordArray,
		         *         iv: ivWordArray,
		         *         salt: saltWordArray,
		         *         algorithm: CryptoJS.algo.AES,
		         *         mode: CryptoJS.mode.CBC,
		         *         padding: CryptoJS.pad.PKCS7,
		         *         blockSize: 4,
		         *         formatter: CryptoJS.format.OpenSSL
		         *     });
		         */
		        init: function (cipherParams) {
		            this.mixIn(cipherParams);
		        },

		        /**
		         * Converts this cipher params object to a string.
		         *
		         * @param {Format} formatter (Optional) The formatting strategy to use.
		         *
		         * @return {string} The stringified cipher params.
		         *
		         * @throws Error If neither the formatter nor the default formatter is set.
		         *
		         * @example
		         *
		         *     var string = cipherParams + '';
		         *     var string = cipherParams.toString();
		         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
		         */
		        toString: function (formatter) {
		            return (formatter || this.formatter).stringify(this);
		        }
		    });

		    /**
		     * Format namespace.
		     */
		    var C_format = C.format = {};

		    /**
		     * OpenSSL formatting strategy.
		     */
		    var OpenSSLFormatter = C_format.OpenSSL = {
		        /**
		         * Converts a cipher params object to an OpenSSL-compatible string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The OpenSSL-compatible string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
		         */
		        stringify: function (cipherParams) {
		            // Shortcuts
		            var ciphertext = cipherParams.ciphertext;
		            var salt = cipherParams.salt;

		            // Format
		            if (salt) {
		                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
		            } else {
		                var wordArray = ciphertext;
		            }

		            return wordArray.toString(Base64);
		        },

		        /**
		         * Converts an OpenSSL-compatible string to a cipher params object.
		         *
		         * @param {string} openSSLStr The OpenSSL-compatible string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
		         */
		        parse: function (openSSLStr) {
		            // Parse base64
		            var ciphertext = Base64.parse(openSSLStr);

		            // Shortcut
		            var ciphertextWords = ciphertext.words;

		            // Test for salt
		            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
		                // Extract salt
		                var salt = WordArray.create(ciphertextWords.slice(2, 4));

		                // Remove salt from ciphertext
		                ciphertextWords.splice(0, 4);
		                ciphertext.sigBytes -= 16;
		            }

		            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
		        }
		    };

		    /**
		     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
		     */
		    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
		         */
		        cfg: Base.extend({
		            format: OpenSSLFormatter
		        }),

		        /**
		         * Encrypts a message.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Encrypt
		            var encryptor = cipher.createEncryptor(key, cfg);
		            var ciphertext = encryptor.finalize(message);

		            // Shortcut
		            var cipherCfg = encryptor.cfg;

		            // Create and return serializable cipher params
		            return CipherParams.create({
		                ciphertext: ciphertext,
		                key: key,
		                iv: cipherCfg.iv,
		                algorithm: cipher,
		                mode: cipherCfg.mode,
		                padding: cipherCfg.padding,
		                blockSize: cipher.blockSize,
		                formatter: cfg.format
		            });
		        },

		        /**
		         * Decrypts serialized ciphertext.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Decrypt
		            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

		            return plaintext;
		        },

		        /**
		         * Converts serialized ciphertext to CipherParams,
		         * else assumed CipherParams already and returns ciphertext unchanged.
		         *
		         * @param {CipherParams|string} ciphertext The ciphertext.
		         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
		         *
		         * @return {CipherParams} The unserialized ciphertext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
		         */
		        _parse: function (ciphertext, format) {
		            if (typeof ciphertext == 'string') {
		                return format.parse(ciphertext, this);
		            } else {
		                return ciphertext;
		            }
		        }
		    });

		    /**
		     * Key derivation function namespace.
		     */
		    var C_kdf = C.kdf = {};

		    /**
		     * OpenSSL key derivation function.
		     */
		    var OpenSSLKdf = C_kdf.OpenSSL = {
		        /**
		         * Derives a key and IV from a password.
		         *
		         * @param {string} password The password to derive from.
		         * @param {number} keySize The size in words of the key to generate.
		         * @param {number} ivSize The size in words of the IV to generate.
		         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
		         *
		         * @return {CipherParams} A cipher params object with the key, IV, and salt.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
		         */
		        execute: function (password, keySize, ivSize, salt) {
		            // Generate random salt
		            if (!salt) {
		                salt = WordArray.random(64/8);
		            }

		            // Derive key and IV
		            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

		            // Separate key and IV
		            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
		            key.sigBytes = keySize * 4;

		            // Return params
		            return CipherParams.create({ key: key, iv: iv, salt: salt });
		        }
		    };

		    /**
		     * A serializable cipher wrapper that derives the key from a password,
		     * and returns ciphertext as a serializable cipher params object.
		     */
		    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
		         */
		        cfg: SerializableCipher.cfg.extend({
		            kdf: OpenSSLKdf
		        }),

		        /**
		         * Encrypts a message using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Encrypt
		            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

		            // Mix in derived params
		            ciphertext.mixIn(derivedParams);

		            return ciphertext;
		        },

		        /**
		         * Decrypts serialized ciphertext using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Decrypt
		            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

		            return plaintext;
		        }
		    });
		}());


	}));

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared,
		Db,
		Metrics,
		KeyValueStore,
		Path,
		IndexHashMap,
		IndexBinaryTree,
		Crc,
		Overload,
		ReactorIO;

	Shared = __webpack_require__(3);

	/**
	 * Creates a new collection. Collections store multiple documents and
	 * handle CRUD against those documents.
	 * @constructor
	 */
	var Collection = function (name) {
		this.init.apply(this, arguments);
	};

	Collection.prototype.init = function (name, options) {
		this._primaryKey = '_id';
		this._primaryIndex = new KeyValueStore('primary');
		this._primaryCrc = new KeyValueStore('primaryCrc');
		this._crcLookup = new KeyValueStore('crcLookup');
		this._name = name;
		this._data = [];
		this._metrics = new Metrics();

		this._options = options || {
			changeTimestamp: false
		};

		// Create an object to store internal protected data
		this._metaData = {};

		this._deferQueue = {
			insert: [],
			update: [],
			remove: [],
			upsert: []
		};

		this._deferThreshold = {
			insert: 100,
			update: 100,
			remove: 100,
			upsert: 100
		};

		this._deferTime = {
			insert: 1,
			update: 1,
			remove: 1,
			upsert: 1
		};

		this._deferredCalls = true;

		// Set the subset to itself since it is the root collection
		this.subsetOf(this);
	};

	Shared.addModule('Collection', Collection);
	Shared.mixin(Collection.prototype, 'Mixin.Common');
	Shared.mixin(Collection.prototype, 'Mixin.Events');
	Shared.mixin(Collection.prototype, 'Mixin.ChainReactor');
	Shared.mixin(Collection.prototype, 'Mixin.CRUD');
	Shared.mixin(Collection.prototype, 'Mixin.Constants');
	Shared.mixin(Collection.prototype, 'Mixin.Triggers');
	Shared.mixin(Collection.prototype, 'Mixin.Sorting');
	Shared.mixin(Collection.prototype, 'Mixin.Matching');
	Shared.mixin(Collection.prototype, 'Mixin.Updating');
	Shared.mixin(Collection.prototype, 'Mixin.Tags');

	Metrics = __webpack_require__(16);
	KeyValueStore = __webpack_require__(58);
	Path = __webpack_require__(14);
	IndexHashMap = __webpack_require__(57);
	IndexBinaryTree = __webpack_require__(56);
	Crc = __webpack_require__(29);
	Db = Shared.modules.Db;
	Overload = __webpack_require__(6);
	ReactorIO = __webpack_require__(17);

	/**
	 * Returns a checksum of a string.
	 * @param {String} string The string to checksum.
	 * @return {String} The checksum generated.
	 */
	Collection.prototype.crc = Crc;

	/**
	 * Gets / sets the deferred calls flag. If set to true (default)
	 * then operations on large data sets can be broken up and done
	 * over multiple CPU cycles (creating an async state). For purely
	 * synchronous behaviour set this to false.
	 * @param {Boolean=} val The value to set.
	 * @returns {Boolean}
	 */
	Shared.synthesize(Collection.prototype, 'deferredCalls');

	/**
	 * Gets / sets the current state.
	 * @param {String=} val The name of the state to set.
	 * @returns {*}
	 */
	Shared.synthesize(Collection.prototype, 'state');

	/**
	 * Gets / sets the name of the collection.
	 * @param {String=} val The name of the collection to set.
	 * @returns {*}
	 */
	Shared.synthesize(Collection.prototype, 'name');

	/**
	 * Gets / sets the metadata stored in the collection.
	 */
	Shared.synthesize(Collection.prototype, 'metaData');

	/**
	 * Gets / sets boolean to determine if the collection should be
	 * capped or not.
	 */
	Shared.synthesize(Collection.prototype, 'capped');

	/**
	 * Gets / sets capped collection size. This is the maximum number
	 * of records that the capped collection will store.
	 */
	Shared.synthesize(Collection.prototype, 'cappedSize');

	/**
	 * Get the data array that represents the collection's data.
	 * This data is returned by reference and should not be altered outside
	 * of the provided CRUD functionality of the collection as doing so
	 * may cause unstable index behaviour within the collection.
	 * @returns {Array}
	 */
	Collection.prototype.data = function () {
		return this._data;
	};

	/**
	 * Drops a collection and all it's stored data from the database.
	 * @returns {boolean} True on success, false on failure.
	 */
	Collection.prototype.drop = function (callback) {
		var key;

		if (!this.isDropped()) {
			if (this._db && this._db._collection && this._name) {
				if (this.debug()) {
					console.log(this.logIdentifier() + ' Dropping');
				}

				this._state = 'dropped';

				this.emit('drop', this);

				delete this._db._collection[this._name];

				// Remove any reactor IO chain links
				if (this._collate) {
					for (key in this._collate) {
						if (this._collate.hasOwnProperty(key)) {
							this.collateRemove(key);
						}
					}
				}

				delete this._primaryKey;
				delete this._primaryIndex;
				delete this._primaryCrc;
				delete this._crcLookup;
				delete this._name;
				delete this._data;
				delete this._metrics;

				if (callback) { callback(false, true); }

				return true;
			}
		} else {
			if (callback) { callback(false, true); }

			return true;
		}

		if (callback) { callback(false, true); }
		return false;
	};

	/**
	 * Gets / sets the primary key for this collection.
	 * @param {String=} keyName The name of the primary key.
	 * @returns {*}
	 */
	Collection.prototype.primaryKey = function (keyName) {
		if (keyName !== undefined) {
			if (this._primaryKey !== keyName) {
				var oldKey = this._primaryKey;
				this._primaryKey = keyName;

				// Set the primary key index primary key
				this._primaryIndex.primaryKey(keyName);

				// Rebuild the primary key index
				this.rebuildPrimaryKeyIndex();

				// Propagate change down the chain
				this.chainSend('primaryKey', keyName, {oldData: oldKey});
			}
			return this;
		}

		return this._primaryKey;
	};

	/**
	 * Handles insert events and routes changes to binds and views as required.
	 * @param {Array} inserted An array of inserted documents.
	 * @param {Array} failed An array of documents that failed to insert.
	 * @private
	 */
	Collection.prototype._onInsert = function (inserted, failed) {
		this.emit('insert', inserted, failed);
	};

	/**
	 * Handles update events and routes changes to binds and views as required.
	 * @param {Array} items An array of updated documents.
	 * @private
	 */
	Collection.prototype._onUpdate = function (items) {
		this.emit('update', items);
	};

	/**
	 * Handles remove events and routes changes to binds and views as required.
	 * @param {Array} items An array of removed documents.
	 * @private
	 */
	Collection.prototype._onRemove = function (items) {
		this.emit('remove', items);
	};

	/**
	 * Handles any change to the collection.
	 * @private
	 */
	Collection.prototype._onChange = function () {
		if (this._options.changeTimestamp) {
			// Record the last change timestamp
			this._metaData.lastChange = new Date();
		}
	};

	/**
	 * Gets / sets the db instance this class instance belongs to.
	 * @param {Db=} db The db instance.
	 * @returns {*}
	 */
	Shared.synthesize(Collection.prototype, 'db', function (db) {
		if (db) {
			if (this.primaryKey() === '_id') {
				// Set primary key to the db's key by default
				this.primaryKey(db.primaryKey());

				// Apply the same debug settings
				this.debug(db.debug());
			}
		}

		return this.$super.apply(this, arguments);
	});

	/**
	 * Gets / sets mongodb emulation mode.
	 * @param {Boolean=} val True to enable, false to disable.
	 * @returns {*}
	 */
	Shared.synthesize(Collection.prototype, 'mongoEmulation');

	/**
	 * Sets the collection's data to the array / documents passed.  If any
	 * data already exists in the collection it will be removed before the
	 * new data is set.
	 * @param {Array|Object} data The array of documents or a single document
	 * that will be set as the collections data.
	 * @param options Optional options object.
	 * @param callback Optional callback function.
	 */
	Collection.prototype.setData = function (data, options, callback) {
		if (this.isDropped()) {
			throw(this.logIdentifier() + ' Cannot operate in a dropped state!');
		}

		if (data) {
			var op = this._metrics.create('setData');
			op.start();

			options = this.options(options);
			this.preSetData(data, options, callback);

			if (options.$decouple) {
				data = this.decouple(data);
			}

			if (!(data instanceof Array)) {
				data = [data];
			}

			op.time('transformIn');
			data = this.transformIn(data);
			op.time('transformIn');

			var oldData = [].concat(this._data);

			this._dataReplace(data);

			// Update the primary key index
			op.time('Rebuild Primary Key Index');
			this.rebuildPrimaryKeyIndex(options);
			op.time('Rebuild Primary Key Index');

			// Rebuild all other indexes
			op.time('Rebuild All Other Indexes');
			this._rebuildIndexes();
			op.time('Rebuild All Other Indexes');

			op.time('Resolve chains');
			this.chainSend('setData', data, {oldData: oldData});
			op.time('Resolve chains');

			op.stop();

			this._onChange();
			this.emit('setData', this._data, oldData);
		}

		if (callback) { callback(false); }

		return this;
	};

	/**
	 * Drops and rebuilds the primary key index for all documents in the collection.
	 * @param {Object=} options An optional options object.
	 * @private
	 */
	Collection.prototype.rebuildPrimaryKeyIndex = function (options) {
		options = options || {
			$ensureKeys: undefined,
			$violationCheck: undefined
		};

		var ensureKeys = options && options.$ensureKeys !== undefined ? options.$ensureKeys : true,
			violationCheck = options && options.$violationCheck !== undefined ? options.$violationCheck : true,
			arr,
			arrCount,
			arrItem,
			pIndex = this._primaryIndex,
			crcIndex = this._primaryCrc,
			crcLookup = this._crcLookup,
			pKey = this._primaryKey,
			jString;

		// Drop the existing primary index
		pIndex.truncate();
		crcIndex.truncate();
		crcLookup.truncate();

		// Loop the data and check for a primary key in each object
		arr = this._data;
		arrCount = arr.length;

		while (arrCount--) {
			arrItem = arr[arrCount];

			if (ensureKeys) {
				// Make sure the item has a primary key
				this.ensurePrimaryKey(arrItem);
			}

			if (violationCheck) {
				// Check for primary key violation
				if (!pIndex.uniqueSet(arrItem[pKey], arrItem)) {
					// Primary key violation
					throw(this.logIdentifier() + ' Call to setData on collection failed because your data violates the primary key unique constraint. One or more documents are using the same primary key: ' + arrItem[this._primaryKey]);
				}
			} else {
				pIndex.set(arrItem[pKey], arrItem);
			}

			// Generate a CRC string
			jString = this.jStringify(arrItem);

			crcIndex.set(arrItem[pKey], jString);
			crcLookup.set(jString, arrItem);
		}
	};

	/**
	 * Checks for a primary key on the document and assigns one if none
	 * currently exists.
	 * @param {Object} obj The object to check a primary key against.
	 * @private
	 */
	Collection.prototype.ensurePrimaryKey = function (obj) {
		if (obj[this._primaryKey] === undefined) {
			// Assign a primary key automatically
			obj[this._primaryKey] = this.objectId();
		}
	};

	/**
	 * Clears all data from the collection.
	 * @returns {Collection}
	 */
	Collection.prototype.truncate = function () {
		if (this.isDropped()) {
			throw(this.logIdentifier() + ' Cannot operate in a dropped state!');
		}

		this.emit('truncate', this._data);

		// Clear all the data from the collection
		this._data.length = 0;

		// Re-create the primary index data
		this._primaryIndex = new KeyValueStore('primary');
		this._primaryCrc = new KeyValueStore('primaryCrc');
		this._crcLookup = new KeyValueStore('crcLookup');

		this._onChange();
		this.deferEmit('change', {type: 'truncate'});
		return this;
	};

	/**
	 * Modifies an existing document or documents in a collection. This will update
	 * all matches for 'query' with the data held in 'update'. It will not overwrite
	 * the matched documents with the update document.
	 *
	 * @param {Object} obj The document object to upsert or an array containing
	 * documents to upsert.
	 *
	 * If the document contains a primary key field (based on the collections's primary
	 * key) then the database will search for an existing document with a matching id.
	 * If a matching document is found, the document will be updated. Any keys that
	 * match keys on the existing document will be overwritten with new data. Any keys
	 * that do not currently exist on the document will be added to the document.
	 *
	 * If the document does not contain an id or the id passed does not match an existing
	 * document, an insert is performed instead. If no id is present a new primary key
	 * id is provided for the item.
	 *
	 * @param {Function=} callback Optional callback method.
	 * @returns {Object} An object containing two keys, "op" contains either "insert" or
	 * "update" depending on the type of operation that was performed and "result"
	 * contains the return data from the operation used.
	 */
	Collection.prototype.upsert = function (obj, callback) {
		if (this.isDropped()) {
			throw(this.logIdentifier() + ' Cannot operate in a dropped state!');
		}

		if (obj) {
			var queue = this._deferQueue.upsert,
				deferThreshold = this._deferThreshold.upsert,
				returnData = {},
				query,
				i;

			// Determine if the object passed is an array or not
			if (obj instanceof Array) {
				if (this._deferredCalls && obj.length > deferThreshold) {
					// Break up upsert into blocks
					this._deferQueue.upsert = queue.concat(obj);

					// Fire off the insert queue handler
					this.processQueue('upsert', callback);

					return {};
				} else {
					// Loop the array and upsert each item
					returnData = [];

					for (i = 0; i < obj.length; i++) {
						returnData.push(this.upsert(obj[i]));
					}

					if (callback) { callback(); }

					return returnData;
				}
			}

			// Determine if the operation is an insert or an update
			if (obj[this._primaryKey]) {
				// Check if an object with this primary key already exists
				query = {};
				query[this._primaryKey] = obj[this._primaryKey];

				if (this._primaryIndex.lookup(query)[0]) {
					// The document already exists with this id, this operation is an update
					returnData.op = 'update';
				} else {
					// No document with this id exists, this operation is an insert
					returnData.op = 'insert';
				}
			} else {
				// The document passed does not contain an id, this operation is an insert
				returnData.op = 'insert';
			}

			switch (returnData.op) {
				case 'insert':
					returnData.result = this.insert(obj);
					break;

				case 'update':
					returnData.result = this.update(query, obj);
					break;

				default:
					break;
			}

			return returnData;
		} else {
			if (callback) { callback(); }
		}

		return {};
	};

	/**
	 * Executes a method against each document that matches query and returns an
	 * array of documents that may have been modified by the method.
	 * @param {Object} query The query object.
	 * @param {Function} func The method that each document is passed to. If this method
	 * returns false for a particular document it is excluded from the results.
	 * @param {Object=} options Optional options object.
	 * @returns {Array}
	 */
	Collection.prototype.filter = function (query, func, options) {
		return (this.find(query, options)).filter(func);
	};

	/**
	 * Executes a method against each document that matches query and then executes
	 * an update based on the return data of the method.
	 * @param {Object} query The query object.
	 * @param {Function} func The method that each document is passed to. If this method
	 * returns false for a particular document it is excluded from the update.
	 * @param {Object=} options Optional options object passed to the initial find call.
	 * @returns {Array}
	 */
	Collection.prototype.filterUpdate = function (query, func, options) {
		var items = this.find(query, options),
			results = [],
			singleItem,
			singleQuery,
			singleUpdate,
			pk = this.primaryKey(),
			i;

		for (i = 0; i < items.length; i++) {
			singleItem = items[i];
			singleUpdate = func(singleItem);

			if (singleUpdate) {
				singleQuery = {};
				singleQuery[pk] = singleItem[pk];

				results.push(this.update(singleQuery, singleUpdate));
			}
		}

		return results;
	};

	/**
	 * Modifies an existing document or documents in a collection. This will update
	 * all matches for 'query' with the data held in 'update'. It will not overwrite
	 * the matched documents with the update document.
	 *
	 * @param {Object} query The query that must be matched for a document to be
	 * operated on.
	 * @param {Object} update The object containing updated key/values. Any keys that
	 * match keys on the existing document will be overwritten with this data. Any
	 * keys that do not currently exist on the document will be added to the document.
	 * @param {Object=} options An options object.
	 * @returns {Array} The items that were updated.
	 */
	Collection.prototype.update = function (query, update, options) {
		if (this.isDropped()) {
			throw(this.logIdentifier() + ' Cannot operate in a dropped state!');
		}

		// Decouple the update data
		update = this.decouple(update);

		// Convert queries from mongo dot notation to forerunner queries
		if (this.mongoEmulation()) {
			this.convertToFdb(query);
			this.convertToFdb(update);
		}

		// Handle transform
		update = this.transformIn(update);

		if (this.debug()) {
			console.log(this.logIdentifier() + ' Updating some data');
		}

		var self = this,
			op = this._metrics.create('update'),
			dataSet,
			updated,
			updateCall = function (referencedDoc) {
				var oldDoc = self.decouple(referencedDoc),
					newDoc,
					triggerOperation,
					result;

				if (self.willTrigger(self.TYPE_UPDATE, self.PHASE_BEFORE) || self.willTrigger(self.TYPE_UPDATE, self.PHASE_AFTER)) {
					newDoc = self.decouple(referencedDoc);

					triggerOperation = {
						type: 'update',
						query: self.decouple(query),
						update: self.decouple(update),
						options: self.decouple(options),
						op: op
					};

					// Update newDoc with the update criteria so we know what the data will look
					// like AFTER the update is processed
					result = self.updateObject(newDoc, triggerOperation.update, triggerOperation.query, triggerOperation.options, '');

					if (self.processTrigger(triggerOperation, self.TYPE_UPDATE, self.PHASE_BEFORE, referencedDoc, newDoc) !== false) {
						// No triggers complained so let's execute the replacement of the existing
						// object with the new one
						result = self.updateObject(referencedDoc, newDoc, triggerOperation.query, triggerOperation.options, '');

						// NOTE: If for some reason we would only like to fire this event if changes are actually going
						// to occur on the object from the proposed update then we can add "result &&" to the if
						self.processTrigger(triggerOperation, self.TYPE_UPDATE, self.PHASE_AFTER, oldDoc, newDoc);
					} else {
						// Trigger cancelled operation so tell result that it was not updated
						result = false;
					}
				} else {
					// No triggers complained so let's execute the replacement of the existing
					// object with the new one
					result = self.updateObject(referencedDoc, update, query, options, '');
				}

				// Inform indexes of the change
				self._updateIndexes(oldDoc, referencedDoc);

				return result;
			};

		op.start();
		op.time('Retrieve documents to update');
		dataSet = this.find(query, {$decouple: false});
		op.time('Retrieve documents to update');

		if (dataSet.length) {
			op.time('Update documents');
			updated = dataSet.filter(updateCall);
			op.time('Update documents');

			if (updated.length) {
				op.time('Resolve chains');
				this.chainSend('update', {
					query: query,
					update: update,
					dataSet: updated
				}, options);
				op.time('Resolve chains');

				this._onUpdate(updated);
				this._onChange();
				this.deferEmit('change', {type: 'update', data: updated});
			}
		}

		op.stop();

		// TODO: Should we decouple the updated array before return by default?
		return updated || [];
	};

	/**
	 * Replaces an existing object with data from the new object without
	 * breaking data references.
	 * @param {Object} currentObj The object to alter.
	 * @param {Object} newObj The new object to overwrite the existing one with.
	 * @returns {*} Chain.
	 * @private
	 */
	Collection.prototype._replaceObj = function (currentObj, newObj) {
		var i;

		// Check if the new document has a different primary key value from the existing one
		// Remove item from indexes
		this._removeFromIndexes(currentObj);

		// Remove existing keys from current object
		for (i in currentObj) {
			if (currentObj.hasOwnProperty(i)) {
				delete currentObj[i];
			}
		}

		// Add new keys to current object
		for (i in newObj) {
			if (newObj.hasOwnProperty(i)) {
				currentObj[i] = newObj[i];
			}
		}

		// Update the item in the primary index
		if (!this._insertIntoIndexes(currentObj)) {
			throw(this.logIdentifier() + ' Primary key violation in update! Key violated: ' + currentObj[this._primaryKey]);
		}

		// Update the object in the collection data
		//this._data.splice(this._data.indexOf(currentObj), 1, newObj);

		return this;
	};

	/**
	 * Helper method to update a document from it's id.
	 * @param {String} id The id of the document.
	 * @param {Object} update The object containing the key/values to update to.
	 * @returns {Array} The items that were updated.
	 */
	Collection.prototype.updateById = function (id, update) {
		var searchObj = {};
		searchObj[this._primaryKey] = id;
		return this.update(searchObj, update);
	};

	/**
	 * Internal method for document updating.
	 * @param {Object} doc The document to update.
	 * @param {Object} update The object with key/value pairs to update the document with.
	 * @param {Object} query The query object that we need to match to perform an update.
	 * @param {Object} options An options object.
	 * @param {String} path The current recursive path.
	 * @param {String} opType The type of update operation to perform, if none is specified
	 * default is to set new data against matching fields.
	 * @returns {Boolean} True if the document was updated with new / changed data or
	 * false if it was not updated because the data was the same.
	 * @private
	 */
	Collection.prototype.updateObject = function (doc, update, query, options, path, opType) {
		// TODO: This method is long, try to break it into smaller pieces
		update = this.decouple(update);

		// Clear leading dots from path
		path = path || '';
		if (path.substr(0, 1) === '.') { path = path.substr(1, path.length -1); }

		//var oldDoc = this.decouple(doc),
		var	updated = false,
			recurseUpdated = false,
			operation,
			tmpArray,
			tmpIndex,
			tmpCount,
			tempIndex,
			pathInstance,
			sourceIsArray,
			updateIsArray,
			i;

		// Loop each key in the update object
		for (i in update) {
			if (update.hasOwnProperty(i)) {
				// Reset operation flag
				operation = false;

				// Check if the property starts with a dollar (function)
				if (i.substr(0, 1) === '$') {
					// Check for commands
					switch (i) {
						case '$key':
						case '$index':
						case '$data':
						case '$min':
						case '$max':
							// Ignore some operators
							operation = true;
							break;

						case '$each':
							operation = true;

							// Loop over the array of updates and run each one
							tmpCount = update.$each.length;
							for (tmpIndex = 0; tmpIndex < tmpCount; tmpIndex++) {
								recurseUpdated = this.updateObject(doc, update.$each[tmpIndex], query, options, path);

								if (recurseUpdated) {
									updated = true;
								}
							}

							updated = updated || recurseUpdated;
							break;

						default:
							operation = true;

							// Now run the operation
							recurseUpdated = this.updateObject(doc, update[i], query, options, path, i);
							updated = updated || recurseUpdated;
							break;
					}
				}

				// Check if the key has a .$ at the end, denoting an array lookup
				if (this._isPositionalKey(i)) {
					operation = true;

					// Modify i to be the name of the field
					i = i.substr(0, i.length - 2);

					pathInstance = new Path(path + '.' + i);

					// Check if the key is an array and has items
					if (doc[i] && doc[i] instanceof Array && doc[i].length) {
						tmpArray = [];

						// Loop the array and find matches to our search
						for (tmpIndex = 0; tmpIndex < doc[i].length; tmpIndex++) {
							if (this._match(doc[i][tmpIndex], pathInstance.value(query)[0], options, '', {})) {
								tmpArray.push(tmpIndex);
							}
						}

						// Loop the items that matched and update them
						for (tmpIndex = 0; tmpIndex < tmpArray.length; tmpIndex++) {
							recurseUpdated = this.updateObject(doc[i][tmpArray[tmpIndex]], update[i + '.$'], query, options, path + '.' + i, opType);
							updated = updated || recurseUpdated;
						}
					}
				}

				if (!operation) {
					if (!opType && typeof(update[i]) === 'object') {
						if (doc[i] !== null && typeof(doc[i]) === 'object') {
							// Check if we are dealing with arrays
							sourceIsArray = doc[i] instanceof Array;
							updateIsArray = update[i] instanceof Array;

							if (sourceIsArray || updateIsArray) {
								// Check if the update is an object and the doc is an array
								if (!updateIsArray && sourceIsArray) {
									// Update is an object, source is an array so match the array items
									// with our query object to find the one to update inside this array

									// Loop the array and find matches to our search
									for (tmpIndex = 0; tmpIndex < doc[i].length; tmpIndex++) {
										recurseUpdated = this.updateObject(doc[i][tmpIndex], update[i], query, options, path + '.' + i, opType);
										updated = updated || recurseUpdated;
									}
								} else {
									// Either both source and update are arrays or the update is
									// an array and the source is not, so set source to update
									if (doc[i] !== update[i]) {
										this._updateProperty(doc, i, update[i]);
										updated = true;
									}
								}
							} else {
								// The doc key is an object so traverse the
								// update further
								recurseUpdated = this.updateObject(doc[i], update[i], query, options, path + '.' + i, opType);
								updated = updated || recurseUpdated;
							}
						} else {
							if (doc[i] !== update[i]) {
								this._updateProperty(doc, i, update[i]);
								updated = true;
							}
						}
					} else {
						switch (opType) {
							case '$inc':
								var doUpdate = true;

								// Check for a $min / $max operator
								if (update[i] > 0) {
									if (update.$max) {
										// Check current value
										if (doc[i] >= update.$max) {
											// Don't update
											doUpdate = false;
										}
									}
								} else if (update[i] < 0) {
									if (update.$min) {
										// Check current value
										if (doc[i] <= update.$min) {
											// Don't update
											doUpdate = false;
										}
									}
								}

								if (doUpdate) {
									this._updateIncrement(doc, i, update[i]);
									updated = true;
								}
								break;

							case '$cast':
								// Casts a property to the type specified if it is not already
								// that type. If the cast is an array or an object and the property
								// is not already that type a new array or object is created and
								// set to the property, overwriting the previous value
								switch (update[i]) {
									case 'array':
										if (!(doc[i] instanceof Array)) {
											// Cast to an array
											this._updateProperty(doc, i, update.$data || []);
											updated = true;
										}
										break;

									case 'object':
										if (!(doc[i] instanceof Object) || (doc[i] instanceof Array)) {
											// Cast to an object
											this._updateProperty(doc, i, update.$data || {});
											updated = true;
										}
										break;

									case 'number':
										if (typeof doc[i] !== 'number') {
											// Cast to a number
											this._updateProperty(doc, i, Number(doc[i]));
											updated = true;
										}
										break;

									case 'string':
										if (typeof doc[i] !== 'string') {
											// Cast to a string
											this._updateProperty(doc, i, String(doc[i]));
											updated = true;
										}
										break;

									default:
										throw(this.logIdentifier() + ' Cannot update cast to unknown type: ' + update[i]);
								}

								break;

							case '$push':
								// Check if the target key is undefined and if so, create an array
								if (doc[i] === undefined) {
									// Initialise a new array
									this._updateProperty(doc, i, []);
								}

								// Check that the target key is an array
								if (doc[i] instanceof Array) {
									// Check for a $position modifier with an $each
									if (update[i].$position !== undefined && update[i].$each instanceof Array) {
										// Grab the position to insert at
										tempIndex = update[i].$position;

										// Loop the each array and push each item
										tmpCount = update[i].$each.length;
										for (tmpIndex = 0; tmpIndex < tmpCount; tmpIndex++) {
											this._updateSplicePush(doc[i], tempIndex + tmpIndex, update[i].$each[tmpIndex]);
										}
									} else if (update[i].$each instanceof Array) {
										// Do a loop over the each to push multiple items
										tmpCount = update[i].$each.length;
										for (tmpIndex = 0; tmpIndex < tmpCount; tmpIndex++) {
											this._updatePush(doc[i], update[i].$each[tmpIndex]);
										}
									} else {
										// Do a standard push
										this._updatePush(doc[i], update[i]);
									}
									updated = true;
								} else {
									throw(this.logIdentifier() + ' Cannot push to a key that is not an array! (' + i + ')');
								}
								break;

							case '$pull':
								if (doc[i] instanceof Array) {
									tmpArray = [];

									// Loop the array and find matches to our search
									for (tmpIndex = 0; tmpIndex < doc[i].length; tmpIndex++) {
										if (this._match(doc[i][tmpIndex], update[i], options, '', {})) {
											tmpArray.push(tmpIndex);
										}
									}

									tmpCount = tmpArray.length;

									// Now loop the pull array and remove items to be pulled
									while (tmpCount--) {
										this._updatePull(doc[i], tmpArray[tmpCount]);
										updated = true;
									}
								}
								break;

							case '$pullAll':
								if (doc[i] instanceof Array) {
									if (update[i] instanceof Array) {
										tmpArray = doc[i];
										tmpCount = tmpArray.length;

										if (tmpCount > 0) {
											// Now loop the pull array and remove items to be pulled
											while (tmpCount--) {
												for (tempIndex = 0; tempIndex < update[i].length; tempIndex++) {
													if (tmpArray[tmpCount] === update[i][tempIndex]) {
														this._updatePull(doc[i], tmpCount);
														tmpCount--;
														updated = true;
													}
												}

												if (tmpCount < 0) {
													break;
												}
											}
										}
									} else {
										throw(this.logIdentifier() + ' Cannot pullAll without being given an array of values to pull! (' + i + ')');
									}
								}
								break;

							case '$addToSet':
								// Check if the target key is undefined and if so, create an array
								if (doc[i] === undefined) {
									// Initialise a new array
									this._updateProperty(doc, i, []);
								}

								// Check that the target key is an array
								if (doc[i] instanceof Array) {
									// Loop the target array and check for existence of item
									var targetArr = doc[i],
										targetArrIndex,
										targetArrCount = targetArr.length,
										objHash,
										addObj = true,
										optionObj = (options && options.$addToSet),
										hashMode,
										pathSolver;

									// Check if we have an options object for our operation
									if (update[i].$key) {
										hashMode = false;
										pathSolver = new Path(update[i].$key);
										objHash = pathSolver.value(update[i])[0];

										// Remove the key from the object before we add it
										delete update[i].$key;
									} else if (optionObj && optionObj.key) {
										hashMode = false;
										pathSolver = new Path(optionObj.key);
										objHash = pathSolver.value(update[i])[0];
									} else {
										objHash = this.jStringify(update[i]);
										hashMode = true;
									}

									for (targetArrIndex = 0; targetArrIndex < targetArrCount; targetArrIndex++) {
										if (hashMode) {
											// Check if objects match via a string hash (JSON)
											if (this.jStringify(targetArr[targetArrIndex]) === objHash) {
												// The object already exists, don't add it
												addObj = false;
												break;
											}
										} else {
											// Check if objects match based on the path
											if (objHash === pathSolver.value(targetArr[targetArrIndex])[0]) {
												// The object already exists, don't add it
												addObj = false;
												break;
											}
										}
									}

									if (addObj) {
										this._updatePush(doc[i], update[i]);
										updated = true;
									}
								} else {
									throw(this.logIdentifier() + ' Cannot addToSet on a key that is not an array! (' + i + ')');
								}
								break;

							case '$splicePush':
								// Check if the target key is undefined and if so, create an array
								if (doc[i] === undefined) {
									// Initialise a new array
									this._updateProperty(doc, i, []);
								}

								// Check that the target key is an array
								if (doc[i] instanceof Array) {
									tempIndex = update.$index;

									if (tempIndex !== undefined) {
										delete update.$index;

										// Check for out of bounds index
										if (tempIndex > doc[i].length) {
											tempIndex = doc[i].length;
										}

										this._updateSplicePush(doc[i], tempIndex, update[i]);
										updated = true;
									} else {
										throw(this.logIdentifier() + ' Cannot splicePush without a $index integer value!');
									}
								} else {
									throw(this.logIdentifier() + ' Cannot splicePush with a key that is not an array! (' + i + ')');
								}
								break;

							case '$move':
								if (doc[i] instanceof Array) {
									// Loop the array and find matches to our search
									for (tmpIndex = 0; tmpIndex < doc[i].length; tmpIndex++) {
										if (this._match(doc[i][tmpIndex], update[i], options, '', {})) {
											var moveToIndex = update.$index;

											if (moveToIndex !== undefined) {
												delete update.$index;

												this._updateSpliceMove(doc[i], tmpIndex, moveToIndex);
												updated = true;
											} else {
												throw(this.logIdentifier() + ' Cannot move without a $index integer value!');
											}
											break;
										}
									}
								} else {
									throw(this.logIdentifier() + ' Cannot move on a key that is not an array! (' + i + ')');
								}
								break;

							case '$mul':
								this._updateMultiply(doc, i, update[i]);
								updated = true;
								break;

							case '$rename':
								this._updateRename(doc, i, update[i]);
								updated = true;
								break;

							case '$overwrite':
								this._updateOverwrite(doc, i, update[i]);
								updated = true;
								break;

							case '$unset':
								this._updateUnset(doc, i);
								updated = true;
								break;

							case '$clear':
								this._updateClear(doc, i);
								updated = true;
								break;

							case '$pop':
								if (doc[i] instanceof Array) {
									if (this._updatePop(doc[i], update[i])) {
										updated = true;
									}
								} else {
									throw(this.logIdentifier() + ' Cannot pop from a key that is not an array! (' + i + ')');
								}
								break;

							case '$toggle':
								// Toggle the boolean property between true and false
								this._updateProperty(doc, i, !doc[i]);
								updated = true;
								break;

							default:
								if (doc[i] !== update[i]) {
									this._updateProperty(doc, i, update[i]);
									updated = true;
								}
								break;
						}
					}
				}
			}
		}

		return updated;
	};

	/**
	 * Determines if the passed key has an array positional mark (a dollar at the end
	 * of its name).
	 * @param {String} key The key to check.
	 * @returns {Boolean} True if it is a positional or false if not.
	 * @private
	 */
	Collection.prototype._isPositionalKey = function (key) {
		return key.substr(key.length - 2, 2) === '.$';
	};

	/**
	 * Removes any documents from the collection that match the search query
	 * key/values.
	 * @param {Object} query The query object.
	 * @param {Object=} options An options object.
	 * @param {Function=} callback A callback method.
	 * @returns {Array} An array of the documents that were removed.
	 */
	Collection.prototype.remove = function (query, options, callback) {
		if (this.isDropped()) {
			throw(this.logIdentifier() + ' Cannot operate in a dropped state!');
		}

		var self = this,
			dataSet,
			index,
			arrIndex,
			returnArr,
			removeMethod,
			triggerOperation,
			doc,
			newDoc;

		if (typeof(options) === 'function') {
			callback = options;
			options = {};
		}

		// Convert queries from mongo dot notation to forerunner queries
		if (this.mongoEmulation()) {
			this.convertToFdb(query);
		}

		if (query instanceof Array) {
			returnArr = [];

			for (arrIndex = 0; arrIndex < query.length; arrIndex++) {
				returnArr.push(this.remove(query[arrIndex], {noEmit: true}));
			}

			if (!options || (options && !options.noEmit)) {
				this._onRemove(returnArr);
			}

			if (callback) { callback(false, returnArr); }
			return returnArr;
		} else {
			returnArr = [];
			dataSet = this.find(query, {$decouple: false});

			if (dataSet.length) {
				removeMethod = function (dataItem) {
					// Remove the item from the collection's indexes
					self._removeFromIndexes(dataItem);

					// Remove data from internal stores
					index = self._data.indexOf(dataItem);
					self._dataRemoveAtIndex(index);

					returnArr.push(dataItem);
				};

				// Remove the data from the collection
				for (var i = 0; i < dataSet.length; i++) {
					doc = dataSet[i];

					if (self.willTrigger(self.TYPE_REMOVE, self.PHASE_BEFORE) || self.willTrigger(self.TYPE_REMOVE, self.PHASE_AFTER)) {
						triggerOperation = {
							type: 'remove'
						};

						newDoc = self.decouple(doc);

						if (self.processTrigger(triggerOperation, self.TYPE_REMOVE, self.PHASE_BEFORE, newDoc, newDoc) !== false) {
							// The trigger didn't ask to cancel so execute the removal method
							removeMethod(doc);

							self.processTrigger(triggerOperation, self.TYPE_REMOVE, self.PHASE_AFTER, newDoc, newDoc);
						}
					} else {
						// No triggers to execute
						removeMethod(doc);
					}
				}

				if (returnArr.length) {
					//op.time('Resolve chains');
					self.chainSend('remove', {
						query: query,
						dataSet: returnArr
					}, options);
					//op.time('Resolve chains');

					if (!options || (options && !options.noEmit)) {
						this._onRemove(returnArr);
					}

					this._onChange();
					this.deferEmit('change', {type: 'remove', data: returnArr});
				}
			}

			if (callback) { callback(false, returnArr); }
			return returnArr;
		}
	};

	/**
	 * Helper method that removes a document that matches the given id.
	 * @param {String} id The id of the document to remove.
	 * @returns {Array} An array of documents that were removed.
	 */
	Collection.prototype.removeById = function (id) {
		var searchObj = {};
		searchObj[this._primaryKey] = id;
		return this.remove(searchObj);
	};

	/**
	 * Processes a deferred action queue.
	 * @param {String} type The queue name to process.
	 * @param {Function} callback A method to call when the queue has processed.
	 * @param {Object=} resultObj A temp object to hold results in.
	 */
	Collection.prototype.processQueue = function (type, callback, resultObj) {
		var self = this,
			queue = this._deferQueue[type],
			deferThreshold = this._deferThreshold[type],
			deferTime = this._deferTime[type],
			dataArr,
			result;

		resultObj = resultObj || {
			deferred: true
		};

		if (queue.length) {
			// Process items up to the threshold
			if (queue.length) {
				if (queue.length > deferThreshold) {
					// Grab items up to the threshold value
					dataArr = queue.splice(0, deferThreshold);
				} else {
					// Grab all the remaining items
					dataArr = queue.splice(0, queue.length);
				}

				result = self[type](dataArr);

				switch (type) {
					case 'insert':
						resultObj.inserted = resultObj.inserted || [];
						resultObj.failed = resultObj.failed || [];

						resultObj.inserted = resultObj.inserted.concat(result.inserted);
						resultObj.failed = resultObj.failed.concat(result.failed);
						break;
				}
			}

			// Queue another process
			setTimeout(function () {
				self.processQueue.call(self, type, callback, resultObj);
			}, deferTime);
		} else {
			if (callback) { callback(resultObj); }
		}

		// Check if all queues are complete
		if (!this.isProcessingQueue()) {
			this.emit('queuesComplete');
		}
	};

	/**
	 * Checks if any CRUD operations have been deferred and are still waiting to
	 * be processed.
	 * @returns {Boolean} True if there are still deferred CRUD operations to process
	 * or false if all queues are clear.
	 */
	Collection.prototype.isProcessingQueue = function () {
		var i;

		for (i in this._deferQueue) {
			if (this._deferQueue.hasOwnProperty(i)) {
				if (this._deferQueue[i].length) {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * Inserts a document or array of documents into the collection.
	 * @param {Object|Array} data Either a document object or array of document
	 * @param {Number=} index Optional index to insert the record at.
	 * @param {Function=} callback Optional callback called once action is complete.
	 * objects to insert into the collection.
	 */
	Collection.prototype.insert = function (data, index, callback) {
		if (this.isDropped()) {
			throw(this.logIdentifier() + ' Cannot operate in a dropped state!');
		}

		if (typeof(index) === 'function') {
			callback = index;
			index = this._data.length;
		} else if (index === undefined) {
			index = this._data.length;
		}

		data = this.transformIn(data);
		return this._insertHandle(data, index, callback);
	};

	/**
	 * Inserts a document or array of documents into the collection.
	 * @param {Object|Array} data Either a document object or array of document
	 * @param {Number=} index Optional index to insert the record at.
	 * @param {Function=} callback Optional callback called once action is complete.
	 * objects to insert into the collection.
	 */
	Collection.prototype._insertHandle = function (data, index, callback) {
		var //self = this,
			queue = this._deferQueue.insert,
			deferThreshold = this._deferThreshold.insert,
			//deferTime = this._deferTime.insert,
			inserted = [],
			failed = [],
			insertResult,
			resultObj,
			i;

		if (data instanceof Array) {
			// Check if there are more insert items than the insert defer
			// threshold, if so, break up inserts so we don't tie up the
			// ui or thread
			if (this._deferredCalls && data.length > deferThreshold) {
				// Break up insert into blocks
				this._deferQueue.insert = queue.concat(data);

				// Fire off the insert queue handler
				this.processQueue('insert', callback);

				return;
			} else {
				// Loop the array and add items
				for (i = 0; i < data.length; i++) {
					insertResult = this._insert(data[i], index + i);

					if (insertResult === true) {
						inserted.push(data[i]);
					} else {
						failed.push({
							doc: data[i],
							reason: insertResult
						});
					}
				}
			}
		} else {
			// Store the data item
			insertResult = this._insert(data, index);

			if (insertResult === true) {
				inserted.push(data);
			} else {
				failed.push({
					doc: data,
					reason: insertResult
				});
			}
		}

		resultObj = {
			deferred: false,
			inserted: inserted,
			failed: failed
		};

		this._onInsert(inserted, failed);
		if (callback) { callback(resultObj); }

		this._onChange();
		this.deferEmit('change', {type: 'insert', data: inserted});

		return resultObj;
	};

	/**
	 * Internal method to insert a document into the collection. Will
	 * check for index violations before allowing the document to be inserted.
	 * @param {Object} doc The document to insert after passing index violation
	 * tests.
	 * @param {Number=} index Optional index to insert the document at.
	 * @returns {Boolean|Object} True on success, false if no document passed,
	 * or an object containing details about an index violation if one occurred.
	 * @private
	 */
	Collection.prototype._insert = function (doc, index) {
		if (doc) {
			var self = this,
				indexViolation,
				triggerOperation,
				insertMethod,
				newDoc,
				capped = this.capped(),
				cappedSize = this.cappedSize();

			this.ensurePrimaryKey(doc);

			// Check indexes are not going to be broken by the document
			indexViolation = this.insertIndexViolation(doc);

			insertMethod = function (doc) {
				// Add the item to the collection's indexes
				self._insertIntoIndexes(doc);

				// Check index overflow
				if (index > self._data.length) {
					index = self._data.length;
				}

				// Insert the document
				self._dataInsertAtIndex(index, doc);

				// Check capped collection status and remove first record
				// if we are over the threshold
				if (capped && self._data.length > cappedSize) {
					// Remove the first item in the data array
					self.removeById(self._data[0][self._primaryKey]);
				}

				//op.time('Resolve chains');
				self.chainSend('insert', doc, {index: index});
				//op.time('Resolve chains');
			};

			if (!indexViolation) {
				if (self.willTrigger(self.TYPE_INSERT, self.PHASE_BEFORE) || self.willTrigger(self.TYPE_INSERT, self.PHASE_AFTER)) {
					triggerOperation = {
						type: 'insert'
					};

					if (self.processTrigger(triggerOperation, self.TYPE_INSERT, self.PHASE_BEFORE, {}, doc) !== false) {
						insertMethod(doc);

						if (self.willTrigger(self.TYPE_INSERT, self.PHASE_AFTER)) {
							// Clone the doc so that the programmer cannot update the internal document
							// on the "after" phase trigger
							newDoc = self.decouple(doc);

							self.processTrigger(triggerOperation, self.TYPE_INSERT, self.PHASE_AFTER, {}, newDoc);
						}
					} else {
						// The trigger just wants to cancel the operation
						return 'Trigger cancelled operation';
					}
				} else {
					// No triggers to execute
					insertMethod(doc);
				}

				return true;
			} else {
				return 'Index violation in index: ' + indexViolation;
			}
		}

		return 'No document passed to insert';
	};

	/**
	 * Inserts a document into the internal collection data array at
	 * Inserts a document into the internal collection data array at
	 * the specified index.
	 * @param {number} index The index to insert at.
	 * @param {object} doc The document to insert.
	 * @private
	 */
	Collection.prototype._dataInsertAtIndex = function (index, doc) {
		this._data.splice(index, 0, doc);
	};

	/**
	 * Removes a document from the internal collection data array at
	 * the specified index.
	 * @param {number} index The index to remove from.
	 * @private
	 */
	Collection.prototype._dataRemoveAtIndex = function (index) {
		this._data.splice(index, 1);
	};

	/**
	 * Replaces all data in the collection's internal data array with
	 * the passed array of data.
	 * @param {array} data The array of data to replace existing data with.
	 * @private
	 */
	Collection.prototype._dataReplace = function (data) {
		// Clear the array - using a while loop with pop is by far the
		// fastest way to clear an array currently
		while (this._data.length) {
			this._data.pop();
		}

		// Append new items to the array
		this._data = this._data.concat(data);
	};

	/**
	 * Inserts a document into the collection indexes.
	 * @param {Object} doc The document to insert.
	 * @private
	 */
	Collection.prototype._insertIntoIndexes = function (doc) {
		var arr = this._indexByName,
			arrIndex,
			violated,
			jString = this.jStringify(doc);

		// Insert to primary key index
		violated = this._primaryIndex.uniqueSet(doc[this._primaryKey], doc);
		this._primaryCrc.uniqueSet(doc[this._primaryKey], jString);
		this._crcLookup.uniqueSet(jString, doc);

		// Insert into other indexes
		for (arrIndex in arr) {
			if (arr.hasOwnProperty(arrIndex)) {
				arr[arrIndex].insert(doc);
			}
		}

		return violated;
	};

	/**
	 * Removes a document from the collection indexes.
	 * @param {Object} doc The document to remove.
	 * @private
	 */
	Collection.prototype._removeFromIndexes = function (doc) {
		var arr = this._indexByName,
			arrIndex,
			jString = this.jStringify(doc);

		// Remove from primary key index
		this._primaryIndex.unSet(doc[this._primaryKey]);
		this._primaryCrc.unSet(doc[this._primaryKey]);
		this._crcLookup.unSet(jString);

		// Remove from other indexes
		for (arrIndex in arr) {
			if (arr.hasOwnProperty(arrIndex)) {
				arr[arrIndex].remove(doc);
			}
		}
	};

	/**
	 * Updates collection index data for the passed document.
	 * @param {Object} oldDoc The old document as it was before the update.
	 * @param {Object} newDoc The document as it now is after the update.
	 * @private
	 */
	Collection.prototype._updateIndexes = function (oldDoc, newDoc) {
		this._removeFromIndexes(oldDoc);
		this._insertIntoIndexes(newDoc);
	};

	/**
	 * Rebuild collection indexes.
	 * @private
	 */
	Collection.prototype._rebuildIndexes = function () {
		var arr = this._indexByName,
			arrIndex;

		// Remove from other indexes
		for (arrIndex in arr) {
			if (arr.hasOwnProperty(arrIndex)) {
				arr[arrIndex].rebuild();
			}
		}
	};

	/**
	 * Uses the passed query to generate a new collection with results
	 * matching the query parameters.
	 *
	 * @param {Object} query The query object to generate the subset with.
	 * @param {Object=} options An options object.
	 * @returns {*}
	 */
	Collection.prototype.subset = function (query, options) {
		var result = this.find(query, options);

		return new Collection()
			.subsetOf(this)
			.primaryKey(this._primaryKey)
			.setData(result);
	};

	/**
	 * Gets / sets the collection that this collection is a subset of.
	 * @param {Collection=} collection The collection to set as the parent of this subset.
	 * @returns {Collection}
	 */
	Shared.synthesize(Collection.prototype, 'subsetOf');

	/**
	 * Checks if the collection is a subset of the passed collection.
	 * @param {Collection} collection The collection to test against.
	 * @returns {Boolean} True if the passed collection is the parent of
	 * the current collection.
	 */
	Collection.prototype.isSubsetOf = function (collection) {
		return this._subsetOf === collection;
	};

	/**
	 * Find the distinct values for a specified field across a single collection and
	 * returns the results in an array.
	 * @param {String} key The field path to return distinct values for e.g. "person.name".
	 * @param {Object=} query The query to use to filter the documents used to return values from.
	 * @param {Object=} options The query options to use when running the query.
	 * @returns {Array}
	 */
	Collection.prototype.distinct = function (key, query, options) {
		if (this.isDropped()) {
			throw(this.logIdentifier() + ' Cannot operate in a dropped state!');
		}

		var data = this.find(query, options),
			pathSolver = new Path(key),
			valueUsed = {},
			distinctValues = [],
			value,
			i;

		// Loop the data and build array of distinct values
		for (i = 0; i < data.length; i++) {
			value = pathSolver.value(data[i])[0];

			if (value && !valueUsed[value]) {
				valueUsed[value] = true;
				distinctValues.push(value);
			}
		}

		return distinctValues;
	};

	/**
	 * Helper method to find a document by it's id.
	 * @param {String} id The id of the document.
	 * @param {Object=} options The options object, allowed keys are sort and limit.
	 * @returns {Array} The items that were updated.
	 */
	Collection.prototype.findById = function (id, options) {
		var searchObj = {};
		searchObj[this._primaryKey] = id;
		return this.find(searchObj, options)[0];
	};

	/**
	 * Finds all documents that contain the passed string or search object
	 * regardless of where the string might occur within the document. This
	 * will match strings from the start, middle or end of the document's
	 * string (partial match).
	 * @param search The string to search for. Case sensitive.
	 * @param options A standard find() options object.
	 * @returns {Array} An array of documents that matched the search string.
	 */
	Collection.prototype.peek = function (search, options) {
		// Loop all items
		var arr = this._data,
			arrCount = arr.length,
			arrIndex,
			arrItem,
			tempColl = new Collection(),
			typeOfSearch = typeof search;

		if (typeOfSearch === 'string') {
			for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
				// Get json representation of object
				arrItem = this.jStringify(arr[arrIndex]);

				// Check if string exists in object json
				if (arrItem.indexOf(search) > -1) {
					// Add this item to the temp collection
					tempColl.insert(arr[arrIndex]);
				}
			}

			return tempColl.find({}, options);
		} else {
			return this.find(search, options);
		}
	};

	/**
	 * Provides a query plan / operations log for a query.
	 * @param {Object} query The query to execute.
	 * @param {Object=} options Optional options object.
	 * @returns {Object} The query plan.
	 */
	Collection.prototype.explain = function (query, options) {
		var result = this.find(query, options);
		return result.__fdbOp._data;
	};

	/**
	 * Generates an options object with default values or adds default
	 * values to a passed object if those values are not currently set
	 * to anything.
	 * @param {object=} obj Optional options object to modify.
	 * @returns {object} The options object.
	 */
	Collection.prototype.options = function (obj) {
		obj = obj || {};
		obj.$decouple = obj.$decouple !== undefined ? obj.$decouple : true;
		obj.$explain = obj.$explain !== undefined ? obj.$explain : false;
		
		return obj;
	};

	/**
	 * Queries the collection based on the query object passed.
	 * @param {Object} query The query key/values that a document must match in
	 * order for it to be returned in the result array.
	 * @param {Object=} options An optional options object.
	 * @param {Function=} callback !! DO NOT USE, THIS IS NON-OPERATIONAL !!
	 * Optional callback. If specified the find process
	 * will not return a value and will assume that you wish to operate under an
	 * async mode. This will break up large find requests into smaller chunks and
	 * process them in a non-blocking fashion allowing large datasets to be queried
	 * without causing the browser UI to pause. Results from this type of operation
	 * will be passed back to the callback once completed.
	 *
	 * @returns {Array} The results array from the find operation, containing all
	 * documents that matched the query.
	 */
	Collection.prototype.find = function (query, options, callback) {
		// Convert queries from mongo dot notation to forerunner queries
		if (this.mongoEmulation()) {
			this.convertToFdb(query);
		}

		if (callback) {
			// Check the size of the collection's data array

			// Split operation into smaller tasks and callback when complete
			callback('Callbacks for the find() operation are not yet implemented!', []);
			return [];
		}

		return this._find.apply(this, arguments);
	};

	Collection.prototype._find = function (query, options) {
		if (this.isDropped()) {
			throw(this.logIdentifier() + ' Cannot operate in a dropped state!');
		}

		// TODO: This method is quite long, break into smaller pieces
		query = query || {};
		options = this.options(options);

		var op = this._metrics.create('find'),
			pk = this.primaryKey(),
			self = this,
			analysis,
			scanLength,
			requiresTableScan = true,
			resultArr,
			joinCollectionIndex,
			joinIndex,
			joinCollection = {},
			joinQuery,
			joinPath,
			joinCollectionName,
			joinCollectionInstance,
			joinMatch,
			joinMatchIndex,
			joinSearchQuery,
			joinSearchOptions,
			joinMulti,
			joinRequire,
			joinFindResults,
			joinFindResult,
			joinItem,
			joinPrefix,
			resultCollectionName,
			resultIndex,
			resultRemove = [],
			index,
			i, j, k, l,
			fieldListOn = [],
			fieldListOff = [],
			elemMatchPathSolver,
			elemMatchSubArr,
			elemMatchSpliceArr,
			matcherTmpOptions = {},
			result,
			cursor = {},
			//renameFieldMethod,
			//renameFieldPath,
			matcher = function (doc) {
				return self._match(doc, query, options, 'and', matcherTmpOptions);
			};

		op.start();
		if (query) {
			// Get query analysis to execute best optimised code path
			op.time('analyseQuery');
			analysis = this._analyseQuery(self.decouple(query), options, op);
			op.time('analyseQuery');
			op.data('analysis', analysis);

			if (analysis.hasJoin && analysis.queriesJoin) {
				// The query has a join and tries to limit by it's joined data
				// Get an instance reference to the join collections
				op.time('joinReferences');
				for (joinIndex = 0; joinIndex < analysis.joinsOn.length; joinIndex++) {
					joinCollectionName = analysis.joinsOn[joinIndex];
					joinPath = new Path(analysis.joinQueries[joinCollectionName]);
					joinQuery = joinPath.value(query)[0];
					joinCollection[analysis.joinsOn[joinIndex]] = this._db.collection(analysis.joinsOn[joinIndex]).subset(joinQuery);

					// Remove join clause from main query
					delete query[analysis.joinQueries[joinCollectionName]];
				}
				op.time('joinReferences');
			}

			// Check if an index lookup can be used to return this result
			if (analysis.indexMatch.length && (!options || (options && !options.$skipIndex))) {
				op.data('index.potential', analysis.indexMatch);
				op.data('index.used', analysis.indexMatch[0].index);

				// Get the data from the index
				op.time('indexLookup');
				resultArr = analysis.indexMatch[0].lookup || [];
				op.time('indexLookup');

				// Check if the index coverage is all keys, if not we still need to table scan it
				if (analysis.indexMatch[0].keyData.totalKeyCount === analysis.indexMatch[0].keyData.score) {
					// Don't require a table scan to find relevant documents
					requiresTableScan = false;
				}
			} else {
				op.flag('usedIndex', false);
			}

			if (requiresTableScan) {
				if (resultArr && resultArr.length) {
					scanLength = resultArr.length;
					op.time('tableScan: ' + scanLength);
					// Filter the source data and return the result
					resultArr = resultArr.filter(matcher);
				} else {
					// Filter the source data and return the result
					scanLength = this._data.length;
					op.time('tableScan: ' + scanLength);
					resultArr = this._data.filter(matcher);
				}


				op.time('tableScan: ' + scanLength);
			}

			// Order the array if we were passed a sort clause
			if (options.$orderBy) {
				op.time('sort');
				resultArr = this.sort(options.$orderBy, resultArr);
				op.time('sort');
			}

			if (options.$page !== undefined && options.$limit !== undefined) {
				// Record paging data
				cursor.page = options.$page;
				cursor.pages = Math.ceil(resultArr.length / options.$limit);
				cursor.records = resultArr.length;

				// Check if we actually need to apply the paging logic
				if (options.$page && options.$limit > 0) {
					op.data('cursor', cursor);

					// Skip to the page specified based on limit
					resultArr.splice(0, options.$page * options.$limit);
				}
			}

			if (options.$skip) {
				cursor.skip = options.$skip;

				// Skip past the number of records specified
				resultArr.splice(0, options.$skip);
				op.data('skip', options.$skip);
			}

			if (options.$limit && resultArr && resultArr.length > options.$limit) {
				cursor.limit = options.$limit;

				resultArr.length = options.$limit;
				op.data('limit', options.$limit);
			}

			if (options.$decouple) {
				// Now decouple the data from the original objects
				op.time('decouple');
				resultArr = this.decouple(resultArr);
				op.time('decouple');
				op.data('flag.decouple', true);
			}

			// Now process any joins on the final data
			if (options.$join) {
				for (joinCollectionIndex = 0; joinCollectionIndex < options.$join.length; joinCollectionIndex++) {
					for (joinCollectionName in options.$join[joinCollectionIndex]) {
						if (options.$join[joinCollectionIndex].hasOwnProperty(joinCollectionName)) {
							// Set the key to store the join result in to the collection name by default
							resultCollectionName = joinCollectionName;

							// Get the join collection instance from the DB
							if (joinCollection[joinCollectionName]) {
								joinCollectionInstance = joinCollection[joinCollectionName];
							} else {
								joinCollectionInstance = this._db.collection(joinCollectionName);
							}

							// Get the match data for the join
							joinMatch = options.$join[joinCollectionIndex][joinCollectionName];

							// Loop our result data array
							for (resultIndex = 0; resultIndex < resultArr.length; resultIndex++) {
								// Loop the join conditions and build a search object from them
								joinSearchQuery = {};
								joinMulti = false;
								joinRequire = false;
								joinPrefix = '';

								for (joinMatchIndex in joinMatch) {
									if (joinMatch.hasOwnProperty(joinMatchIndex)) {
										// Check the join condition name for a special command operator
										if (joinMatchIndex.substr(0, 1) === '$') {
											// Special command
											switch (joinMatchIndex) {
												case '$where':
													if (joinMatch[joinMatchIndex].query) {
														// Commented old code here, new one does dynamic reverse lookups
														//joinSearchQuery = joinMatch[joinMatchIndex].query;
														joinSearchQuery = self._resolveDynamicQuery(joinMatch[joinMatchIndex].query, resultArr[resultIndex]);
													}
													if (joinMatch[joinMatchIndex].options) { joinSearchOptions = joinMatch[joinMatchIndex].options; }
													break;

												case '$as':
													// Rename the collection when stored in the result document
													resultCollectionName = joinMatch[joinMatchIndex];
													break;

												case '$multi':
													// Return an array of documents instead of a single matching document
													joinMulti = joinMatch[joinMatchIndex];
													break;

												case '$require':
													// Remove the result item if no matching join data is found
													joinRequire = joinMatch[joinMatchIndex];
													break;

												case '$prefix':
													// Add a prefix to properties mixed in
													joinPrefix = joinMatch[joinMatchIndex];
													break;

												default:
	 												break;
											}
										} else {
											// Get the data to match against and store in the search object
											// Resolve complex referenced query
											joinSearchQuery[joinMatchIndex] = self._resolveDynamicQuery(joinMatch[joinMatchIndex], resultArr[resultIndex]);
										}
									}
								}

								// Do a find on the target collection against the match data
								joinFindResults = joinCollectionInstance.find(joinSearchQuery, joinSearchOptions);

								// Check if we require a joined row to allow the result item
								if (!joinRequire || (joinRequire && joinFindResults[0])) {
									// Join is not required or condition is met
									if (resultCollectionName === '$root') {
										// The property name to store the join results in is $root
										// which means we need to mixin the results but this only
										// works if joinMulti is disabled
										if (joinMulti !== false) {
											// Throw an exception here as this join is not physically possible!
											throw(this.logIdentifier() + ' Cannot combine [$as: "$root"] with [$multi: true] in $join clause!');
										}

										// Mixin the result
										joinFindResult = joinFindResults[0];
										joinItem = resultArr[resultIndex];

										for (l in joinFindResult) {
											if (joinFindResult.hasOwnProperty(l) && joinItem[joinPrefix + l] === undefined) {
												// Properties are only mixed in if they do not already exist
												// in the target item (are undefined). Using a prefix denoted via
												// $prefix is a good way to prevent property name conflicts
												joinItem[joinPrefix + l] = joinFindResult[l];
											}
										}
									} else {
										resultArr[resultIndex][resultCollectionName] = joinMulti === false ? joinFindResults[0] : joinFindResults;
									}
								} else {
									// Join required but condition not met, add item to removal queue
									resultRemove.push(resultArr[resultIndex]);
								}
							}
						}
					}
				}

				op.data('flag.join', true);
			}

			// Process removal queue
			if (resultRemove.length) {
				op.time('removalQueue');
				for (i = 0; i < resultRemove.length; i++) {
					index = resultArr.indexOf(resultRemove[i]);

					if (index > -1) {
						resultArr.splice(index, 1);
					}
				}
				op.time('removalQueue');
			}

			if (options.$transform) {
				op.time('transform');
				for (i = 0; i < resultArr.length; i++) {
					resultArr.splice(i, 1, options.$transform(resultArr[i]));
				}
				op.time('transform');
				op.data('flag.transform', true);
			}

			// Process transforms
			if (this._transformEnabled && this._transformOut) {
				op.time('transformOut');
				resultArr = this.transformOut(resultArr);
				op.time('transformOut');
			}

			op.data('results', resultArr.length);
		} else {
			resultArr = [];
		}

		// Check for an $as operator in the options object and if it exists
		// iterate over the fields and generate a rename function that will
		// operate over the entire returned data array and rename each object's
		// fields to their new names
		// TODO: Enable $as in collection find to allow renaming fields
		/*if (options.$as) {
			renameFieldPath = new Path();
			renameFieldMethod = function (obj, oldFieldPath, newFieldName) {
				renameFieldPath.path(oldFieldPath);
				renameFieldPath.rename(newFieldName);
			};

			for (i in options.$as) {
				if (options.$as.hasOwnProperty(i)) {

				}
			}
		}*/

		// Generate a list of fields to limit data by
		// Each property starts off being enabled by default (= 1) then
		// if any property is explicitly specified as 1 then all switch to
		// zero except _id.
		//
		// Any that are explicitly set to zero are switched off.
		op.time('scanFields');
		for (i in options) {
			if (options.hasOwnProperty(i) && i.indexOf('$') !== 0) {
				if (options[i] === 1) {
					fieldListOn.push(i);
				} else if (options[i] === 0) {
					fieldListOff.push(i);
				}
			}
		}
		op.time('scanFields');

		// Limit returned fields by the options data
		if (fieldListOn.length || fieldListOff.length) {
			op.data('flag.limitFields', true);
			op.data('limitFields.on', fieldListOn);
			op.data('limitFields.off', fieldListOff);

			op.time('limitFields');

			// We have explicit fields switched on or off
			for (i = 0; i < resultArr.length; i++) {
				result = resultArr[i];

				for (j in result) {
					if (result.hasOwnProperty(j)) {
						if (fieldListOn.length) {
							// We have explicit fields switched on so remove all fields
							// that are not explicitly switched on

							// Check if the field name is not the primary key
							if (j !== pk) {
								if (fieldListOn.indexOf(j) === -1) {
									// This field is not in the on list, remove it
									delete result[j];
								}
							}
						}

						if (fieldListOff.length) {
							// We have explicit fields switched off so remove fields
							// that are explicitly switched off
							if (fieldListOff.indexOf(j) > -1) {
								// This field is in the off list, remove it
								delete result[j];
							}
						}
					}
				}
			}

			op.time('limitFields');
		}

		// Now run any projections on the data required
		if (options.$elemMatch) {
			op.data('flag.elemMatch', true);
			op.time('projection-elemMatch');

			for (i in options.$elemMatch) {
				if (options.$elemMatch.hasOwnProperty(i)) {
					elemMatchPathSolver = new Path(i);

					// Loop the results array
					for (j = 0; j < resultArr.length; j++) {
						elemMatchSubArr = elemMatchPathSolver.value(resultArr[j])[0];

						// Check we have a sub-array to loop
						if (elemMatchSubArr && elemMatchSubArr.length) {

							// Loop the sub-array and check for projection query matches
							for (k = 0; k < elemMatchSubArr.length; k++) {

								// Check if the current item in the sub-array matches the projection query
								if (self._match(elemMatchSubArr[k], options.$elemMatch[i], options, '', {})) {
									// The item matches the projection query so set the sub-array
									// to an array that ONLY contains the matching item and then
									// exit the loop since we only want to match the first item
									elemMatchPathSolver.set(resultArr[j], i, [elemMatchSubArr[k]]);
									break;
								}
							}
						}
					}
				}
			}

			op.time('projection-elemMatch');
		}

		if (options.$elemsMatch) {
			op.data('flag.elemsMatch', true);
			op.time('projection-elemsMatch');

			for (i in options.$elemsMatch) {
				if (options.$elemsMatch.hasOwnProperty(i)) {
					elemMatchPathSolver = new Path(i);

					// Loop the results array
					for (j = 0; j < resultArr.length; j++) {
						elemMatchSubArr = elemMatchPathSolver.value(resultArr[j])[0];

						// Check we have a sub-array to loop
						if (elemMatchSubArr && elemMatchSubArr.length) {
							elemMatchSpliceArr = [];

							// Loop the sub-array and check for projection query matches
							for (k = 0; k < elemMatchSubArr.length; k++) {

								// Check if the current item in the sub-array matches the projection query
								if (self._match(elemMatchSubArr[k], options.$elemsMatch[i], options, '', {})) {
									// The item matches the projection query so add it to the final array
									elemMatchSpliceArr.push(elemMatchSubArr[k]);
								}
							}

							// Now set the final sub-array to the matched items
							elemMatchPathSolver.set(resultArr[j], i, elemMatchSpliceArr);
						}
					}
				}
			}

			op.time('projection-elemsMatch');
		}

		op.stop();
		resultArr.__fdbOp = op;
		resultArr.$cursor = cursor;
		return resultArr;
	};

	Collection.prototype._resolveDynamicQuery = function (query, item) {
		var self = this,
			newQuery,
			propType,
			propVal,
			pathResult,
			i;

		if (typeof query === 'string') {
			// Check if the property name starts with a back-reference
			if (query.substr(0, 3) === '$$.') {
				// Fill the query with a back-referenced value
				pathResult = new Path(query.substr(3, query.length - 3)).value(item);
			} else {
				pathResult = new Path(query).value(item);
			}

			if (pathResult.length > 1) {
				return {$in: pathResult};
			} else {
				return pathResult[0];
			}
		}

		newQuery = {};

		for (i in query) {
			if (query.hasOwnProperty(i)) {
				propType = typeof query[i];
				propVal = query[i];

				switch (propType) {
					case 'string':
						// Check if the property name starts with a back-reference
						if (propVal.substr(0, 3) === '$$.') {
							// Fill the query with a back-referenced value
							newQuery[i] = new Path(propVal.substr(3, propVal.length - 3)).value(item)[0];
						} else {
							newQuery[i] = propVal;
						}
						break;

					case 'object':
						newQuery[i] = self._resolveDynamicQuery(propVal, item);
						break;

					default:
						newQuery[i] = propVal;
						break;
				}
			}
		}

		return newQuery;
	};

	/**
	 * Returns one document that satisfies the specified query criteria. If multiple
	 * documents satisfy the query, this method returns the first document to match
	 * the query.
	 * @returns {*}
	 */
	Collection.prototype.findOne = function () {
		return (this.find.apply(this, arguments))[0];
	};

	/**
	 * Gets the index in the collection data array of the first item matched by
	 * the passed query object.
	 * @param {Object} query The query to run to find the item to return the index of.
	 * @param {Object=} options An options object.
	 * @returns {Number}
	 */
	Collection.prototype.indexOf = function (query, options) {
		var item = this.find(query, {$decouple: false})[0],
			sortedData;

		if (item) {
			if (!options || options && !options.$orderBy) {
				// Basic lookup from order of insert
				return this._data.indexOf(item);
			} else {
				// Trying to locate index based on query with sort order
				options.$decouple = false;
				sortedData = this.find(query, options);

				return sortedData.indexOf(item);
			}
		}

		return -1;
	};

	/**
	 * Returns the index of the document identified by the passed item's primary key.
	 * @param {*} itemLookup The document whose primary key should be used to lookup
	 * or the id to lookup.
	 * @param {Object=} options An options object.
	 * @returns {Number} The index the item with the matching primary key is occupying.
	 */
	Collection.prototype.indexOfDocById = function (itemLookup, options) {
		var item,
			sortedData;

		if (typeof itemLookup !== 'object') {
			item = this._primaryIndex.get(itemLookup);
		} else {
			item = this._primaryIndex.get(itemLookup[this._primaryKey]);
		}

		if (item) {
			if (!options || options && !options.$orderBy) {
				// Basic lookup
				return this._data.indexOf(item);
			} else {
				// Sorted lookup
				options.$decouple = false;
				sortedData = this.find({}, options);

				return sortedData.indexOf(item);
			}
		}

		return -1;
	};

	/**
	 * Removes a document from the collection by it's index in the collection's
	 * data array.
	 * @param {Number} index The index of the document to remove.
	 * @returns {Object} The document that has been removed or false if none was
	 * removed.
	 */
	Collection.prototype.removeByIndex = function (index) {
		var doc,
			docId;

		doc = this._data[index];

		if (doc !== undefined) {
			doc = this.decouple(doc);
			docId = doc[this.primaryKey()];

			return this.removeById(docId);
		}

		return false;
	};

	/**
	 * Gets / sets the collection transform options.
	 * @param {Object} obj A collection transform options object.
	 * @returns {*}
	 */
	Collection.prototype.transform = function (obj) {
		if (obj !== undefined) {
			if (typeof obj === "object") {
				if (obj.enabled !== undefined) {
					this._transformEnabled = obj.enabled;
				}

				if (obj.dataIn !== undefined) {
					this._transformIn = obj.dataIn;
				}

				if (obj.dataOut !== undefined) {
					this._transformOut = obj.dataOut;
				}
			} else {
				this._transformEnabled = obj !== false;
			}

			return this;
		}

		return {
			enabled: this._transformEnabled,
			dataIn: this._transformIn,
			dataOut: this._transformOut
		};
	};

	/**
	 * Transforms data using the set transformIn method.
	 * @param {Object} data The data to transform.
	 * @returns {*}
	 */
	Collection.prototype.transformIn = function (data) {
		if (this._transformEnabled && this._transformIn) {
			if (data instanceof Array) {
				var finalArr = [], i;

				for (i = 0; i < data.length; i++) {
					finalArr[i] = this._transformIn(data[i]);
				}

				return finalArr;
			} else {
				return this._transformIn(data);
			}
		}

		return data;
	};

	/**
	 * Transforms data using the set transformOut method.
	 * @param {Object} data The data to transform.
	 * @returns {*}
	 */
	Collection.prototype.transformOut = function (data) {
		if (this._transformEnabled && this._transformOut) {
			if (data instanceof Array) {
				var finalArr = [], i;

				for (i = 0; i < data.length; i++) {
					finalArr[i] = this._transformOut(data[i]);
				}

				return finalArr;
			} else {
				return this._transformOut(data);
			}
		}

		return data;
	};

	/**
	 * Sorts an array of documents by the given sort path.
	 * @param {*} sortObj The keys and orders the array objects should be sorted by.
	 * @param {Array} arr The array of documents to sort.
	 * @returns {Array}
	 */
	Collection.prototype.sort = function (sortObj, arr) {
		// Make sure we have an array object
		arr = arr || [];

		var	sortArr = [],
			sortKey,
			sortSingleObj;

		for (sortKey in sortObj) {
			if (sortObj.hasOwnProperty(sortKey)) {
				sortSingleObj = {};
				sortSingleObj[sortKey] = sortObj[sortKey];
				sortSingleObj.___fdbKey = String(sortKey);
				sortArr.push(sortSingleObj);
			}
		}

		if (sortArr.length < 2) {
			// There is only one sort criteria, do a simple sort and return it
			return this._sort(sortObj, arr);
		} else {
			return this._bucketSort(sortArr, arr);
		}
	};

	/**
	 * Takes array of sort paths and sorts them into buckets before returning final
	 * array fully sorted by multi-keys.
	 * @param keyArr
	 * @param arr
	 * @returns {*}
	 * @private
	 */
	Collection.prototype._bucketSort = function (keyArr, arr) {
		var keyObj = keyArr.shift(),
			arrCopy,
			bucketData,
			bucketOrder,
			bucketKey,
			buckets,
			i,
			finalArr = [];

		if (keyArr.length > 0) {
			// Sort array by bucket key
			arr = this._sort(keyObj, arr);

			// Split items into buckets
			bucketData = this.bucket(keyObj.___fdbKey, arr);
			bucketOrder = bucketData.order;
			buckets = bucketData.buckets;

			// Loop buckets and sort contents
			for (i = 0; i < bucketOrder.length; i++) {
				bucketKey = bucketOrder[i];

				arrCopy = [].concat(keyArr);
				finalArr = finalArr.concat(this._bucketSort(arrCopy, buckets[bucketKey]));
			}

			return finalArr;
		} else {
			return this._sort(keyObj, arr);
		}
	};

	/**
	 * Sorts array by individual sort path.
	 * @param key
	 * @param arr
	 * @returns {Array|*}
	 * @private
	 */
	Collection.prototype._sort = function (key, arr) {
		var self = this,
			sorterMethod,
			pathSolver = new Path(),
			dataPath = pathSolver.parse(key, true)[0];

		pathSolver.path(dataPath.path);

		if (dataPath.value === 1) {
			// Sort ascending
			sorterMethod = function (a, b) {
				var valA = pathSolver.value(a)[0],
					valB = pathSolver.value(b)[0];

				return self.sortAsc(valA, valB);
			};
		} else if (dataPath.value === -1) {
			// Sort descending
			sorterMethod = function (a, b) {
				var valA = pathSolver.value(a)[0],
					valB = pathSolver.value(b)[0];

				return self.sortDesc(valA, valB);
			};
		} else {
			throw(this.logIdentifier() + ' $orderBy clause has invalid direction: ' + dataPath.value + ', accepted values are 1 or -1 for ascending or descending!');
		}

		return arr.sort(sorterMethod);
	};

	/**
	 * Takes an array of objects and returns a new object with the array items
	 * split into buckets by the passed key.
	 * @param {String} key The key to split the array into buckets by.
	 * @param {Array} arr An array of objects.
	 * @returns {Object}
	 */
	Collection.prototype.bucket = function (key, arr) {
		var i,
			oldField,
			field,
			fieldArr = [],
			buckets = {};

		for (i = 0; i < arr.length; i++) {
			field = String(arr[i][key]);

			if (oldField !== field) {
				fieldArr.push(field);
				oldField = field;
			}

			buckets[field] = buckets[field] || [];
			buckets[field].push(arr[i]);
		}

		return {
			buckets: buckets,
			order: fieldArr
		};
	};

	/**
	 * Internal method that takes a search query and options and returns an object
	 * containing details about the query which can be used to optimise the search.
	 *
	 * @param query
	 * @param options
	 * @param op
	 * @returns {Object}
	 * @private
	 */
	Collection.prototype._analyseQuery = function (query, options, op) {
		var analysis = {
				queriesOn: [this._name],
				indexMatch: [],
				hasJoin: false,
				queriesJoin: false,
				joinQueries: {},
				query: query,
				options: options
			},
			joinCollectionIndex,
			joinCollectionName,
			joinCollections = [],
			joinCollectionReferences = [],
			queryPath,
			index,
			indexMatchData,
			indexRef,
			indexRefName,
			indexLookup,
			pathSolver,
			queryKeyCount,
			i;

		// Check if the query is a primary key lookup
		op.time('checkIndexes');
		pathSolver = new Path();
		queryKeyCount = pathSolver.countKeys(query);

		if (queryKeyCount) {
			if (query[this._primaryKey] !== undefined) {
				// Return item via primary key possible
				op.time('checkIndexMatch: Primary Key');
				analysis.indexMatch.push({
					lookup: this._primaryIndex.lookup(query, options),
					keyData: {
						matchedKeys: [this._primaryKey],
						totalKeyCount: queryKeyCount,
						score: 1
					},
					index: this._primaryIndex
				});
				op.time('checkIndexMatch: Primary Key');
			}

			// Check if an index can speed up the query
			for (i in this._indexById) {
				if (this._indexById.hasOwnProperty(i)) {
					indexRef = this._indexById[i];
					indexRefName = indexRef.name();

					op.time('checkIndexMatch: ' + indexRefName);
					indexMatchData = indexRef.match(query, options);

					if (indexMatchData.score > 0) {
						// This index can be used, store it
						indexLookup = indexRef.lookup(query, options);

						analysis.indexMatch.push({
							lookup: indexLookup,
							keyData: indexMatchData,
							index: indexRef
						});
					}
					op.time('checkIndexMatch: ' + indexRefName);

					if (indexMatchData.score === queryKeyCount) {
						// Found an optimal index, do not check for any more
						break;
					}
				}
			}
			op.time('checkIndexes');

			// Sort array descending on index key count (effectively a measure of relevance to the query)
			if (analysis.indexMatch.length > 1) {
				op.time('findOptimalIndex');
				analysis.indexMatch.sort(function (a, b) {
					if (a.keyData.score > b.keyData.score) {
						// This index has a higher score than the other
						return -1;
					}

					if (a.keyData.score < b.keyData.score) {
						// This index has a lower score than the other
						return 1;
					}

					// The indexes have the same score but can still be compared by the number of records
					// they return from the query. The fewer records they return the better so order by
					// record count
					if (a.keyData.score === b.keyData.score) {
						return a.lookup.length - b.lookup.length;
					}
				});
				op.time('findOptimalIndex');
			}
		}

		// Check for join data
		if (options.$join) {
			analysis.hasJoin = true;

			// Loop all join operations
			for (joinCollectionIndex = 0; joinCollectionIndex < options.$join.length; joinCollectionIndex++) {
				// Loop the join collections and keep a reference to them
				for (joinCollectionName in options.$join[joinCollectionIndex]) {
					if (options.$join[joinCollectionIndex].hasOwnProperty(joinCollectionName)) {
						joinCollections.push(joinCollectionName);

						// Check if the join uses an $as operator
						if ('$as' in options.$join[joinCollectionIndex][joinCollectionName]) {
							joinCollectionReferences.push(options.$join[joinCollectionIndex][joinCollectionName].$as);
						} else {
							joinCollectionReferences.push(joinCollectionName);
						}
					}
				}
			}

			// Loop the join collection references and determine if the query references
			// any of the collections that are used in the join. If there no queries against
			// joined collections the find method can use a code path optimised for this.
			// Queries against joined collections requires the joined collections to be filtered
			// first and then joined so requires a little more work.
			for (index = 0; index < joinCollectionReferences.length; index++) {
				// Check if the query references any collection data that the join will create
				queryPath = this._queryReferencesCollection(query, joinCollectionReferences[index], '');

				if (queryPath) {
					analysis.joinQueries[joinCollections[index]] = queryPath;
					analysis.queriesJoin = true;
				}
			}

			analysis.joinsOn = joinCollections;
			analysis.queriesOn = analysis.queriesOn.concat(joinCollections);
		}

		return analysis;
	};

	/**
	 * Checks if the passed query references this collection.
	 * @param query
	 * @param collection
	 * @param path
	 * @returns {*}
	 * @private
	 */
	Collection.prototype._queryReferencesCollection = function (query, collection, path) {
		var i;

		for (i in query) {
			if (query.hasOwnProperty(i)) {
				// Check if this key is a reference match
				if (i === collection) {
					if (path) { path += '.'; }
					return path + i;
				} else {
					if (typeof(query[i]) === 'object') {
						// Recurse
						if (path) { path += '.'; }
						path += i;
						return this._queryReferencesCollection(query[i], collection, path);
					}
				}
			}
		}

		return false;
	};

	/**
	 * Returns the number of documents currently in the collection.
	 * @returns {Number}
	 */
	Collection.prototype.count = function (query, options) {
		if (!query) {
			return this._data.length;
		} else {
			// Run query and return count
			return this.find(query, options).length;
		}
	};

	/**
	 * Finds sub-documents from the collection's documents.
	 * @param {Object} match The query object to use when matching parent documents
	 * from which the sub-documents are queried.
	 * @param {String} path The path string used to identify the key in which
	 * sub-documents are stored in parent documents.
	 * @param {Object=} subDocQuery The query to use when matching which sub-documents
	 * to return.
	 * @param {Object=} subDocOptions The options object to use when querying for
	 * sub-documents.
	 * @returns {*}
	 */
	Collection.prototype.findSub = function (match, path, subDocQuery, subDocOptions) {
		var pathHandler = new Path(path),
			docArr = this.find(match),
			docCount = docArr.length,
			docIndex,
			subDocArr,
			subDocCollection = this._db.collection('__FDB_temp_' + this.objectId()),
			subDocResults,
			resultObj = {
				parents: docCount,
				subDocTotal: 0,
				subDocs: [],
				pathFound: false,
				err: ''
			};

		subDocOptions = subDocOptions || {};

		for (docIndex = 0; docIndex < docCount; docIndex++) {
			subDocArr = pathHandler.value(docArr[docIndex])[0];
			if (subDocArr) {
				subDocCollection.setData(subDocArr);
				subDocResults = subDocCollection.find(subDocQuery, subDocOptions);
				if (subDocOptions.returnFirst && subDocResults.length) {
					return subDocResults[0];
				}

				if (subDocOptions.$split) {
					resultObj.subDocs.push(subDocResults);
				} else {
					resultObj.subDocs = resultObj.subDocs.concat(subDocResults);
				}

				resultObj.subDocTotal += subDocResults.length;
				resultObj.pathFound = true;
			}
		}

		// Drop the sub-document collection
		subDocCollection.drop();

		// Check if the call should not return stats, if so return only subDocs array
		if (subDocOptions.$stats) {
			return resultObj;
		} else {
			return resultObj.subDocs;
		}

		if (!resultObj.pathFound) {
			resultObj.err = 'No objects found in the parent documents with a matching path of: ' + path;
		}

		return resultObj;
	};

	/**
	 * Finds the first sub-document from the collection's documents that matches
	 * the subDocQuery parameter.
	 * @param {Object} match The query object to use when matching parent documents
	 * from which the sub-documents are queried.
	 * @param {String} path The path string used to identify the key in which
	 * sub-documents are stored in parent documents.
	 * @param {Object=} subDocQuery The query to use when matching which sub-documents
	 * to return.
	 * @param {Object=} subDocOptions The options object to use when querying for
	 * sub-documents.
	 * @returns {Object}
	 */
	Collection.prototype.findSubOne = function (match, path, subDocQuery, subDocOptions) {
		return this.findSub(match, path, subDocQuery, subDocOptions)[0];
	};

	/**
	 * Checks that the passed document will not violate any index rules if
	 * inserted into the collection.
	 * @param {Object} doc The document to check indexes against.
	 * @returns {Boolean} Either false (no violation occurred) or true if
	 * a violation was detected.
	 */
	Collection.prototype.insertIndexViolation = function (doc) {
		var indexViolated,
			arr = this._indexByName,
			arrIndex,
			arrItem;

		// Check the item's primary key is not already in use
		if (this._primaryIndex.get(doc[this._primaryKey])) {
			indexViolated = this._primaryIndex;
		} else {
			// Check violations of other indexes
			for (arrIndex in arr) {
				if (arr.hasOwnProperty(arrIndex)) {
					arrItem = arr[arrIndex];

					if (arrItem.unique()) {
						if (arrItem.violation(doc)) {
							indexViolated = arrItem;
							break;
						}
					}
				}
			}
		}

		return indexViolated ? indexViolated.name() : false;
	};

	/**
	 * Creates an index on the specified keys.
	 * @param {Object} keys The object containing keys to index.
	 * @param {Object} options An options object.
	 * @returns {*}
	 */
	Collection.prototype.ensureIndex = function (keys, options) {
		if (this.isDropped()) {
			throw(this.logIdentifier() + ' Cannot operate in a dropped state!');
		}

		this._indexByName = this._indexByName || {};
		this._indexById = this._indexById || {};

		var index,
			time = {
				start: new Date().getTime()
			};

		if (options) {
			switch (options.type) {
				case 'hashed':
					index = new IndexHashMap(keys, options, this);
					break;

				case 'btree':
					index = new IndexBinaryTree(keys, options, this);
					break;

				default:
					// Default
					index = new IndexHashMap(keys, options, this);
					break;
			}
		} else {
			// Default
			index = new IndexHashMap(keys, options, this);
		}

		// Check the index does not already exist
		if (this._indexByName[index.name()]) {
			// Index already exists
			return {
				err: 'Index with that name already exists'
			};
		}

		if (this._indexById[index.id()]) {
			// Index already exists
			return {
				err: 'Index with those keys already exists'
			};
		}

		// Create the index
		index.rebuild();

		// Add the index
		this._indexByName[index.name()] = index;
		this._indexById[index.id()] = index;

		time.end = new Date().getTime();
		time.total = time.end - time.start;

		this._lastOp = {
			type: 'ensureIndex',
			stats: {
				time: time
			}
		};

		return {
			index: index,
			id: index.id(),
			name: index.name(),
			state: index.state()
		};
	};

	/**
	 * Gets an index by it's name.
	 * @param {String} name The name of the index to retreive.
	 * @returns {*}
	 */
	Collection.prototype.index = function (name) {
		if (this._indexByName) {
			return this._indexByName[name];
		}
	};

	/**
	 * Gets the last reporting operation's details such as run time.
	 * @returns {Object}
	 */
	Collection.prototype.lastOp = function () {
		return this._metrics.list();
	};

	/**
	 * Generates a difference object that contains insert, update and remove arrays
	 * representing the operations to execute to make this collection have the same
	 * data as the one passed.
	 * @param {Collection} collection The collection to diff against.
	 * @returns {{}}
	 */
	Collection.prototype.diff = function (collection) {
		var diff = {
			insert: [],
			update: [],
			remove: []
		};

		var pm = this.primaryKey(),
			arr,
			arrIndex,
			arrItem,
			arrCount;

		// Check if the primary key index of each collection can be utilised
		if (pm !== collection.primaryKey()) {
			throw(this.logIdentifier() + ' Diffing requires that both collections have the same primary key!');
		}

		// Use the collection primary key index to do the diff (super-fast)
		arr = collection._data;

		// Check if we have an array or another collection
		while (arr && !(arr instanceof Array)) {
			// We don't have an array, assign collection and get data
			collection = arr;
			arr = collection._data;
		}

		arrCount = arr.length;

		// Loop the collection's data array and check for matching items
		for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
			arrItem = arr[arrIndex];

			// Check for a matching item in this collection
			if (this._primaryIndex.get(arrItem[pm])) {
				// Matching item exists, check if the data is the same
				if (this._primaryCrc.get(arrItem[pm]) !== collection._primaryCrc.get(arrItem[pm])) {
					// The documents exist in both collections but data differs, update required
					diff.update.push(arrItem);
				}
			} else {
				// The document is missing from this collection, insert required
				diff.insert.push(arrItem);
			}
		}

		// Now loop this collection's data and check for matching items
		arr = this._data;
		arrCount = arr.length;

		for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
			arrItem = arr[arrIndex];

			if (!collection._primaryIndex.get(arrItem[pm])) {
				// The document does not exist in the other collection, remove required
				diff.remove.push(arrItem);
			}
		}

		return diff;
	};

	Collection.prototype.collateAdd = new Overload({
		/**
		 * Adds a data source to collate data from and specifies the
		 * key name to collate data to.
		 * @func collateAdd
		 * @memberof Collection
		 * @param {Collection} collection The collection to collate data from.
		 * @param {String=} keyName Optional name of the key to collate data to.
		 * If none is provided the record CRUD is operated on the root collection
		 * data.
		 */
		'object, string': function (collection, keyName) {
			var self = this;

			self.collateAdd(collection, function (packet) {
				var obj1,
					obj2;

				switch (packet.type) {
					case 'insert':
						if (keyName) {
							obj1 = {
								$push: {}
							};

							obj1.$push[keyName] = self.decouple(packet.data);
							self.update({}, obj1);
						} else {
							self.insert(packet.data);
						}
						break;

					case 'update':
						if (keyName) {
							obj1 = {};
							obj2 = {};

							obj1[keyName] = packet.data.query;
							obj2[keyName + '.$'] = packet.data.update;

							self.update(obj1, obj2);
						} else {
							self.update(packet.data.query, packet.data.update);
						}
						break;

					case 'remove':
						if (keyName) {
							obj1 = {
								$pull: {}
							};

							obj1.$pull[keyName] = {};
							obj1.$pull[keyName][self.primaryKey()] = packet.data.dataSet[0][collection.primaryKey()];

							self.update({}, obj1);
						} else {
							self.remove(packet.data);
						}
						break;

					default:
				}
			});
		},

		/**
		 * Adds a data source to collate data from and specifies a process
		 * method that will handle the collation functionality (for custom
		 * collation).
		 * @func collateAdd
		 * @memberof Collection
		 * @param {Collection} collection The collection to collate data from.
		 * @param {Function} process The process method.
		 */
		'object, function': function (collection, process) {
			if (typeof collection === 'string') {
				// The collection passed is a name, not a reference so get
				// the reference from the name
				collection = this._db.collection(collection, {
					autoCreate: false,
					throwError: false
				});
			}

			if (collection) {
				this._collate = this._collate || {};
				this._collate[collection.name()] = new ReactorIO(collection, this, process);

				return this;
			} else {
				throw('Cannot collate from a non-existent collection!');
			}
		}
	});

	Collection.prototype.collateRemove = function (collection) {
		if (typeof collection === 'object') {
			// We need to have the name of the collection to remove it
			collection = collection.name();
		}

		if (collection) {
			// Drop the reactor IO chain node
			this._collate[collection].drop();

			// Remove the collection data from the collate object
			delete this._collate[collection];

			return this;
		} else {
			throw('No collection name passed to collateRemove() or collection not found!');
		}
	};

	Db.prototype.collection = new Overload({
		/**
		 * Get a collection with no name (generates a random name). If the
		 * collection does not already exist then one is created for that
		 * name automatically.
		 * @func collection
		 * @memberof Db
		 * @param {String} collectionName The name of the collection.
		 * @returns {Collection}
		 */
		'': function () {
			return this.$main.call(this, {
				name: this.objectId()
			});
		},

		/**
		 * Get a collection by name. If the collection does not already exist
		 * then one is created for that name automatically.
		 * @func collection
		 * @memberof Db
		 * @param {Object} data An options object or a collection instance.
		 * @returns {Collection}
		 */
		'object': function (data) {
			// Handle being passed an instance
			if (data instanceof Collection) {
				if (data.state() !== 'droppped') {
					return data;
				} else {
					return this.$main.call(this, {
						name: data.name()
					});
				}
			}

			return this.$main.call(this, data);
		},

		/**
		 * Get a collection by name. If the collection does not already exist
		 * then one is created for that name automatically.
		 * @func collection
		 * @memberof Db
		 * @param {String} collectionName The name of the collection.
		 * @returns {Collection}
		 */
		'string': function (collectionName) {
			return this.$main.call(this, {
				name: collectionName
			});
		},

		/**
		 * Get a collection by name. If the collection does not already exist
		 * then one is created for that name automatically.
		 * @func collection
		 * @memberof Db
		 * @param {String} collectionName The name of the collection.
		 * @param {String} primaryKey Optional primary key to specify the primary key field on the collection
		 * objects. Defaults to "_id".
		 * @returns {Collection}
		 */
		'string, string': function (collectionName, primaryKey) {
			return this.$main.call(this, {
				name: collectionName,
				primaryKey: primaryKey
			});
		},

		/**
		 * Get a collection by name. If the collection does not already exist
		 * then one is created for that name automatically.
		 * @func collection
		 * @memberof Db
		 * @param {String} collectionName The name of the collection.
		 * @param {Object} options An options object.
		 * @returns {Collection}
		 */
		'string, object': function (collectionName, options) {
			options.name = collectionName;

			return this.$main.call(this, options);
		},

		/**
		 * Get a collection by name. If the collection does not already exist
		 * then one is created for that name automatically.
		 * @func collection
		 * @memberof Db
		 * @param {String} collectionName The name of the collection.
		 * @param {String} primaryKey Optional primary key to specify the primary key field on the collection
		 * objects. Defaults to "_id".
		 * @param {Object} options An options object.
		 * @returns {Collection}
		 */
		'string, string, object': function (collectionName, primaryKey, options) {
			options.name = collectionName;
			options.primaryKey = primaryKey;

			return this.$main.call(this, options);
		},

		/**
		 * The main handler method. This gets called by all the other variants and
		 * handles the actual logic of the overloaded method.
		 * @func collection
		 * @memberof Db
		 * @param {Object} options An options object.
		 * @returns {*}
		 */
		'$main': function (options) {
			var name = options.name;

			if (name) {
				if (!this._collection[name]) {
					if (options && options.autoCreate === false) {
						if (options && options.throwError !== false) {
							throw(this.logIdentifier() + ' Cannot get collection ' + name + ' because it does not exist and auto-create has been disabled!');
						}
					}

					if (this.debug()) {
						console.log(this.logIdentifier() + ' Creating collection ' + name);
					}
				}

				this._collection[name] = this._collection[name] || new Collection(name, options).db(this);
				this._collection[name].mongoEmulation(this.mongoEmulation());

				if (options.primaryKey !== undefined) {
					this._collection[name].primaryKey(options.primaryKey);
				}

				if (options.capped !== undefined) {
					// Check we have a size
					if (options.size !== undefined) {
						this._collection[name].capped(options.capped);
						this._collection[name].cappedSize(options.size);
					} else {
						throw(this.logIdentifier() + ' Cannot create a capped collection without specifying a size!');
					}
				}

				return this._collection[name];
			} else {
				if (!options || (options && options.throwError !== false)) {
					throw(this.logIdentifier() + ' Cannot get collection with undefined name!');
				}
			}
		}
	});

	/**
	 * Determine if a collection with the passed name already exists.
	 * @memberof Db
	 * @param {String} viewName The name of the collection to check for.
	 * @returns {boolean}
	 */
	Db.prototype.collectionExists = function (viewName) {
		return Boolean(this._collection[viewName]);
	};

	/**
	 * Returns an array of collections the DB currently has.
	 * @memberof Db
	 * @param {String|RegExp=} search The optional search string or regular expression to use
	 * to match collection names against.
	 * @returns {Array} An array of objects containing details of each collection
	 * the database is currently managing.
	 */
	Db.prototype.collections = function (search) {
		var arr = [],
			collections = this._collection,
			collection,
			i;

		if (search) {
			if (!(search instanceof RegExp)) {
				// Turn the search into a regular expression
				search = new RegExp(search);
			}
		}

		for (i in collections) {
			if (collections.hasOwnProperty(i)) {
				collection = collections[i];

				if (search) {
					if (search.exec(i)) {
						arr.push({
							name: i,
							count: collection.count(),
							linked: collection.isLinked !== undefined ? collection.isLinked() : false
						});
					}
				} else {
					arr.push({
						name: i,
						count: collection.count(),
						linked: collection.isLinked !== undefined ? collection.isLinked() : false
					});
				}
			}
		}

		arr.sort(function (a, b) {
			return a.name.localeCompare(b.name);
		});

		return arr;
	};

	Shared.finishModule('Collection');
	module.exports = Collection;

/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Allows a method to accept overloaded calls with different parameters controlling
	 * which passed overload function is called.
	 * @param {Object} def
	 * @returns {Function}
	 * @constructor
	 */
	var Overload = function (def) {
		if (def) {
			var self = this,
				index,
				count,
				tmpDef,
				defNewKey,
				sigIndex,
				signatures;

			if (!(def instanceof Array)) {
				tmpDef = {};

				// Def is an object, make sure all prop names are devoid of spaces
				for (index in def) {
					if (def.hasOwnProperty(index)) {
						defNewKey = index.replace(/ /g, '');

						// Check if the definition array has a * string in it
						if (defNewKey.indexOf('*') === -1) {
							// No * found
							tmpDef[defNewKey] = def[index];
						} else {
							// A * was found, generate the different signatures that this
							// definition could represent
							signatures = this.generateSignaturePermutations(defNewKey);

							for (sigIndex = 0; sigIndex < signatures.length; sigIndex++) {
								if (!tmpDef[signatures[sigIndex]]) {
									tmpDef[signatures[sigIndex]] = def[index];
								}
							}
						}
					}
				}

				def = tmpDef;
			}

			return function () {
				var arr = [],
					lookup,
					type,
					name;

				// Check if we are being passed a key/function object or an array of functions
				if (def instanceof Array) {
					// We were passed an array of functions
					count = def.length;
					for (index = 0; index < count; index++) {
						if (def[index].length === arguments.length) {
							return self.callExtend(this, '$main', def, def[index], arguments);
						}
					}
				} else {
					// Generate lookup key from arguments
					// Copy arguments to an array
					for (index = 0; index < arguments.length; index++) {
						type = typeof arguments[index];

						// Handle detecting arrays
						if (type === 'object' && arguments[index] instanceof Array) {
							type = 'array';
						}

						// Handle been presented with a single undefined argument
						if (arguments.length === 1 && type === 'undefined') {
							break;
						}

						// Add the type to the argument types array
						arr.push(type);
					}

					lookup = arr.join(',');

					// Check for an exact lookup match
					if (def[lookup]) {
						return self.callExtend(this, '$main', def, def[lookup], arguments);
					} else {
						for (index = arr.length; index >= 0; index--) {
							// Get the closest match
							lookup = arr.slice(0, index).join(',');

							if (def[lookup + ',...']) {
								// Matched against arguments + "any other"
								return self.callExtend(this, '$main', def, def[lookup + ',...'], arguments);
							}
						}
					}
				}

				name = typeof this.name === 'function' ? this.name() : 'Unknown';
				console.log('Overload: ', def);
				throw('ForerunnerDB.Overload "' + name + '": Overloaded method does not have a matching signature for the passed arguments: ' + this.jStringify(arr));
			};
		}

		return function () {};
	};

	/**
	 * Generates an array of all the different definition signatures that can be
	 * created from the passed string with a catch-all wildcard *. E.g. it will
	 * convert the signature: string,*,string to all potentials:
	 * string,string,string
	 * string,number,string
	 * string,object,string,
	 * string,function,string,
	 * string,undefined,string
	 *
	 * @param {String} str Signature string with a wildcard in it.
	 * @returns {Array} An array of signature strings that are generated.
	 */
	Overload.prototype.generateSignaturePermutations = function (str) {
		var signatures = [],
			newSignature,
			types = ['string', 'object', 'number', 'function', 'undefined'],
			index;

		if (str.indexOf('*') > -1) {
			// There is at least one "any" type, break out into multiple keys
			// We could do this at query time with regular expressions but
			// would be significantly slower
			for (index = 0; index < types.length; index++) {
				newSignature = str.replace('*', types[index]);
				signatures = signatures.concat(this.generateSignaturePermutations(newSignature));
			}
		} else {
			signatures.push(str);
		}

		return signatures;
	};

	Overload.prototype.callExtend = function (context, prop, propContext, func, args) {
		var tmp,
			ret;

		if (context && propContext[prop]) {
			tmp = context[prop];

			context[prop] = propContext[prop];
			ret = func.apply(context, args);
			context[prop] = tmp;

			return ret;
		} else {
			return func.apply(context, args);
		}
	};

	module.exports = Overload;

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';


	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');


	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	};


	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};


	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i=0; i<len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function(chunks) {
	    var i, l, len, pos, chunk, result;

	    // calculate data length
	    len = 0;
	    for (i=0, l=chunks.length; i<l; i++) {
	      len += chunks[i].length;
	    }

	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i=0, l=chunks.length; i<l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }

	    return result;
	  }
	};

	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i=0; i<len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function(chunks) {
	    return [].concat.apply([], chunks);
	  }
	};


	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};

	exports.setTyped(TYPED_OK);


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */

	/**
	 * Promises/A+ and when() implementation
	 * when is part of the cujoJS family of libraries (http://cujojs.com/)
	 * @author Brian Cavalier
	 * @author John Hann
	 */
	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

		var timed = __webpack_require__(132);
		var array = __webpack_require__(126);
		var flow = __webpack_require__(127);
		var fold = __webpack_require__(128);
		var inspect = __webpack_require__(129);
		var generate = __webpack_require__(130);
		var progress = __webpack_require__(131);
		var withThis = __webpack_require__(134);
		var unhandledRejection = __webpack_require__(133);
		var TimeoutError = __webpack_require__(42);

		var Promise = [array, flow, fold, generate, progress,
			inspect, withThis, timed, unhandledRejection]
			.reduce(function(Promise, feature) {
				return feature(Promise);
			}, __webpack_require__(124));

		var apply = __webpack_require__(43)(Promise);

		// Public API

		when.promise     = promise;              // Create a pending promise
		when.resolve     = Promise.resolve;      // Create a resolved promise
		when.reject      = Promise.reject;       // Create a rejected promise

		when.lift        = lift;                 // lift a function to return promises
		when['try']      = attempt;              // call a function and return a promise
		when.attempt     = attempt;              // alias for when.try

		when.iterate     = Promise.iterate;      // DEPRECATED (use cujojs/most streams) Generate a stream of promises
		when.unfold      = Promise.unfold;       // DEPRECATED (use cujojs/most streams) Generate a stream of promises

		when.join        = join;                 // Join 2 or more promises

		when.all         = all;                  // Resolve a list of promises
		when.settle      = settle;               // Settle a list of promises

		when.any         = lift(Promise.any);    // One-winner race
		when.some        = lift(Promise.some);   // Multi-winner race
		when.race        = lift(Promise.race);   // First-to-settle race

		when.map         = map;                  // Array.map() for promises
		when.filter      = filter;               // Array.filter() for promises
		when.reduce      = lift(Promise.reduce);       // Array.reduce() for promises
		when.reduceRight = lift(Promise.reduceRight);  // Array.reduceRight() for promises

		when.isPromiseLike = isPromiseLike;      // Is something promise-like, aka thenable

		when.Promise     = Promise;              // Promise constructor
		when.defer       = defer;                // Create a {promise, resolve, reject} tuple

		// Error types

		when.TimeoutError = TimeoutError;

		/**
		 * Get a trusted promise for x, or by transforming x with onFulfilled
		 *
		 * @param {*} x
		 * @param {function?} onFulfilled callback to be called when x is
		 *   successfully fulfilled.  If promiseOrValue is an immediate value, callback
		 *   will be invoked immediately.
		 * @param {function?} onRejected callback to be called when x is
		 *   rejected.
		 * @param {function?} onProgress callback to be called when progress updates
		 *   are issued for x. @deprecated
		 * @returns {Promise} a new promise that will fulfill with the return
		 *   value of callback or errback or the completion value of promiseOrValue if
		 *   callback and/or errback is not supplied.
		 */
		function when(x, onFulfilled, onRejected, onProgress) {
			var p = Promise.resolve(x);
			if (arguments.length < 2) {
				return p;
			}

			return p.then(onFulfilled, onRejected, onProgress);
		}

		/**
		 * Creates a new promise whose fate is determined by resolver.
		 * @param {function} resolver function(resolve, reject, notify)
		 * @returns {Promise} promise whose fate is determine by resolver
		 */
		function promise(resolver) {
			return new Promise(resolver);
		}

		/**
		 * Lift the supplied function, creating a version of f that returns
		 * promises, and accepts promises as arguments.
		 * @param {function} f
		 * @returns {Function} version of f that returns promises
		 */
		function lift(f) {
			return function() {
				for(var i=0, l=arguments.length, a=new Array(l); i<l; ++i) {
					a[i] = arguments[i];
				}
				return apply(f, this, a);
			};
		}

		/**
		 * Call f in a future turn, with the supplied args, and return a promise
		 * for the result.
		 * @param {function} f
		 * @returns {Promise}
		 */
		function attempt(f /*, args... */) {
			/*jshint validthis:true */
			for(var i=0, l=arguments.length-1, a=new Array(l); i<l; ++i) {
				a[i] = arguments[i+1];
			}
			return apply(f, this, a);
		}

		/**
		 * Creates a {promise, resolver} pair, either or both of which
		 * may be given out safely to consumers.
		 * @return {{promise: Promise, resolve: function, reject: function, notify: function}}
		 */
		function defer() {
			return new Deferred();
		}

		function Deferred() {
			var p = Promise._defer();

			function resolve(x) { p._handler.resolve(x); }
			function reject(x) { p._handler.reject(x); }
			function notify(x) { p._handler.notify(x); }

			this.promise = p;
			this.resolve = resolve;
			this.reject = reject;
			this.notify = notify;
			this.resolver = { resolve: resolve, reject: reject, notify: notify };
		}

		/**
		 * Determines if x is promise-like, i.e. a thenable object
		 * NOTE: Will return true for *any thenable object*, and isn't truly
		 * safe, since it may attempt to access the `then` property of x (i.e.
		 *  clever/malicious getters may do weird things)
		 * @param {*} x anything
		 * @returns {boolean} true if x is promise-like
		 */
		function isPromiseLike(x) {
			return x && typeof x.then === 'function';
		}

		/**
		 * Return a promise that will resolve only once all the supplied arguments
		 * have resolved. The resolution value of the returned promise will be an array
		 * containing the resolution values of each of the arguments.
		 * @param {...*} arguments may be a mix of promises and values
		 * @returns {Promise}
		 */
		function join(/* ...promises */) {
			return Promise.all(arguments);
		}

		/**
		 * Return a promise that will fulfill once all input promises have
		 * fulfilled, or reject when any one input promise rejects.
		 * @param {array|Promise} promises array (or promise for an array) of promises
		 * @returns {Promise}
		 */
		function all(promises) {
			return when(promises, Promise.all);
		}

		/**
		 * Return a promise that will always fulfill with an array containing
		 * the outcome states of all input promises.  The returned promise
		 * will only reject if `promises` itself is a rejected promise.
		 * @param {array|Promise} promises array (or promise for an array) of promises
		 * @returns {Promise} promise for array of settled state descriptors
		 */
		function settle(promises) {
			return when(promises, Promise.settle);
		}

		/**
		 * Promise-aware array map function, similar to `Array.prototype.map()`,
		 * but input array may contain promises or values.
		 * @param {Array|Promise} promises array of anything, may contain promises and values
		 * @param {function(x:*, index:Number):*} mapFunc map function which may
		 *  return a promise or value
		 * @returns {Promise} promise that will fulfill with an array of mapped values
		 *  or reject if any input promise rejects.
		 */
		function map(promises, mapFunc) {
			return when(promises, function(promises) {
				return Promise.map(promises, mapFunc);
			});
		}

		/**
		 * Filter the provided array of promises using the provided predicate.  Input may
		 * contain promises and values
		 * @param {Array|Promise} promises array of promises and values
		 * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
		 *  Must return truthy (or promise for truthy) for items to retain.
		 * @returns {Promise} promise that will fulfill with an array containing all items
		 *  for which predicate returned truthy.
		 */
		function filter(promises, predicate) {
			return when(promises, function(promises) {
				return Promise.filter(promises, predicate);
			});
		}

		return when;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(1));


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * Base64 encoding strategy.
		     */
		    var Base64 = C_enc.Base64 = {
		        /**
		         * Converts a word array to a Base64 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Base64 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;
		            var map = this._map;

		            // Clamp excess bits
		            wordArray.clamp();

		            // Convert
		            var base64Chars = [];
		            for (var i = 0; i < sigBytes; i += 3) {
		                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
		                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
		                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

		                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

		                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
		                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
		                }
		            }

		            // Add padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                while (base64Chars.length % 4) {
		                    base64Chars.push(paddingChar);
		                }
		            }

		            return base64Chars.join('');
		        },

		        /**
		         * Converts a Base64 string to a word array.
		         *
		         * @param {string} base64Str The Base64 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
		         */
		        parse: function (base64Str) {
		            // Shortcuts
		            var base64StrLength = base64Str.length;
		            var map = this._map;

		            // Ignore padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                var paddingIndex = base64Str.indexOf(paddingChar);
		                if (paddingIndex != -1) {
		                    base64StrLength = paddingIndex;
		                }
		            }

		            // Convert
		            var words = [];
		            var nBytes = 0;
		            for (var i = 0; i < base64StrLength; i++) {
		                if (i % 4) {
		                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);
		                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);
		                    var bitsCombined = bits1 | bits2;
		                    words[nBytes >>> 2] |= (bitsCombined) << (24 - (nBytes % 4) * 8);
		                    nBytes++;
		                }
		            }

		            return WordArray.create(words, nBytes);
		        },

		        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
		    };
		}());


		return CryptoJS.enc.Base64;

	}));

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(19), __webpack_require__(18));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha1", "./hmac"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var MD5 = C_algo.MD5;

		    /**
		     * This key derivation function is meant to conform with EVP_BytesToKey.
		     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
		     */
		    var EvpKDF = C_algo.EvpKDF = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */
		        cfg: Base.extend({
		            keySize: 128/32,
		            hasher: MD5,
		            iterations: 1
		        }),

		        /**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.EvpKDF.create();
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
		         */
		        init: function (cfg) {
		            this.cfg = this.cfg.extend(cfg);
		        },

		        /**
		         * Derives a key from a password.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */
		        compute: function (password, salt) {
		            // Shortcut
		            var cfg = this.cfg;

		            // Init hasher
		            var hasher = cfg.hasher.create();

		            // Initial values
		            var derivedKey = WordArray.create();

		            // Shortcuts
		            var derivedKeyWords = derivedKey.words;
		            var keySize = cfg.keySize;
		            var iterations = cfg.iterations;

		            // Generate key
		            while (derivedKeyWords.length < keySize) {
		                if (block) {
		                    hasher.update(block);
		                }
		                var block = hasher.update(password).finalize(salt);
		                hasher.reset();

		                // Iterations
		                for (var i = 1; i < iterations; i++) {
		                    block = hasher.finalize(block);
		                    hasher.reset();
		                }

		                derivedKey.concat(block);
		            }
		            derivedKey.sigBytes = keySize * 4;

		            return derivedKey;
		        }
		    });

		    /**
		     * Derives a key from a password.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.EvpKDF(password, salt);
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.EvpKDF = function (password, salt, cfg) {
		        return EvpKDF.create(cfg).compute(password, salt);
		    };
		}());


		return CryptoJS.EvpKDF;

	}));

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var T = [];

		    // Compute constants
		    (function () {
		        for (var i = 0; i < 64; i++) {
		            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
		        }
		    }());

		    /**
		     * MD5 hash algorithm.
		     */
		    var MD5 = C_algo.MD5 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }

		            // Shortcuts
		            var H = this._hash.words;

		            var M_offset_0  = M[offset + 0];
		            var M_offset_1  = M[offset + 1];
		            var M_offset_2  = M[offset + 2];
		            var M_offset_3  = M[offset + 3];
		            var M_offset_4  = M[offset + 4];
		            var M_offset_5  = M[offset + 5];
		            var M_offset_6  = M[offset + 6];
		            var M_offset_7  = M[offset + 7];
		            var M_offset_8  = M[offset + 8];
		            var M_offset_9  = M[offset + 9];
		            var M_offset_10 = M[offset + 10];
		            var M_offset_11 = M[offset + 11];
		            var M_offset_12 = M[offset + 12];
		            var M_offset_13 = M[offset + 13];
		            var M_offset_14 = M[offset + 14];
		            var M_offset_15 = M[offset + 15];

		            // Working varialbes
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];

		            // Computation
		            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
		            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
		            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
		            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
		            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
		            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
		            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
		            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
		            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
		            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
		            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
		            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
		            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
		            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
		            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
		            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

		            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
		            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
		            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
		            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
		            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
		            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
		            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
		            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
		            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
		            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
		            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
		            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
		            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
		            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
		            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
		            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

		            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
		            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
		            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
		            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
		            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
		            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
		            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
		            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
		            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
		            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
		            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
		            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
		            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
		            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
		            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
		            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

		            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
		            d = II(d, a, b, c, M_offset_7,  10, T[49]);
		            c = II(c, d, a, b, M_offset_14, 15, T[50]);
		            b = II(b, c, d, a, M_offset_5,  21, T[51]);
		            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
		            d = II(d, a, b, c, M_offset_3,  10, T[53]);
		            c = II(c, d, a, b, M_offset_10, 15, T[54]);
		            b = II(b, c, d, a, M_offset_1,  21, T[55]);
		            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
		            d = II(d, a, b, c, M_offset_15, 10, T[57]);
		            c = II(c, d, a, b, M_offset_6,  15, T[58]);
		            b = II(b, c, d, a, M_offset_13, 21, T[59]);
		            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
		            d = II(d, a, b, c, M_offset_11, 10, T[61]);
		            c = II(c, d, a, b, M_offset_2,  15, T[62]);
		            b = II(b, c, d, a, M_offset_9,  21, T[63]);

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

		            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
		            var nBitsTotalL = nBitsTotal;
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
		                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
		            );
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
		            );

		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                // Shortcut
		                var H_i = H[i];

		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    function FF(a, b, c, d, x, s, t) {
		        var n = a + ((b & c) | (~b & d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function GG(a, b, c, d, x, s, t) {
		        var n = a + ((b & d) | (c & ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function HH(a, b, c, d, x, s, t) {
		        var n = a + (b ^ c ^ d) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function II(a, b, c, d, x, s, t) {
		        var n = a + (c ^ (b | ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.MD5('message');
		     *     var hash = CryptoJS.MD5(wordArray);
		     */
		    C.MD5 = Hasher._createHelper(MD5);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacMD5(message, key);
		     */
		    C.HmacMD5 = Hasher._createHmacHelper(MD5);
		}(Math));


		return CryptoJS.MD5;

	}));

/***/ },
/* 12 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// Import external names locally
	var Shared,
		Db,
		DbInit,
		Collection;

	Shared = __webpack_require__(3);

	/**
	 * Creates a new collection group. Collection groups allow single operations to be
	 * propagated to multiple collections at once. CRUD operations against a collection
	 * group are in fed to the group's collections. Useful when separating out slightly
	 * different data into multiple collections but querying as one collection.
	 * @constructor
	 */
	var CollectionGroup = function () {
		this.init.apply(this, arguments);
	};

	CollectionGroup.prototype.init = function (name) {
		var self = this;

		self._name = name;
		self._data = new Collection('__FDB__cg_data_' + self._name);
		self._collections = [];
		self._view = [];
	};

	Shared.addModule('CollectionGroup', CollectionGroup);
	Shared.mixin(CollectionGroup.prototype, 'Mixin.Common');
	Shared.mixin(CollectionGroup.prototype, 'Mixin.ChainReactor');
	Shared.mixin(CollectionGroup.prototype, 'Mixin.Constants');
	Shared.mixin(CollectionGroup.prototype, 'Mixin.Triggers');
	Shared.mixin(CollectionGroup.prototype, 'Mixin.Tags');

	Collection = __webpack_require__(5);
	Db = Shared.modules.Db;
	DbInit = Shared.modules.Db.prototype.init;

	CollectionGroup.prototype.on = function () {
		this._data.on.apply(this._data, arguments);
	};

	CollectionGroup.prototype.off = function () {
		this._data.off.apply(this._data, arguments);
	};

	CollectionGroup.prototype.emit = function () {
		this._data.emit.apply(this._data, arguments);
	};

	/**
	 * Gets / sets the primary key for this collection group.
	 * @param {String=} keyName The name of the primary key.
	 * @returns {*}
	 */
	CollectionGroup.prototype.primaryKey = function (keyName) {
		if (keyName !== undefined) {
			this._primaryKey = keyName;
			return this;
		}

		return this._primaryKey;
	};

	/**
	 * Gets / sets the current state.
	 * @param {String=} val The name of the state to set.
	 * @returns {*}
	 */
	Shared.synthesize(CollectionGroup.prototype, 'state');

	/**
	 * Gets / sets the db instance the collection group belongs to.
	 * @param {Db=} db The db instance.
	 * @returns {*}
	 */
	Shared.synthesize(CollectionGroup.prototype, 'db');

	/**
	 * Gets / sets the instance name.
	 * @param {Name=} name The new name to set.
	 * @returns {*}
	 */
	Shared.synthesize(CollectionGroup.prototype, 'name');

	CollectionGroup.prototype.addCollection = function (collection) {
		if (collection) {
			if (this._collections.indexOf(collection) === -1) {
				//var self = this;

				// Check for compatible primary keys
				if (this._collections.length) {
					if (this._primaryKey !== collection.primaryKey()) {
						throw(this.logIdentifier() + ' All collections in a collection group must have the same primary key!');
					}
				} else {
					// Set the primary key to the first collection added
					this.primaryKey(collection.primaryKey());
				}

				// Add the collection
				this._collections.push(collection);
				collection._groups = collection._groups || [];
				collection._groups.push(this);
				collection.chain(this);

				// Hook the collection's drop event to destroy group data
				collection.on('drop', function () {
					// Remove collection from any group associations
					if (collection._groups && collection._groups.length) {
						var groupArr = [],
							i;

						// Copy the group array because if we call removeCollection on a group
						// it will alter the groups array of this collection mid-loop!
						for (i = 0; i < collection._groups.length; i++) {
							groupArr.push(collection._groups[i]);
						}

						// Loop any groups we are part of and remove ourselves from them
						for (i = 0; i < groupArr.length; i++) {
							collection._groups[i].removeCollection(collection);
						}
					}

					delete collection._groups;
				});

				// Add collection's data
				this._data.insert(collection.find());
			}
		}

		return this;
	};

	CollectionGroup.prototype.removeCollection = function (collection) {
		if (collection) {
			var collectionIndex = this._collections.indexOf(collection),
				groupIndex;

			if (collectionIndex !== -1) {
				collection.unChain(this);
				this._collections.splice(collectionIndex, 1);

				collection._groups = collection._groups || [];
				groupIndex = collection._groups.indexOf(this);

				if (groupIndex !== -1) {
					collection._groups.splice(groupIndex, 1);
				}

				collection.off('drop');
			}

			if (this._collections.length === 0) {
				// Wipe the primary key
				delete this._primaryKey;
			}
		}

		return this;
	};

	CollectionGroup.prototype._chainHandler = function (chainPacket) {
		//sender = chainPacket.sender;
		switch (chainPacket.type) {
			case 'setData':
				// Decouple the data to ensure we are working with our own copy
				chainPacket.data = this.decouple(chainPacket.data);

				// Remove old data
				this._data.remove(chainPacket.options.oldData);

				// Add new data
				this._data.insert(chainPacket.data);
				break;

			case 'insert':
				// Decouple the data to ensure we are working with our own copy
				chainPacket.data = this.decouple(chainPacket.data);

				// Add new data
				this._data.insert(chainPacket.data);
				break;

			case 'update':
				// Update data
				this._data.update(chainPacket.data.query, chainPacket.data.update, chainPacket.options);
				break;

			case 'remove':
				this._data.remove(chainPacket.data.query, chainPacket.options);
				break;

			default:
				break;
		}
	};

	CollectionGroup.prototype.insert = function () {
		this._collectionsRun('insert', arguments);
	};

	CollectionGroup.prototype.update = function () {
		this._collectionsRun('update', arguments);
	};

	CollectionGroup.prototype.updateById = function () {
		this._collectionsRun('updateById', arguments);
	};

	CollectionGroup.prototype.remove = function () {
		this._collectionsRun('remove', arguments);
	};

	CollectionGroup.prototype._collectionsRun = function (type, args) {
		for (var i = 0; i < this._collections.length; i++) {
			this._collections[i][type].apply(this._collections[i], args);
		}
	};

	CollectionGroup.prototype.find = function (query, options) {
		return this._data.find(query, options);
	};

	/**
	 * Helper method that removes a document that matches the given id.
	 * @param {String} id The id of the document to remove.
	 */
	CollectionGroup.prototype.removeById = function (id) {
		// Loop the collections in this group and apply the remove
		for (var i = 0; i < this._collections.length; i++) {
			this._collections[i].removeById(id);
		}
	};

	/**
	 * Uses the passed query to generate a new collection with results
	 * matching the query parameters.
	 *
	 * @param query
	 * @param options
	 * @returns {*}
	 */
	CollectionGroup.prototype.subset = function (query, options) {
		var result = this.find(query, options);

		return new Collection()
			.subsetOf(this)
			.primaryKey(this._primaryKey)
			.setData(result);
	};

	/**
	 * Drops a collection group from the database.
	 * @returns {boolean} True on success, false on failure.
	 */
	CollectionGroup.prototype.drop = function (callback) {
		if (!this.isDropped()) {
			var i,
				collArr,
				viewArr;

			if (this._debug) {
				console.log(this.logIdentifier() + ' Dropping');
			}

			this._state = 'dropped';

			if (this._collections && this._collections.length) {
				collArr = [].concat(this._collections);

				for (i = 0; i < collArr.length; i++) {
					this.removeCollection(collArr[i]);
				}
			}

			if (this._view && this._view.length) {
				viewArr = [].concat(this._view);

				for (i = 0; i < viewArr.length; i++) {
					this._removeView(viewArr[i]);
				}
			}

			this.emit('drop', this);

			if (callback) { callback(false, true); }
		}

		return true;
	};

	// Extend DB to include collection groups
	Db.prototype.init = function () {
		this._collectionGroup = {};
		DbInit.apply(this, arguments);
	};

	Db.prototype.collectionGroup = function (collectionGroupName) {
		if (collectionGroupName) {
			// Handle being passed an instance
			if (collectionGroupName instanceof CollectionGroup) {
				return collectionGroupName;
			}

			this._collectionGroup[collectionGroupName] = this._collectionGroup[collectionGroupName] || new CollectionGroup(collectionGroupName).db(this);
			return this._collectionGroup[collectionGroupName];
		} else {
			// Return an object of collection data
			return this._collectionGroup;
		}
	};

	/**
	 * Returns an array of collection groups the DB currently has.
	 * @returns {Array} An array of objects containing details of each collection group
	 * the database is currently managing.
	 */
	Db.prototype.collectionGroups = function () {
		var arr = [],
			i;

		for (i in this._collectionGroup) {
			if (this._collectionGroup.hasOwnProperty(i)) {
				arr.push({
					name: i
				});
			}
		}

		return arr;
	};

	module.exports = CollectionGroup;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3);

	/**
	 * Path object used to resolve object paths and retrieve data from
	 * objects by using paths.
	 * @param {String=} path The path to assign.
	 * @constructor
	 */
	var Path = function (path) {
		this.init.apply(this, arguments);
	};

	Path.prototype.init = function (path) {
		if (path) {
			this.path(path);
		}
	};

	Shared.addModule('Path', Path);
	Shared.mixin(Path.prototype, 'Mixin.Common');
	Shared.mixin(Path.prototype, 'Mixin.ChainReactor');

	/**
	 * Gets / sets the given path for the Path instance.
	 * @param {String=} path The path to assign.
	 */
	Path.prototype.path = function (path) {
		if (path !== undefined) {
			this._path = this.clean(path);
			this._pathParts = this._path.split('.');
			return this;
		}

		return this._path;
	};

	/**
	 * Tests if the passed object has the paths that are specified and that
	 * a value exists in those paths.
	 * @param {Object} testKeys The object describing the paths to test for.
	 * @param {Object} testObj The object to test paths against.
	 * @returns {Boolean} True if the object paths exist.
	 */
	Path.prototype.hasObjectPaths = function (testKeys, testObj) {
		var result = true,
			i;

		for (i in testKeys) {
			if (testKeys.hasOwnProperty(i)) {
				if (testObj[i] === undefined) {
					return false;
				}

				if (typeof testKeys[i] === 'object') {
					// Recurse object
					result = this.hasObjectPaths(testKeys[i], testObj[i]);

					// Should we exit early?
					if (!result) {
						return false;
					}
				}
			}
		}

		return result;
	};

	/**
	 * Counts the total number of key endpoints in the passed object.
	 * @param {Object} testObj The object to count key endpoints for.
	 * @returns {Number} The number of endpoints.
	 */
	Path.prototype.countKeys = function (testObj) {
		var totalKeys = 0,
			i;

		for (i in testObj) {
			if (testObj.hasOwnProperty(i)) {
				if (testObj[i] !== undefined) {
					if (typeof testObj[i] !== 'object') {
						totalKeys++;
					} else {
						totalKeys += this.countKeys(testObj[i]);
					}
				}
			}
		}

		return totalKeys;
	};

	/**
	 * Tests if the passed object has the paths that are specified and that
	 * a value exists in those paths and if so returns the number matched.
	 * @param {Object} testKeys The object describing the paths to test for.
	 * @param {Object} testObj The object to test paths against.
	 * @returns {Object} Stats on the matched keys
	 */
	Path.prototype.countObjectPaths = function (testKeys, testObj) {
		var matchData,
			matchedKeys = {},
			matchedKeyCount = 0,
			totalKeyCount = 0,
			i;

		for (i in testObj) {
			if (testObj.hasOwnProperty(i)) {
				if (typeof testObj[i] === 'object') {
					// The test / query object key is an object, recurse
					matchData = this.countObjectPaths(testKeys[i], testObj[i]);

					matchedKeys[i] = matchData.matchedKeys;
					totalKeyCount += matchData.totalKeyCount;
					matchedKeyCount += matchData.matchedKeyCount;
				} else {
					// The test / query object has a property that is not an object so add it as a key
					totalKeyCount++;

					// Check if the test keys also have this key and it is also not an object
					if (testKeys && testKeys[i] && typeof testKeys[i] !== 'object') {
						matchedKeys[i] = true;
						matchedKeyCount++;
					} else {
						matchedKeys[i] = false;
					}
				}
			}
		}

		return {
			matchedKeys: matchedKeys,
			matchedKeyCount: matchedKeyCount,
			totalKeyCount: totalKeyCount
		};
	};

	/**
	 * Takes a non-recursive object and converts the object hierarchy into
	 * a path string.
	 * @param {Object} obj The object to parse.
	 * @param {Boolean=} withValue If true will include a 'value' key in the returned
	 * object that represents the value the object path points to.
	 * @returns {Object}
	 */
	Path.prototype.parse = function (obj, withValue) {
		var paths = [],
			path = '',
			resultData,
			i, k;

		for (i in obj) {
			if (obj.hasOwnProperty(i)) {
				// Set the path to the key
				path = i;

				if (typeof(obj[i]) === 'object') {
					if (withValue) {
						resultData = this.parse(obj[i], withValue);

						for (k = 0; k < resultData.length; k++) {
							paths.push({
								path: path + '.' + resultData[k].path,
								value: resultData[k].value
							});
						}
					} else {
						resultData = this.parse(obj[i]);

						for (k = 0; k < resultData.length; k++) {
							paths.push({
								path: path + '.' + resultData[k].path
							});
						}
					}
				} else {
					if (withValue) {
						paths.push({
							path: path,
							value: obj[i]
						});
					} else {
						paths.push({
							path: path
						});
					}
				}
			}
		}

		return paths;
	};

	/**
	 * Takes a non-recursive object and converts the object hierarchy into
	 * an array of path strings that allow you to target all possible paths
	 * in an object.
	 *
	 * The options object accepts an "ignore" field with a regular expression
	 * as the value. If any key matches the expression it is not included in
	 * the results.
	 *
	 * The options object accepts a boolean "verbose" field. If set to true
	 * the results will include all paths leading up to endpoints as well as
	 * they endpoints themselves.
	 *
	 * @returns {Array}
	 */
	Path.prototype.parseArr = function (obj, options) {
		options = options || {};
		return this._parseArr(obj, '', [], options);
	};

	Path.prototype._parseArr = function (obj, path, paths, options) {
		var i,
			newPath = '';

		path = path || '';
		paths = paths || [];

		for (i in obj) {
			if (obj.hasOwnProperty(i)) {
				if (!options.ignore || (options.ignore && !options.ignore.test(i))) {
					if (path) {
						newPath = path + '.' + i;
					} else {
						newPath = i;
					}

					if (typeof(obj[i]) === 'object') {
						if (options.verbose) {
							paths.push(newPath);
						}

						this._parseArr(obj[i], newPath, paths, options);
					} else {
						paths.push(newPath);
					}
				}
			}
		}

		return paths;
	};

	/**
	 * Gets the value(s) that the object contains for the currently assigned path string.
	 * @param {Object} obj The object to evaluate the path against.
	 * @param {String=} path A path to use instead of the existing one passed in path().
	 * @returns {Array} An array of values for the given path.
	 */
	Path.prototype.value = function (obj, path) {
		if (obj !== undefined && typeof obj === 'object') {
			var pathParts,
				arr,
				arrCount,
				objPart,
				objPartParent,
				valuesArr = [],
				i, k;

			if (path !== undefined) {
				path = this.clean(path);
				pathParts = path.split('.');
			}

			arr = pathParts || this._pathParts;
			arrCount = arr.length;
			objPart = obj;

			for (i = 0; i < arrCount; i++) {
				objPart = objPart[arr[i]];

				if (objPartParent instanceof Array) {
					// Search inside the array for the next key
					for (k = 0; k < objPartParent.length; k++) {
						valuesArr = valuesArr.concat(this.value(objPartParent, k + '.' + arr[i]));
					}

					return valuesArr;
				} else {
					if (!objPart || typeof(objPart) !== 'object') {
						break;
					}
				}

				objPartParent = objPart;
			}

			return [objPart];
		} else {
			return [];
		}
	};

	/**
	 * Sets a value on an object for the specified path.
	 * @param {Object} obj The object to update.
	 * @param {String} path The path to update.
	 * @param {*} val The value to set the object path to.
	 * @returns {*}
	 */
	Path.prototype.set = function (obj, path, val) {
		if (obj !== undefined && path !== undefined) {
			var pathParts,
				part;

			path = this.clean(path);
			pathParts = path.split('.');

			part = pathParts.shift();

			if (pathParts.length) {
				// Generate the path part in the object if it does not already exist
				obj[part] = obj[part] || {};

				// Recurse
				this.set(obj[part], pathParts.join('.'), val);
			} else {
				// Set the value
				obj[part] = val;
			}
		}

		return obj;
	};

	Path.prototype.get = function (obj, path) {
		return this.value(obj, path)[0];
	};

	/**
	 * Push a value to an array on an object for the specified path.
	 * @param {Object} obj The object to update.
	 * @param {String} path The path to the array to push to.
	 * @param {*} val The value to push to the array at the object path.
	 * @returns {*}
	 */
	Path.prototype.push = function (obj, path, val) {
		if (obj !== undefined && path !== undefined) {
			var pathParts,
				part;

			path = this.clean(path);
			pathParts = path.split('.');

			part = pathParts.shift();

			if (pathParts.length) {
				// Generate the path part in the object if it does not already exist
				obj[part] = obj[part] || {};

				// Recurse
				this.set(obj[part], pathParts.join('.'), val);
			} else {
				// Set the value
				obj[part] = obj[part] || [];

				if (obj[part] instanceof Array) {
					obj[part].push(val);
				} else {
					throw('ForerunnerDB.Path: Cannot push to a path whose endpoint is not an array!');
				}
			}
		}

		return obj;
	};

	/**
	 * Gets the value(s) that the object contains for the currently assigned path string
	 * with their associated keys.
	 * @param {Object} obj The object to evaluate the path against.
	 * @param {String=} path A path to use instead of the existing one passed in path().
	 * @returns {Array} An array of values for the given path with the associated key.
	 */
	Path.prototype.keyValue = function (obj, path) {
		var pathParts,
			arr,
			arrCount,
			objPart,
			objPartParent,
			objPartHash,
			i;

		if (path !== undefined) {
			path = this.clean(path);
			pathParts = path.split('.');
		}

		arr = pathParts || this._pathParts;
		arrCount = arr.length;
		objPart = obj;

		for (i = 0; i < arrCount; i++) {
			objPart = objPart[arr[i]];

			if (!objPart || typeof(objPart) !== 'object') {
				objPartHash = arr[i] + ':' + objPart;
				break;
			}

			objPartParent = objPart;
		}

		return objPartHash;
	};

	/**
	 * Sets a value on an object for the specified path.
	 * @param {Object} obj The object to update.
	 * @param {String} path The path to update.
	 * @param {*} val The value to set the object path to.
	 * @returns {*}
	 */
	Path.prototype.set = function (obj, path, val) {
		if (obj !== undefined && path !== undefined) {
			var pathParts,
				part;

			path = this.clean(path);
			pathParts = path.split('.');

			part = pathParts.shift();

			if (pathParts.length) {
				// Generate the path part in the object if it does not already exist
				obj[part] = obj[part] || {};

				// Recurse
				this.set(obj[part], pathParts.join('.'), val);
			} else {
				// Set the value
				obj[part] = val;
			}
		}

		return obj;
	};

	/**
	 * Removes leading period (.) from string and returns it.
	 * @param {String} str The string to clean.
	 * @returns {*}
	 */
	Path.prototype.clean = function (str) {
		if (str.substr(0, 1) === '.') {
			str = str.substr(1, str.length -1);
		}

		return str;
	};

	Shared.finishModule('Path');
	module.exports = Path;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (undefined) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var X32WordArray = C_lib.WordArray;

		    /**
		     * x64 namespace.
		     */
		    var C_x64 = C.x64 = {};

		    /**
		     * A 64-bit word.
		     */
		    var X64Word = C_x64.Word = Base.extend({
		        /**
		         * Initializes a newly created 64-bit word.
		         *
		         * @param {number} high The high 32 bits.
		         * @param {number} low The low 32 bits.
		         *
		         * @example
		         *
		         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
		         */
		        init: function (high, low) {
		            this.high = high;
		            this.low = low;
		        }

		        /**
		         * Bitwise NOTs this word.
		         *
		         * @return {X64Word} A new x64-Word object after negating.
		         *
		         * @example
		         *
		         *     var negated = x64Word.not();
		         */
		        // not: function () {
		            // var high = ~this.high;
		            // var low = ~this.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise ANDs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to AND with this word.
		         *
		         * @return {X64Word} A new x64-Word object after ANDing.
		         *
		         * @example
		         *
		         *     var anded = x64Word.and(anotherX64Word);
		         */
		        // and: function (word) {
		            // var high = this.high & word.high;
		            // var low = this.low & word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise ORs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to OR with this word.
		         *
		         * @return {X64Word} A new x64-Word object after ORing.
		         *
		         * @example
		         *
		         *     var ored = x64Word.or(anotherX64Word);
		         */
		        // or: function (word) {
		            // var high = this.high | word.high;
		            // var low = this.low | word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise XORs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to XOR with this word.
		         *
		         * @return {X64Word} A new x64-Word object after XORing.
		         *
		         * @example
		         *
		         *     var xored = x64Word.xor(anotherX64Word);
		         */
		        // xor: function (word) {
		            // var high = this.high ^ word.high;
		            // var low = this.low ^ word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Shifts this word n bits to the left.
		         *
		         * @param {number} n The number of bits to shift.
		         *
		         * @return {X64Word} A new x64-Word object after shifting.
		         *
		         * @example
		         *
		         *     var shifted = x64Word.shiftL(25);
		         */
		        // shiftL: function (n) {
		            // if (n < 32) {
		                // var high = (this.high << n) | (this.low >>> (32 - n));
		                // var low = this.low << n;
		            // } else {
		                // var high = this.low << (n - 32);
		                // var low = 0;
		            // }

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Shifts this word n bits to the right.
		         *
		         * @param {number} n The number of bits to shift.
		         *
		         * @return {X64Word} A new x64-Word object after shifting.
		         *
		         * @example
		         *
		         *     var shifted = x64Word.shiftR(7);
		         */
		        // shiftR: function (n) {
		            // if (n < 32) {
		                // var low = (this.low >>> n) | (this.high << (32 - n));
		                // var high = this.high >>> n;
		            // } else {
		                // var low = this.high >>> (n - 32);
		                // var high = 0;
		            // }

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Rotates this word n bits to the left.
		         *
		         * @param {number} n The number of bits to rotate.
		         *
		         * @return {X64Word} A new x64-Word object after rotating.
		         *
		         * @example
		         *
		         *     var rotated = x64Word.rotL(25);
		         */
		        // rotL: function (n) {
		            // return this.shiftL(n).or(this.shiftR(64 - n));
		        // },

		        /**
		         * Rotates this word n bits to the right.
		         *
		         * @param {number} n The number of bits to rotate.
		         *
		         * @return {X64Word} A new x64-Word object after rotating.
		         *
		         * @example
		         *
		         *     var rotated = x64Word.rotR(7);
		         */
		        // rotR: function (n) {
		            // return this.shiftR(n).or(this.shiftL(64 - n));
		        // },

		        /**
		         * Adds this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to add with this word.
		         *
		         * @return {X64Word} A new x64-Word object after adding.
		         *
		         * @example
		         *
		         *     var added = x64Word.add(anotherX64Word);
		         */
		        // add: function (word) {
		            // var low = (this.low + word.low) | 0;
		            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
		            // var high = (this.high + word.high + carry) | 0;

		            // return X64Word.create(high, low);
		        // }
		    });

		    /**
		     * An array of 64-bit words.
		     *
		     * @property {Array} words The array of CryptoJS.x64.Word objects.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var X64WordArray = C_x64.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create();
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create([
		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		         *     ]);
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create([
		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		         *     ], 10);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 8;
		            }
		        },

		        /**
		         * Converts this 64-bit word array to a 32-bit word array.
		         *
		         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
		         *
		         * @example
		         *
		         *     var x32WordArray = x64WordArray.toX32();
		         */
		        toX32: function () {
		            // Shortcuts
		            var x64Words = this.words;
		            var x64WordsLength = x64Words.length;

		            // Convert
		            var x32Words = [];
		            for (var i = 0; i < x64WordsLength; i++) {
		                var x64Word = x64Words[i];
		                x32Words.push(x64Word.high);
		                x32Words.push(x64Word.low);
		            }

		            return X32WordArray.create(x32Words, this.sigBytes);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {X64WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = x64WordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);

		            // Clone "words" array
		            var words = clone.words = this.words.slice(0);

		            // Clone each X64Word object
		            var wordsLength = words.length;
		            for (var i = 0; i < wordsLength; i++) {
		                words[i] = words[i].clone();
		            }

		            return clone;
		        }
		    });
		}());


		return CryptoJS;

	}));

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3),
		Operation = __webpack_require__(70);

	/**
	 * The metrics class used to store details about operations.
	 * @constructor
	 */
	var Metrics = function () {
		this.init.apply(this, arguments);
	};

	Metrics.prototype.init = function () {
		this._data = [];
	};

	Shared.addModule('Metrics', Metrics);
	Shared.mixin(Metrics.prototype, 'Mixin.ChainReactor');

	/**
	 * Creates an operation within the metrics instance and if metrics
	 * are currently enabled (by calling the start() method) the operation
	 * is also stored in the metrics log.
	 * @param {String} name The name of the operation.
	 * @returns {Operation}
	 */
	Metrics.prototype.create = function (name) {
		var op = new Operation(name);

		if (this._enabled) {
			this._data.push(op);
		}

		return op;
	};

	/**
	 * Starts logging operations.
	 * @returns {Metrics}
	 */
	Metrics.prototype.start = function () {
		this._enabled = true;
		return this;
	};

	/**
	 * Stops logging operations.
	 * @returns {Metrics}
	 */
	Metrics.prototype.stop = function () {
		this._enabled = false;
		return this;
	};

	/**
	 * Clears all logged operations.
	 * @returns {Metrics}
	 */
	Metrics.prototype.clear = function () {
		this._data = [];
		return this;
	};

	/**
	 * Returns an array of all logged operations.
	 * @returns {Array}
	 */
	Metrics.prototype.list = function () {
		return this._data;
	};

	Shared.finishModule('Metrics');
	module.exports = Metrics;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3);

	/**
	 * Provides chain reactor node linking so that a chain reaction can propagate
	 * down a node tree. Effectively creates a chain link between the reactorIn and
	 * reactorOut objects where a chain reaction from the reactorIn is passed through
	 * the reactorProcess before being passed to the reactorOut object. Reactor
	 * packets are only passed through to the reactorOut if the reactor IO method
	 * chainSend is used.
	 * @param {*} reactorIn An object that has the Mixin.ChainReactor methods mixed
	 * in to it. Chain reactions that occur inside this object will be passed through
	 * to the reactorOut object.
	 * @param {*} reactorOut An object that has the Mixin.ChainReactor methods mixed
	 * in to it. Chain reactions that occur in the reactorIn object will be passed
	 * through to this object.
	 * @param {Function} reactorProcess The processing method to use when chain
	 * reactions occur.
	 * @constructor
	 */
	var ReactorIO = function (reactorIn, reactorOut, reactorProcess) {
		if (reactorIn && reactorOut && reactorProcess) {
			this._reactorIn = reactorIn;
			this._reactorOut = reactorOut;
			this._chainHandler = reactorProcess;

			if (!reactorIn.chain || !reactorOut.chainReceive) {
				throw('ForerunnerDB.ReactorIO: ReactorIO requires passed in and out objects to implement the ChainReactor mixin!');
			}

			// Register the reactorIO with the input
			reactorIn.chain(this);

			// Register the output with the reactorIO
			this.chain(reactorOut);
		} else {
			throw('ForerunnerDB.ReactorIO: ReactorIO requires in, out and process arguments to instantiate!');
		}
	};

	Shared.addModule('ReactorIO', ReactorIO);

	/**
	 * Drop a reactor IO object, breaking the reactor link between the in and out
	 * reactor nodes.
	 * @returns {boolean}
	 */
	ReactorIO.prototype.drop = function () {
		if (!this.isDropped()) {
			this._state = 'dropped';

			// Remove links
			if (this._reactorIn) {
				this._reactorIn.unChain(this);
			}

			if (this._reactorOut) {
				this.unChain(this._reactorOut);
			}

			delete this._reactorIn;
			delete this._reactorOut;
			delete this._chainHandler;

			this.emit('drop', this);
		}

		return true;
	};

	/**
	 * Gets / sets the current state.
	 * @param {String=} val The name of the state to set.
	 * @returns {*}
	 */
	Shared.synthesize(ReactorIO.prototype, 'state');

	Shared.mixin(ReactorIO.prototype, 'Mixin.Common');
	Shared.mixin(ReactorIO.prototype, 'Mixin.ChainReactor');
	Shared.mixin(ReactorIO.prototype, 'Mixin.Events');

	Shared.finishModule('ReactorIO');
	module.exports = ReactorIO;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var C_algo = C.algo;

		    /**
		     * HMAC algorithm.
		     */
		    var HMAC = C_algo.HMAC = Base.extend({
		        /**
		         * Initializes a newly created HMAC.
		         *
		         * @param {Hasher} hasher The hash algorithm to use.
		         * @param {WordArray|string} key The secret key.
		         *
		         * @example
		         *
		         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
		         */
		        init: function (hasher, key) {
		            // Init hasher
		            hasher = this._hasher = new hasher.init();

		            // Convert string to WordArray, else assume WordArray already
		            if (typeof key == 'string') {
		                key = Utf8.parse(key);
		            }

		            // Shortcuts
		            var hasherBlockSize = hasher.blockSize;
		            var hasherBlockSizeBytes = hasherBlockSize * 4;

		            // Allow arbitrary length keys
		            if (key.sigBytes > hasherBlockSizeBytes) {
		                key = hasher.finalize(key);
		            }

		            // Clamp excess bits
		            key.clamp();

		            // Clone key for inner and outer pads
		            var oKey = this._oKey = key.clone();
		            var iKey = this._iKey = key.clone();

		            // Shortcuts
		            var oKeyWords = oKey.words;
		            var iKeyWords = iKey.words;

		            // XOR keys with pad constants
		            for (var i = 0; i < hasherBlockSize; i++) {
		                oKeyWords[i] ^= 0x5c5c5c5c;
		                iKeyWords[i] ^= 0x36363636;
		            }
		            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this HMAC to its initial state.
		         *
		         * @example
		         *
		         *     hmacHasher.reset();
		         */
		        reset: function () {
		            // Shortcut
		            var hasher = this._hasher;

		            // Reset
		            hasher.reset();
		            hasher.update(this._iKey);
		        },

		        /**
		         * Updates this HMAC with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {HMAC} This HMAC instance.
		         *
		         * @example
		         *
		         *     hmacHasher.update('message');
		         *     hmacHasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            this._hasher.update(messageUpdate);

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the HMAC computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The HMAC.
		         *
		         * @example
		         *
		         *     var hmac = hmacHasher.finalize();
		         *     var hmac = hmacHasher.finalize('message');
		         *     var hmac = hmacHasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Shortcut
		            var hasher = this._hasher;

		            // Compute HMAC
		            var innerHash = hasher.finalize(messageUpdate);
		            hasher.reset();
		            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

		            return hmac;
		        }
		    });
		}());


	}));

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-1 hash algorithm.
		     */
		    var SHA1 = C_algo.SHA1 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476,
		                0xc3d2e1f0
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var H = this._hash.words;

		            // Working variables
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];
		            var e = H[4];

		            // Computation
		            for (var i = 0; i < 80; i++) {
		                if (i < 16) {
		                    W[i] = M[offset + i] | 0;
		                } else {
		                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
		                    W[i] = (n << 1) | (n >>> 31);
		                }

		                var t = ((a << 5) | (a >>> 27)) + e + W[i];
		                if (i < 20) {
		                    t += ((b & c) | (~b & d)) + 0x5a827999;
		                } else if (i < 40) {
		                    t += (b ^ c ^ d) + 0x6ed9eba1;
		                } else if (i < 60) {
		                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
		                } else /* if (i < 80) */ {
		                    t += (b ^ c ^ d) - 0x359d3e2a;
		                }

		                e = d;
		                d = c;
		                c = (b << 30) | (b >>> 2);
		                b = a;
		                a = t;
		            }

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		            H[4] = (H[4] + e) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Return final computed hash
		            return this._hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA1('message');
		     *     var hash = CryptoJS.SHA1(wordArray);
		     */
		    C.SHA1 = Hasher._createHelper(SHA1);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA1(message, key);
		     */
		    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
		}());


		return CryptoJS.SHA1;

	}));

/***/ },
/* 20 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  '2':    'need dictionary',     /* Z_NEED_DICT       2  */
	  '1':    'stream end',          /* Z_STREAM_END      1  */
	  '0':    '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2014 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			/**
			 * Add common helper methods to a client impl
			 *
			 * @param {function} impl the client implementation
			 * @param {Client} [target] target of this client, used when wrapping other clients
			 * @returns {Client} the client impl with additional methods
			 */
			return function client(impl, target) {

				if (target) {

					/**
					 * @returns {Client} the target client
					 */
					impl.skip = function skip() {
						return target;
					};

				}

				/**
				 * Allow a client to easily be wrapped by an interceptor
				 *
				 * @param {Interceptor} interceptor the interceptor to wrap this client with
				 * @param [config] configuration for the interceptor
				 * @returns {Client} the newly wrapped client
				 */
				impl.wrap = function wrap(interceptor, config) {
					return interceptor(impl, config);
				};

				/**
				 * @deprecated
				 */
				impl.chain = function chain() {
					if (typeof console !== 'undefined') {
						console.log('rest.js: client.chain() is deprecated, use client.wrap() instead');
					}

					return impl.wrap.apply(this, arguments);
				};

				return impl;

			};

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012-2015 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var defaultClient, mixin, responsePromise, client, when;

			defaultClient = __webpack_require__(40);
			mixin = __webpack_require__(24);
			responsePromise = __webpack_require__(25);
			client = __webpack_require__(21);
			when = __webpack_require__(8);

			/**
			 * Interceptors have the ability to intercept the request and/org response
			 * objects.  They may augment, prune, transform or replace the
			 * request/response as needed.  Clients may be composed by wrapping
			 * together multiple interceptors.
			 *
			 * Configured interceptors are functional in nature.  Wrapping a client in
			 * an interceptor will not affect the client, merely the data that flows in
			 * and out of that client.  A common configuration can be created once and
			 * shared; specialization can be created by further wrapping that client
			 * with custom interceptors.
			 *
			 * @param {Client} [target] client to wrap
			 * @param {Object} [config] configuration for the interceptor, properties will be specific to the interceptor implementation
			 * @returns {Client} A client wrapped with the interceptor
			 *
			 * @class Interceptor
			 */

			function defaultInitHandler(config) {
				return config;
			}

			function defaultRequestHandler(request /*, config, meta */) {
				return request;
			}

			function defaultResponseHandler(response /*, config, meta */) {
				return response;
			}

			function race(promisesOrValues) {
				// this function is different than when.any as the first to reject also wins
				return when.promise(function (resolve, reject) {
					promisesOrValues.forEach(function (promiseOrValue) {
						when(promiseOrValue, resolve, reject);
					});
				});
			}

			/**
			 * Alternate return type for the request handler that allows for more complex interactions.
			 *
			 * @param properties.request the traditional request return object
			 * @param {Promise} [properties.abort] promise that resolves if/when the request is aborted
			 * @param {Client} [properties.client] override the defined client with an alternate client
			 * @param [properties.response] response for the request, short circuit the request
			 */
			function ComplexRequest(properties) {
				if (!(this instanceof ComplexRequest)) {
					// in case users forget the 'new' don't mix into the interceptor
					return new ComplexRequest(properties);
				}
				mixin(this, properties);
			}

			/**
			 * Create a new interceptor for the provided handlers.
			 *
			 * @param {Function} [handlers.init] one time intialization, must return the config object
			 * @param {Function} [handlers.request] request handler
			 * @param {Function} [handlers.response] response handler regardless of error state
			 * @param {Function} [handlers.success] response handler when the request is not in error
			 * @param {Function} [handlers.error] response handler when the request is in error, may be used to 'unreject' an error state
			 * @param {Function} [handlers.client] the client to use if otherwise not specified, defaults to platform default client
			 *
			 * @returns {Interceptor}
			 */
			function interceptor(handlers) {

				var initHandler, requestHandler, successResponseHandler, errorResponseHandler;

				handlers = handlers || {};

				initHandler            = handlers.init    || defaultInitHandler;
				requestHandler         = handlers.request || defaultRequestHandler;
				successResponseHandler = handlers.success || handlers.response || defaultResponseHandler;
				errorResponseHandler   = handlers.error   || function () {
					// Propagate the rejection, with the result of the handler
					return when((handlers.response || defaultResponseHandler).apply(this, arguments), when.reject, when.reject);
				};

				return function (target, config) {

					if (typeof target === 'object') {
						config = target;
					}
					if (typeof target !== 'function') {
						target = handlers.client || defaultClient;
					}

					config = initHandler(config || {});

					function interceptedClient(request) {
						var context, meta;
						context = {};
						meta = { 'arguments': Array.prototype.slice.call(arguments), client: interceptedClient };
						request = typeof request === 'string' ? { path: request } : request || {};
						request.originator = request.originator || interceptedClient;
						return responsePromise(
							requestHandler.call(context, request, config, meta),
							function (request) {
								var response, abort, next;
								next = target;
								if (request instanceof ComplexRequest) {
									// unpack request
									abort = request.abort;
									next = request.client || next;
									response = request.response;
									// normalize request, must be last
									request = request.request;
								}
								response = response || when(request, function (request) {
									return when(
										next(request),
										function (response) {
											return successResponseHandler.call(context, response, config, meta);
										},
										function (response) {
											return errorResponseHandler.call(context, response, config, meta);
										}
									);
								});
								return abort ? race([response, abort]) : response;
							},
							function (error) {
								return when.reject({ request: request, error: error });
							}
						);
					}

					return client(interceptedClient, target);
				};
			}

			interceptor.ComplexRequest = ComplexRequest;

			return interceptor;

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;var require;/* WEBPACK VAR INJECTION */(function(process) {/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/
	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
		/*jshint maxcomplexity:6*/

		// Sniff "best" async scheduling option
		// Prefer process.nextTick or MutationObserver, then check for
		// setTimeout, and finally vertx, since its the only env that doesn't
		// have setTimeout

		var MutationObs;
		var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;

		// Default env
		var setTimer = function(f, ms) { return setTimeout(f, ms); };
		var clearTimer = function(t) { return clearTimeout(t); };
		var asap = function (f) { return capturedSetTimeout(f, 0); };

		// Detect specific env
		if (isNode()) { // Node
			asap = function (f) { return process.nextTick(f); };

		} else if (MutationObs = hasMutationObserver()) { // Modern browser
			asap = initMutationObserver(MutationObs);

		} else if (!capturedSetTimeout) { // vert.x
			var vertxRequire = require;
			var vertx = __webpack_require__(150);
			setTimer = function (f, ms) { return vertx.setTimer(ms, f); };
			clearTimer = vertx.cancelTimer;
			asap = vertx.runOnLoop || vertx.runOnContext;
		}

		return {
			setTimer: setTimer,
			clearTimer: clearTimer,
			asap: asap
		};

		function isNode () {
			return typeof process !== 'undefined' &&
				Object.prototype.toString.call(process) === '[object process]';
		}

		function hasMutationObserver () {
			return (typeof MutationObserver === 'function' && MutationObserver) ||
				(typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);
		}

		function initMutationObserver(MutationObserver) {
			var scheduled;
			var node = document.createTextNode('');
			var o = new MutationObserver(run);
			o.observe(node, { characterData: true });

			function run() {
				var f = scheduled;
				scheduled = void 0;
				f();
			}

			var i = 0;
			return function (f) {
				scheduled = f;
				node.data = (i ^= 1);
			};
		}
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012-2013 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		// derived from dojo.mixin
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			var empty = {};

			/**
			 * Mix the properties from the source object into the destination object.
			 * When the same property occurs in more then one object, the right most
			 * value wins.
			 *
			 * @param {Object} dest the object to copy properties to
			 * @param {Object} sources the objects to copy properties from.  May be 1 to N arguments, but not an Array.
			 * @return {Object} the destination object
			 */
			function mixin(dest /*, sources... */) {
				var i, l, source, name;

				if (!dest) { dest = {}; }
				for (i = 1, l = arguments.length; i < l; i += 1) {
					source = arguments[i];
					for (name in source) {
						if (!(name in dest) || (dest[name] !== source[name] && (!(name in empty) || empty[name] !== source[name]))) {
							dest[name] = source[name];
						}
					}
				}

				return dest; // Object
			}

			return mixin;

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2014-2015 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var when = __webpack_require__(8),
				normalizeHeaderName = __webpack_require__(45);

			function property(promise, name) {
				return promise.then(
					function (value) {
						return value && value[name];
					},
					function (value) {
						return when.reject(value && value[name]);
					}
				);
			}

			/**
			 * Obtain the response entity
			 *
			 * @returns {Promise} for the response entity
			 */
			function entity() {
				/*jshint validthis:true */
				return property(this, 'entity');
			}

			/**
			 * Obtain the response status
			 *
			 * @returns {Promise} for the response status
			 */
			function status() {
				/*jshint validthis:true */
				return property(property(this, 'status'), 'code');
			}

			/**
			 * Obtain the response headers map
			 *
			 * @returns {Promise} for the response headers map
			 */
			function headers() {
				/*jshint validthis:true */
				return property(this, 'headers');
			}

			/**
			 * Obtain a specific response header
			 *
			 * @param {String} headerName the header to retrieve
			 * @returns {Promise} for the response header's value
			 */
			function header(headerName) {
				/*jshint validthis:true */
				headerName = normalizeHeaderName(headerName);
				return property(this.headers(), headerName);
			}

			/**
			 * Follow a related resource
			 *
			 * The relationship to follow may be define as a plain string, an object
			 * with the rel and params, or an array containing one or more entries
			 * with the previous forms.
			 *
			 * Examples:
			 *   response.follow('next')
			 *
			 *   response.follow({ rel: 'next', params: { pageSize: 100 } })
			 *
			 *   response.follow([
			 *       { rel: 'items', params: { projection: 'noImages' } },
			 *       'search',
			 *       { rel: 'findByGalleryIsNull', params: { projection: 'noImages' } },
			 *       'items'
			 *   ])
			 *
			 * @param {String|Object|Array} rels one, or more, relationships to follow
			 * @returns ResponsePromise<Response> related resource
			 */
			function follow(rels) {
				/*jshint validthis:true */
				rels = [].concat(rels);
				return make(when.reduce(rels, function (response, rel) {
					if (typeof rel === 'string') {
						rel = { rel: rel };
					}
					if (typeof response.entity.clientFor !== 'function') {
						throw new Error('Hypermedia response expected');
					}
					var client = response.entity.clientFor(rel.rel);
					return client({ params: rel.params });
				}, this));
			}

			/**
			 * Wrap a Promise as an ResponsePromise
			 *
			 * @param {Promise<Response>} promise the promise for an HTTP Response
			 * @returns {ResponsePromise<Response>} wrapped promise for Response with additional helper methods
			 */
			function make(promise) {
				promise.status = status;
				promise.headers = headers;
				promise.header = header;
				promise.entity = entity;
				promise.follow = follow;
				return promise;
			}

			function responsePromise() {
				return make(when.apply(when, arguments));
			}

			responsePromise.make = make;
			responsePromise.reject = function (val) {
				return make(when.reject(val));
			};
			responsePromise.promise = function (func) {
				return make(when.promise(func));
			};

			return responsePromise;

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(12).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26).setImmediate, __webpack_require__(26).clearImmediate))

/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';

	var Net  = {
	    xhr: function (type, path, data, callback) {
	        var request = new XMLHttpRequest();
	        request.open(type, path, true);
	        if (data === null || data === undefined) {
	            data = '';
	        } else {
	            request.setRequestHeader('Content-Type', 'application/json');
	            data = JSON.stringify(data);
	        }
	        request.onreadystatechange = function () {
	            if (request.readyState === 4 && request.status !== 200) callback(new Error('XHR Failed: ' + path), null);
	            if (request.readyState !== 4 || request.status !== 200) return;
	            callback(null, request.responseText);
	        };
	        request.send(data);
	    },

	    get: function (path, callback) {
	        this.xhr('get', path, null, callback);
	    },
	    
	    post: function (path, data, callback) {
	        this.xhr('post', path, data, callback);  
	    },
	    
	    proxy: function (path, callback) {
	        this.post('/proxy', path, callback);
	    },

	    getJson: function (path, callback) {
	        this.get(path, function (err, data) {
	            callback(err, JSON.parse(data));
	        });
	    },
	    postJson: function (path, json, callback) {
	        this.xhr('post', path, json, function (err, data) {
	            callback(err, JSON.parse(data));
	        });
	    }
	};

	module.exports = Net;


/***/ },
/* 28 */
/***/ function(module, exports) {

	/*! @license Firebase v2.3.2
	    License: https://www.firebase.com/terms/terms-of-service.html */
	(function() {var g,aa=this;function n(a){return void 0!==a}function ba(){}function ca(a){a.ub=function(){return a.uf?a.uf:a.uf=new a}}
	function da(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
	else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function ea(a){return"array"==da(a)}function fa(a){var b=da(a);return"array"==b||"object"==b&&"number"==typeof a.length}function p(a){return"string"==typeof a}function ga(a){return"number"==typeof a}function ha(a){return"function"==da(a)}function ia(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}function ja(a,b,c){return a.call.apply(a.bind,arguments)}
	function ka(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function q(a,b,c){q=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ja:ka;return q.apply(null,arguments)}var la=Date.now||function(){return+new Date};
	function ma(a,b){function c(){}c.prototype=b.prototype;a.bh=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Yg=function(a,c,f){for(var h=Array(arguments.length-2),k=2;k<arguments.length;k++)h[k-2]=arguments[k];return b.prototype[c].apply(a,h)}};function r(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function na(a,b){var c={},d;for(d in a)c[d]=b.call(void 0,a[d],d,a);return c}function oa(a,b){for(var c in a)if(!b.call(void 0,a[c],c,a))return!1;return!0}function pa(a){var b=0,c;for(c in a)b++;return b}function qa(a){for(var b in a)return b}function ra(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function sa(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function ta(a,b){for(var c in a)if(a[c]==b)return!0;return!1}
	function ua(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d}function va(a,b){var c=ua(a,b,void 0);return c&&a[c]}function wa(a){for(var b in a)return!1;return!0}function xa(a){var b={},c;for(c in a)b[c]=a[c];return b}var ya="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
	function za(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ya.length;f++)c=ya[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Aa(a){a=String(a);if(/^\s*$/.test(a)?0:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,"")))try{return eval("("+a+")")}catch(b){}throw Error("Invalid JSON string: "+a);}function Ba(){this.Sd=void 0}
	function Ca(a,b,c){switch(typeof b){case "string":Da(b,c);break;case "number":c.push(isFinite(b)&&!isNaN(b)?b:"null");break;case "boolean":c.push(b);break;case "undefined":c.push("null");break;case "object":if(null==b){c.push("null");break}if(ea(b)){var d=b.length;c.push("[");for(var e="",f=0;f<d;f++)c.push(e),e=b[f],Ca(a,a.Sd?a.Sd.call(b,String(f),e):e,c),e=",";c.push("]");break}c.push("{");d="";for(f in b)Object.prototype.hasOwnProperty.call(b,f)&&(e=b[f],"function"!=typeof e&&(c.push(d),Da(f,c),
	c.push(":"),Ca(a,a.Sd?a.Sd.call(b,f,e):e,c),d=","));c.push("}");break;case "function":break;default:throw Error("Unknown type: "+typeof b);}}var Ea={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},Fa=/\uffff/.test("\uffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g;
	function Da(a,b){b.push('"',a.replace(Fa,function(a){if(a in Ea)return Ea[a];var b=a.charCodeAt(0),e="\\u";16>b?e+="000":256>b?e+="00":4096>b&&(e+="0");return Ea[a]=e+b.toString(16)}),'"')};function Ga(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^la()).toString(36)};var Ha;a:{var Ia=aa.navigator;if(Ia){var Ja=Ia.userAgent;if(Ja){Ha=Ja;break a}}Ha=""};function Ka(){this.Va=-1};function La(){this.Va=-1;this.Va=64;this.N=[];this.me=[];this.Wf=[];this.Ld=[];this.Ld[0]=128;for(var a=1;a<this.Va;++a)this.Ld[a]=0;this.de=this.ac=0;this.reset()}ma(La,Ka);La.prototype.reset=function(){this.N[0]=1732584193;this.N[1]=4023233417;this.N[2]=2562383102;this.N[3]=271733878;this.N[4]=3285377520;this.de=this.ac=0};
	function Ma(a,b,c){c||(c=0);var d=a.Wf;if(p(b))for(var e=0;16>e;e++)d[e]=b.charCodeAt(c)<<24|b.charCodeAt(c+1)<<16|b.charCodeAt(c+2)<<8|b.charCodeAt(c+3),c+=4;else for(e=0;16>e;e++)d[e]=b[c]<<24|b[c+1]<<16|b[c+2]<<8|b[c+3],c+=4;for(e=16;80>e;e++){var f=d[e-3]^d[e-8]^d[e-14]^d[e-16];d[e]=(f<<1|f>>>31)&4294967295}b=a.N[0];c=a.N[1];for(var h=a.N[2],k=a.N[3],l=a.N[4],m,e=0;80>e;e++)40>e?20>e?(f=k^c&(h^k),m=1518500249):(f=c^h^k,m=1859775393):60>e?(f=c&h|k&(c|h),m=2400959708):(f=c^h^k,m=3395469782),f=(b<<
	5|b>>>27)+f+l+m+d[e]&4294967295,l=k,k=h,h=(c<<30|c>>>2)&4294967295,c=b,b=f;a.N[0]=a.N[0]+b&4294967295;a.N[1]=a.N[1]+c&4294967295;a.N[2]=a.N[2]+h&4294967295;a.N[3]=a.N[3]+k&4294967295;a.N[4]=a.N[4]+l&4294967295}
	La.prototype.update=function(a,b){if(null!=a){n(b)||(b=a.length);for(var c=b-this.Va,d=0,e=this.me,f=this.ac;d<b;){if(0==f)for(;d<=c;)Ma(this,a,d),d+=this.Va;if(p(a))for(;d<b;){if(e[f]=a.charCodeAt(d),++f,++d,f==this.Va){Ma(this,e);f=0;break}}else for(;d<b;)if(e[f]=a[d],++f,++d,f==this.Va){Ma(this,e);f=0;break}}this.ac=f;this.de+=b}};var u=Array.prototype,Na=u.indexOf?function(a,b,c){return u.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(p(a))return p(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},Oa=u.forEach?function(a,b,c){u.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)},Pa=u.filter?function(a,b,c){return u.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,h=p(a)?
	a.split(""):a,k=0;k<d;k++)if(k in h){var l=h[k];b.call(c,l,k,a)&&(e[f++]=l)}return e},Qa=u.map?function(a,b,c){return u.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=p(a)?a.split(""):a,h=0;h<d;h++)h in f&&(e[h]=b.call(c,f[h],h,a));return e},Ra=u.reduce?function(a,b,c,d){for(var e=[],f=1,h=arguments.length;f<h;f++)e.push(arguments[f]);d&&(e[0]=q(b,d));return u.reduce.apply(a,e)}:function(a,b,c,d){var e=c;Oa(a,function(c,h){e=b.call(d,e,c,h,a)});return e},Sa=u.every?function(a,b,
	c){return u.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};function Ta(a,b){var c=Ua(a,b,void 0);return 0>c?null:p(a)?a.charAt(c):a[c]}function Ua(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1}function Va(a,b){var c=Na(a,b);0<=c&&u.splice.call(a,c,1)}function Wa(a,b,c){return 2>=arguments.length?u.slice.call(a,b):u.slice.call(a,b,c)}
	function Xa(a,b){a.sort(b||Ya)}function Ya(a,b){return a>b?1:a<b?-1:0};var Za=-1!=Ha.indexOf("Opera")||-1!=Ha.indexOf("OPR"),$a=-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE"),ab=-1!=Ha.indexOf("Gecko")&&-1==Ha.toLowerCase().indexOf("webkit")&&!(-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE")),bb=-1!=Ha.toLowerCase().indexOf("webkit");
	(function(){var a="",b;if(Za&&aa.opera)return a=aa.opera.version,ha(a)?a():a;ab?b=/rv\:([^\);]+)(\)|;)/:$a?b=/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/:bb&&(b=/WebKit\/(\S+)/);b&&(a=(a=b.exec(Ha))?a[1]:"");return $a&&(b=(b=aa.document)?b.documentMode:void 0,b>parseFloat(a))?String(b):a})();var cb=null,db=null,eb=null;function fb(a,b){if(!fa(a))throw Error("encodeByteArray takes an array as a parameter");gb();for(var c=b?db:cb,d=[],e=0;e<a.length;e+=3){var f=a[e],h=e+1<a.length,k=h?a[e+1]:0,l=e+2<a.length,m=l?a[e+2]:0,t=f>>2,f=(f&3)<<4|k>>4,k=(k&15)<<2|m>>6,m=m&63;l||(m=64,h||(k=64));d.push(c[t],c[f],c[k],c[m])}return d.join("")}
	function gb(){if(!cb){cb={};db={};eb={};for(var a=0;65>a;a++)cb[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),db[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a),eb[db[a]]=a,62<=a&&(eb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)]=a)}};var hb=hb||"2.3.2";function v(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function w(a,b){if(Object.prototype.hasOwnProperty.call(a,b))return a[b]}function ib(a,b){for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&b(c,a[c])}function jb(a){var b={};ib(a,function(a,d){b[a]=d});return b};function kb(a){var b=[];ib(a,function(a,d){ea(d)?Oa(d,function(d){b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))}):b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))});return b.length?"&"+b.join("&"):""}function lb(a){var b={};a=a.replace(/^\?/,"").split("&");Oa(a,function(a){a&&(a=a.split("="),b[a[0]]=a[1])});return b};function x(a,b,c,d){var e;d<b?e="at least "+b:d>c&&(e=0===c?"none":"no more than "+c);if(e)throw Error(a+" failed: Was called with "+d+(1===d?" argument.":" arguments.")+" Expects "+e+".");}function y(a,b,c){var d="";switch(b){case 1:d=c?"first":"First";break;case 2:d=c?"second":"Second";break;case 3:d=c?"third":"Third";break;case 4:d=c?"fourth":"Fourth";break;default:throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?");}return a=a+" failed: "+(d+" argument ")}
	function A(a,b,c,d){if((!d||n(c))&&!ha(c))throw Error(y(a,b,d)+"must be a valid function.");}function mb(a,b,c){if(n(c)&&(!ia(c)||null===c))throw Error(y(a,b,!0)+"must be a valid context object.");};function nb(a){return"undefined"!==typeof JSON&&n(JSON.parse)?JSON.parse(a):Aa(a)}function B(a){if("undefined"!==typeof JSON&&n(JSON.stringify))a=JSON.stringify(a);else{var b=[];Ca(new Ba,a,b);a=b.join("")}return a};function ob(){this.Wd=C}ob.prototype.j=function(a){return this.Wd.Q(a)};ob.prototype.toString=function(){return this.Wd.toString()};function pb(){}pb.prototype.qf=function(){return null};pb.prototype.ye=function(){return null};var qb=new pb;function rb(a,b,c){this.Tf=a;this.Ka=b;this.Kd=c}rb.prototype.qf=function(a){var b=this.Ka.O;if(sb(b,a))return b.j().R(a);b=null!=this.Kd?new tb(this.Kd,!0,!1):this.Ka.w();return this.Tf.xc(a,b)};rb.prototype.ye=function(a,b,c){var d=null!=this.Kd?this.Kd:ub(this.Ka);a=this.Tf.ne(d,b,1,c,a);return 0===a.length?null:a[0]};function vb(){this.tb=[]}function wb(a,b){for(var c=null,d=0;d<b.length;d++){var e=b[d],f=e.Zb();null===c||f.ca(c.Zb())||(a.tb.push(c),c=null);null===c&&(c=new xb(f));c.add(e)}c&&a.tb.push(c)}function yb(a,b,c){wb(a,c);zb(a,function(a){return a.ca(b)})}function Ab(a,b,c){wb(a,c);zb(a,function(a){return a.contains(b)||b.contains(a)})}
	function zb(a,b){for(var c=!0,d=0;d<a.tb.length;d++){var e=a.tb[d];if(e)if(e=e.Zb(),b(e)){for(var e=a.tb[d],f=0;f<e.vd.length;f++){var h=e.vd[f];if(null!==h){e.vd[f]=null;var k=h.Vb();Bb&&Cb("event: "+h.toString());Db(k)}}a.tb[d]=null}else c=!1}c&&(a.tb=[])}function xb(a){this.ra=a;this.vd=[]}xb.prototype.add=function(a){this.vd.push(a)};xb.prototype.Zb=function(){return this.ra};function D(a,b,c,d){this.type=a;this.Ja=b;this.Wa=c;this.Ke=d;this.Qd=void 0}function Eb(a){return new D(Fb,a)}var Fb="value";function Gb(a,b,c,d){this.ue=b;this.Zd=c;this.Qd=d;this.ud=a}Gb.prototype.Zb=function(){var a=this.Zd.Ib();return"value"===this.ud?a.path:a.parent().path};Gb.prototype.ze=function(){return this.ud};Gb.prototype.Vb=function(){return this.ue.Vb(this)};Gb.prototype.toString=function(){return this.Zb().toString()+":"+this.ud+":"+B(this.Zd.mf())};function Hb(a,b,c){this.ue=a;this.error=b;this.path=c}Hb.prototype.Zb=function(){return this.path};Hb.prototype.ze=function(){return"cancel"};
	Hb.prototype.Vb=function(){return this.ue.Vb(this)};Hb.prototype.toString=function(){return this.path.toString()+":cancel"};function tb(a,b,c){this.A=a;this.ea=b;this.Ub=c}function Ib(a){return a.ea}function Jb(a){return a.Ub}function Kb(a,b){return b.e()?a.ea&&!a.Ub:sb(a,E(b))}function sb(a,b){return a.ea&&!a.Ub||a.A.Da(b)}tb.prototype.j=function(){return this.A};function Lb(a){this.gg=a;this.Dd=null}Lb.prototype.get=function(){var a=this.gg.get(),b=xa(a);if(this.Dd)for(var c in this.Dd)b[c]-=this.Dd[c];this.Dd=a;return b};function Mb(a,b){this.Of={};this.fd=new Lb(a);this.ba=b;var c=1E4+2E4*Math.random();setTimeout(q(this.If,this),Math.floor(c))}Mb.prototype.If=function(){var a=this.fd.get(),b={},c=!1,d;for(d in a)0<a[d]&&v(this.Of,d)&&(b[d]=a[d],c=!0);c&&this.ba.Ue(b);setTimeout(q(this.If,this),Math.floor(6E5*Math.random()))};function Nb(){this.Ec={}}function Ob(a,b,c){n(c)||(c=1);v(a.Ec,b)||(a.Ec[b]=0);a.Ec[b]+=c}Nb.prototype.get=function(){return xa(this.Ec)};var Pb={},Qb={};function Rb(a){a=a.toString();Pb[a]||(Pb[a]=new Nb);return Pb[a]}function Sb(a,b){var c=a.toString();Qb[c]||(Qb[c]=b());return Qb[c]};function F(a,b){this.name=a;this.S=b}function Tb(a,b){return new F(a,b)};function Ub(a,b){return Vb(a.name,b.name)}function Wb(a,b){return Vb(a,b)};function Xb(a,b,c){this.type=Yb;this.source=a;this.path=b;this.Ga=c}Xb.prototype.Xc=function(a){return this.path.e()?new Xb(this.source,G,this.Ga.R(a)):new Xb(this.source,H(this.path),this.Ga)};Xb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" overwrite: "+this.Ga.toString()+")"};function Zb(a,b){this.type=$b;this.source=a;this.path=b}Zb.prototype.Xc=function(){return this.path.e()?new Zb(this.source,G):new Zb(this.source,H(this.path))};Zb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" listen_complete)"};function ac(a,b){this.La=a;this.wa=b?b:bc}g=ac.prototype;g.Oa=function(a,b){return new ac(this.La,this.wa.Oa(a,b,this.La).Y(null,null,!1,null,null))};g.remove=function(a){return new ac(this.La,this.wa.remove(a,this.La).Y(null,null,!1,null,null))};g.get=function(a){for(var b,c=this.wa;!c.e();){b=this.La(a,c.key);if(0===b)return c.value;0>b?c=c.left:0<b&&(c=c.right)}return null};
	function cc(a,b){for(var c,d=a.wa,e=null;!d.e();){c=a.La(b,d.key);if(0===c){if(d.left.e())return e?e.key:null;for(d=d.left;!d.right.e();)d=d.right;return d.key}0>c?d=d.left:0<c&&(e=d,d=d.right)}throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?");}g.e=function(){return this.wa.e()};g.count=function(){return this.wa.count()};g.Sc=function(){return this.wa.Sc()};g.fc=function(){return this.wa.fc()};g.ia=function(a){return this.wa.ia(a)};
	g.Xb=function(a){return new dc(this.wa,null,this.La,!1,a)};g.Yb=function(a,b){return new dc(this.wa,a,this.La,!1,b)};g.$b=function(a,b){return new dc(this.wa,a,this.La,!0,b)};g.sf=function(a){return new dc(this.wa,null,this.La,!0,a)};function dc(a,b,c,d,e){this.Ud=e||null;this.Fe=d;this.Pa=[];for(e=1;!a.e();)if(e=b?c(a.key,b):1,d&&(e*=-1),0>e)a=this.Fe?a.left:a.right;else if(0===e){this.Pa.push(a);break}else this.Pa.push(a),a=this.Fe?a.right:a.left}
	function J(a){if(0===a.Pa.length)return null;var b=a.Pa.pop(),c;c=a.Ud?a.Ud(b.key,b.value):{key:b.key,value:b.value};if(a.Fe)for(b=b.left;!b.e();)a.Pa.push(b),b=b.right;else for(b=b.right;!b.e();)a.Pa.push(b),b=b.left;return c}function ec(a){if(0===a.Pa.length)return null;var b;b=a.Pa;b=b[b.length-1];return a.Ud?a.Ud(b.key,b.value):{key:b.key,value:b.value}}function fc(a,b,c,d,e){this.key=a;this.value=b;this.color=null!=c?c:!0;this.left=null!=d?d:bc;this.right=null!=e?e:bc}g=fc.prototype;
	g.Y=function(a,b,c,d,e){return new fc(null!=a?a:this.key,null!=b?b:this.value,null!=c?c:this.color,null!=d?d:this.left,null!=e?e:this.right)};g.count=function(){return this.left.count()+1+this.right.count()};g.e=function(){return!1};g.ia=function(a){return this.left.ia(a)||a(this.key,this.value)||this.right.ia(a)};function gc(a){return a.left.e()?a:gc(a.left)}g.Sc=function(){return gc(this).key};g.fc=function(){return this.right.e()?this.key:this.right.fc()};
	g.Oa=function(a,b,c){var d,e;e=this;d=c(a,e.key);e=0>d?e.Y(null,null,null,e.left.Oa(a,b,c),null):0===d?e.Y(null,b,null,null,null):e.Y(null,null,null,null,e.right.Oa(a,b,c));return hc(e)};function ic(a){if(a.left.e())return bc;a.left.fa()||a.left.left.fa()||(a=jc(a));a=a.Y(null,null,null,ic(a.left),null);return hc(a)}
	g.remove=function(a,b){var c,d;c=this;if(0>b(a,c.key))c.left.e()||c.left.fa()||c.left.left.fa()||(c=jc(c)),c=c.Y(null,null,null,c.left.remove(a,b),null);else{c.left.fa()&&(c=kc(c));c.right.e()||c.right.fa()||c.right.left.fa()||(c=lc(c),c.left.left.fa()&&(c=kc(c),c=lc(c)));if(0===b(a,c.key)){if(c.right.e())return bc;d=gc(c.right);c=c.Y(d.key,d.value,null,null,ic(c.right))}c=c.Y(null,null,null,null,c.right.remove(a,b))}return hc(c)};g.fa=function(){return this.color};
	function hc(a){a.right.fa()&&!a.left.fa()&&(a=mc(a));a.left.fa()&&a.left.left.fa()&&(a=kc(a));a.left.fa()&&a.right.fa()&&(a=lc(a));return a}function jc(a){a=lc(a);a.right.left.fa()&&(a=a.Y(null,null,null,null,kc(a.right)),a=mc(a),a=lc(a));return a}function mc(a){return a.right.Y(null,null,a.color,a.Y(null,null,!0,null,a.right.left),null)}function kc(a){return a.left.Y(null,null,a.color,null,a.Y(null,null,!0,a.left.right,null))}
	function lc(a){return a.Y(null,null,!a.color,a.left.Y(null,null,!a.left.color,null,null),a.right.Y(null,null,!a.right.color,null,null))}function nc(){}g=nc.prototype;g.Y=function(){return this};g.Oa=function(a,b){return new fc(a,b,null)};g.remove=function(){return this};g.count=function(){return 0};g.e=function(){return!0};g.ia=function(){return!1};g.Sc=function(){return null};g.fc=function(){return null};g.fa=function(){return!1};var bc=new nc;function oc(a,b){return a&&"object"===typeof a?(K(".sv"in a,"Unexpected leaf node or priority contents"),b[a[".sv"]]):a}function pc(a,b){var c=new qc;rc(a,new L(""),function(a,e){c.nc(a,sc(e,b))});return c}function sc(a,b){var c=a.C().I(),c=oc(c,b),d;if(a.K()){var e=oc(a.Ca(),b);return e!==a.Ca()||c!==a.C().I()?new tc(e,M(c)):a}d=a;c!==a.C().I()&&(d=d.ga(new tc(c)));a.P(N,function(a,c){var e=sc(c,b);e!==c&&(d=d.U(a,e))});return d};function uc(){this.wc={}}uc.prototype.set=function(a,b){null==b?delete this.wc[a]:this.wc[a]=b};uc.prototype.get=function(a){return v(this.wc,a)?this.wc[a]:null};uc.prototype.remove=function(a){delete this.wc[a]};uc.prototype.wf=!0;function vc(a){this.Fc=a;this.Pd="firebase:"}g=vc.prototype;g.set=function(a,b){null==b?this.Fc.removeItem(this.Pd+a):this.Fc.setItem(this.Pd+a,B(b))};g.get=function(a){a=this.Fc.getItem(this.Pd+a);return null==a?null:nb(a)};g.remove=function(a){this.Fc.removeItem(this.Pd+a)};g.wf=!1;g.toString=function(){return this.Fc.toString()};function wc(a){try{if("undefined"!==typeof window&&"undefined"!==typeof window[a]){var b=window[a];b.setItem("firebase:sentinel","cache");b.removeItem("firebase:sentinel");return new vc(b)}}catch(c){}return new uc}var xc=wc("localStorage"),yc=wc("sessionStorage");function zc(a,b,c,d,e){this.host=a.toLowerCase();this.domain=this.host.substr(this.host.indexOf(".")+1);this.kb=b;this.hc=c;this.Wg=d;this.Od=e||"";this.Ya=xc.get("host:"+a)||this.host}function Ac(a,b){b!==a.Ya&&(a.Ya=b,"s-"===a.Ya.substr(0,2)&&xc.set("host:"+a.host,a.Ya))}
	function Bc(a,b,c){K("string"===typeof b,"typeof type must == string");K("object"===typeof c,"typeof params must == object");if(b===Cc)b=(a.kb?"wss://":"ws://")+a.Ya+"/.ws?";else if(b===Dc)b=(a.kb?"https://":"http://")+a.Ya+"/.lp?";else throw Error("Unknown connection type: "+b);a.host!==a.Ya&&(c.ns=a.hc);var d=[];r(c,function(a,b){d.push(b+"="+a)});return b+d.join("&")}zc.prototype.toString=function(){var a=(this.kb?"https://":"http://")+this.host;this.Od&&(a+="<"+this.Od+">");return a};var Ec=function(){var a=1;return function(){return a++}}();function K(a,b){if(!a)throw Fc(b);}function Fc(a){return Error("Firebase ("+hb+") INTERNAL ASSERT FAILED: "+a)}
	function Gc(a){try{var b;if("undefined"!==typeof atob)b=atob(a);else{gb();for(var c=eb,d=[],e=0;e<a.length;){var f=c[a.charAt(e++)],h=e<a.length?c[a.charAt(e)]:0;++e;var k=e<a.length?c[a.charAt(e)]:64;++e;var l=e<a.length?c[a.charAt(e)]:64;++e;if(null==f||null==h||null==k||null==l)throw Error();d.push(f<<2|h>>4);64!=k&&(d.push(h<<4&240|k>>2),64!=l&&d.push(k<<6&192|l))}if(8192>d.length)b=String.fromCharCode.apply(null,d);else{a="";for(c=0;c<d.length;c+=8192)a+=String.fromCharCode.apply(null,Wa(d,c,
	c+8192));b=a}}return b}catch(m){Cb("base64Decode failed: ",m)}return null}function Hc(a){var b=Ic(a);a=new La;a.update(b);var b=[],c=8*a.de;56>a.ac?a.update(a.Ld,56-a.ac):a.update(a.Ld,a.Va-(a.ac-56));for(var d=a.Va-1;56<=d;d--)a.me[d]=c&255,c/=256;Ma(a,a.me);for(d=c=0;5>d;d++)for(var e=24;0<=e;e-=8)b[c]=a.N[d]>>e&255,++c;return fb(b)}
	function Jc(a){for(var b="",c=0;c<arguments.length;c++)b=fa(arguments[c])?b+Jc.apply(null,arguments[c]):"object"===typeof arguments[c]?b+B(arguments[c]):b+arguments[c],b+=" ";return b}var Bb=null,Kc=!0;function Cb(a){!0===Kc&&(Kc=!1,null===Bb&&!0===yc.get("logging_enabled")&&Lc(!0));if(Bb){var b=Jc.apply(null,arguments);Bb(b)}}function Mc(a){return function(){Cb(a,arguments)}}
	function Nc(a){if("undefined"!==typeof console){var b="FIREBASE INTERNAL ERROR: "+Jc.apply(null,arguments);"undefined"!==typeof console.error?console.error(b):console.log(b)}}function Oc(a){var b=Jc.apply(null,arguments);throw Error("FIREBASE FATAL ERROR: "+b);}function O(a){if("undefined"!==typeof console){var b="FIREBASE WARNING: "+Jc.apply(null,arguments);"undefined"!==typeof console.warn?console.warn(b):console.log(b)}}
	function Pc(a){var b="",c="",d="",e="",f=!0,h="https",k=443;if(p(a)){var l=a.indexOf("//");0<=l&&(h=a.substring(0,l-1),a=a.substring(l+2));l=a.indexOf("/");-1===l&&(l=a.length);b=a.substring(0,l);e="";a=a.substring(l).split("/");for(l=0;l<a.length;l++)if(0<a[l].length){var m=a[l];try{m=decodeURIComponent(m.replace(/\+/g," "))}catch(t){}e+="/"+m}a=b.split(".");3===a.length?(c=a[1],d=a[0].toLowerCase()):2===a.length&&(c=a[0]);l=b.indexOf(":");0<=l&&(f="https"===h||"wss"===h,k=b.substring(l+1),isFinite(k)&&
	(k=String(k)),k=p(k)?/^\s*-?0x/i.test(k)?parseInt(k,16):parseInt(k,10):NaN)}return{host:b,port:k,domain:c,Tg:d,kb:f,scheme:h,$c:e}}function Qc(a){return ga(a)&&(a!=a||a==Number.POSITIVE_INFINITY||a==Number.NEGATIVE_INFINITY)}
	function Rc(a){if("complete"===document.readyState)a();else{var b=!1,c=function(){document.body?b||(b=!0,a()):setTimeout(c,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",c,!1),window.addEventListener("load",c,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&c()}),window.attachEvent("onload",c))}}
	function Vb(a,b){if(a===b)return 0;if("[MIN_NAME]"===a||"[MAX_NAME]"===b)return-1;if("[MIN_NAME]"===b||"[MAX_NAME]"===a)return 1;var c=Sc(a),d=Sc(b);return null!==c?null!==d?0==c-d?a.length-b.length:c-d:-1:null!==d?1:a<b?-1:1}function Tc(a,b){if(b&&a in b)return b[a];throw Error("Missing required key ("+a+") in object: "+B(b));}
	function Uc(a){if("object"!==typeof a||null===a)return B(a);var b=[],c;for(c in a)b.push(c);b.sort();c="{";for(var d=0;d<b.length;d++)0!==d&&(c+=","),c+=B(b[d]),c+=":",c+=Uc(a[b[d]]);return c+"}"}function Vc(a,b){if(a.length<=b)return[a];for(var c=[],d=0;d<a.length;d+=b)d+b>a?c.push(a.substring(d,a.length)):c.push(a.substring(d,d+b));return c}function Wc(a,b){if(ea(a))for(var c=0;c<a.length;++c)b(c,a[c]);else r(a,b)}
	function Xc(a){K(!Qc(a),"Invalid JSON number");var b,c,d,e;0===a?(d=c=0,b=-Infinity===1/a?1:0):(b=0>a,a=Math.abs(a),a>=Math.pow(2,-1022)?(d=Math.min(Math.floor(Math.log(a)/Math.LN2),1023),c=d+1023,d=Math.round(a*Math.pow(2,52-d)-Math.pow(2,52))):(c=0,d=Math.round(a/Math.pow(2,-1074))));e=[];for(a=52;a;--a)e.push(d%2?1:0),d=Math.floor(d/2);for(a=11;a;--a)e.push(c%2?1:0),c=Math.floor(c/2);e.push(b?1:0);e.reverse();b=e.join("");c="";for(a=0;64>a;a+=8)d=parseInt(b.substr(a,8),2).toString(16),1===d.length&&
	(d="0"+d),c+=d;return c.toLowerCase()}var Yc=/^-?\d{1,10}$/;function Sc(a){return Yc.test(a)&&(a=Number(a),-2147483648<=a&&2147483647>=a)?a:null}function Db(a){try{a()}catch(b){setTimeout(function(){O("Exception was thrown by user callback.",b.stack||"");throw b;},Math.floor(0))}}function P(a,b){if(ha(a)){var c=Array.prototype.slice.call(arguments,1).slice();Db(function(){a.apply(null,c)})}};function Ic(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);55296<=e&&56319>=e&&(e-=55296,d++,K(d<a.length,"Surrogate pair missing trail surrogate."),e=65536+(e<<10)+(a.charCodeAt(d)-56320));128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(65536>e?b[c++]=e>>12|224:(b[c++]=e>>18|240,b[c++]=e>>12&63|128),b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b}function Zc(a){for(var b=0,c=0;c<a.length;c++){var d=a.charCodeAt(c);128>d?b++:2048>d?b+=2:55296<=d&&56319>=d?(b+=4,c++):b+=3}return b};function $c(a){var b={},c={},d={},e="";try{var f=a.split("."),b=nb(Gc(f[0])||""),c=nb(Gc(f[1])||""),e=f[2],d=c.d||{};delete c.d}catch(h){}return{Zg:b,Bc:c,data:d,Qg:e}}function ad(a){a=$c(a).Bc;return"object"===typeof a&&a.hasOwnProperty("iat")?w(a,"iat"):null}function bd(a){a=$c(a);var b=a.Bc;return!!a.Qg&&!!b&&"object"===typeof b&&b.hasOwnProperty("iat")};function cd(a){this.W=a;this.g=a.n.g}function dd(a,b,c,d){var e=[],f=[];Oa(b,function(b){"child_changed"===b.type&&a.g.Ad(b.Ke,b.Ja)&&f.push(new D("child_moved",b.Ja,b.Wa))});ed(a,e,"child_removed",b,d,c);ed(a,e,"child_added",b,d,c);ed(a,e,"child_moved",f,d,c);ed(a,e,"child_changed",b,d,c);ed(a,e,Fb,b,d,c);return e}function ed(a,b,c,d,e,f){d=Pa(d,function(a){return a.type===c});Xa(d,q(a.hg,a));Oa(d,function(c){var d=fd(a,c,f);Oa(e,function(e){e.Kf(c.type)&&b.push(e.createEvent(d,a.W))})})}
	function fd(a,b,c){"value"!==b.type&&"child_removed"!==b.type&&(b.Qd=c.rf(b.Wa,b.Ja,a.g));return b}cd.prototype.hg=function(a,b){if(null==a.Wa||null==b.Wa)throw Fc("Should only compare child_ events.");return this.g.compare(new F(a.Wa,a.Ja),new F(b.Wa,b.Ja))};function gd(){this.bb={}}
	function hd(a,b){var c=b.type,d=b.Wa;K("child_added"==c||"child_changed"==c||"child_removed"==c,"Only child changes supported for tracking");K(".priority"!==d,"Only non-priority child changes can be tracked.");var e=w(a.bb,d);if(e){var f=e.type;if("child_added"==c&&"child_removed"==f)a.bb[d]=new D("child_changed",b.Ja,d,e.Ja);else if("child_removed"==c&&"child_added"==f)delete a.bb[d];else if("child_removed"==c&&"child_changed"==f)a.bb[d]=new D("child_removed",e.Ke,d);else if("child_changed"==c&&
	"child_added"==f)a.bb[d]=new D("child_added",b.Ja,d);else if("child_changed"==c&&"child_changed"==f)a.bb[d]=new D("child_changed",b.Ja,d,e.Ke);else throw Fc("Illegal combination of changes: "+b+" occurred after "+e);}else a.bb[d]=b};function id(a,b,c){this.Rb=a;this.pb=b;this.rb=c||null}g=id.prototype;g.Kf=function(a){return"value"===a};g.createEvent=function(a,b){var c=b.n.g;return new Gb("value",this,new Q(a.Ja,b.Ib(),c))};g.Vb=function(a){var b=this.rb;if("cancel"===a.ze()){K(this.pb,"Raising a cancel event on a listener with no cancel callback");var c=this.pb;return function(){c.call(b,a.error)}}var d=this.Rb;return function(){d.call(b,a.Zd)}};g.gf=function(a,b){return this.pb?new Hb(this,a,b):null};
	g.matches=function(a){return a instanceof id?a.Rb&&this.Rb?a.Rb===this.Rb&&a.rb===this.rb:!0:!1};g.tf=function(){return null!==this.Rb};function jd(a,b,c){this.ha=a;this.pb=b;this.rb=c}g=jd.prototype;g.Kf=function(a){a="children_added"===a?"child_added":a;return("children_removed"===a?"child_removed":a)in this.ha};g.gf=function(a,b){return this.pb?new Hb(this,a,b):null};
	g.createEvent=function(a,b){K(null!=a.Wa,"Child events should have a childName.");var c=b.Ib().u(a.Wa);return new Gb(a.type,this,new Q(a.Ja,c,b.n.g),a.Qd)};g.Vb=function(a){var b=this.rb;if("cancel"===a.ze()){K(this.pb,"Raising a cancel event on a listener with no cancel callback");var c=this.pb;return function(){c.call(b,a.error)}}var d=this.ha[a.ud];return function(){d.call(b,a.Zd,a.Qd)}};
	g.matches=function(a){if(a instanceof jd){if(!this.ha||!a.ha)return!0;if(this.rb===a.rb){var b=pa(a.ha);if(b===pa(this.ha)){if(1===b){var b=qa(a.ha),c=qa(this.ha);return c===b&&(!a.ha[b]||!this.ha[c]||a.ha[b]===this.ha[c])}return oa(this.ha,function(b,c){return a.ha[c]===b})}}}return!1};g.tf=function(){return null!==this.ha};function kd(a){this.g=a}g=kd.prototype;g.G=function(a,b,c,d,e,f){K(a.Jc(this.g),"A node must be indexed if only a child is updated");e=a.R(b);if(e.Q(d).ca(c.Q(d))&&e.e()==c.e())return a;null!=f&&(c.e()?a.Da(b)?hd(f,new D("child_removed",e,b)):K(a.K(),"A child remove without an old child only makes sense on a leaf node"):e.e()?hd(f,new D("child_added",c,b)):hd(f,new D("child_changed",c,b,e)));return a.K()&&c.e()?a:a.U(b,c).lb(this.g)};
	g.xa=function(a,b,c){null!=c&&(a.K()||a.P(N,function(a,e){b.Da(a)||hd(c,new D("child_removed",e,a))}),b.K()||b.P(N,function(b,e){if(a.Da(b)){var f=a.R(b);f.ca(e)||hd(c,new D("child_changed",e,b,f))}else hd(c,new D("child_added",e,b))}));return b.lb(this.g)};g.ga=function(a,b){return a.e()?C:a.ga(b)};g.Na=function(){return!1};g.Wb=function(){return this};function ld(a){this.Be=new kd(a.g);this.g=a.g;var b;a.ma?(b=md(a),b=a.g.Pc(nd(a),b)):b=a.g.Tc();this.ed=b;a.pa?(b=od(a),a=a.g.Pc(pd(a),b)):a=a.g.Qc();this.Gc=a}g=ld.prototype;g.matches=function(a){return 0>=this.g.compare(this.ed,a)&&0>=this.g.compare(a,this.Gc)};g.G=function(a,b,c,d,e,f){this.matches(new F(b,c))||(c=C);return this.Be.G(a,b,c,d,e,f)};
	g.xa=function(a,b,c){b.K()&&(b=C);var d=b.lb(this.g),d=d.ga(C),e=this;b.P(N,function(a,b){e.matches(new F(a,b))||(d=d.U(a,C))});return this.Be.xa(a,d,c)};g.ga=function(a){return a};g.Na=function(){return!0};g.Wb=function(){return this.Be};function qd(a){this.sa=new ld(a);this.g=a.g;K(a.ja,"Only valid if limit has been set");this.ka=a.ka;this.Jb=!rd(a)}g=qd.prototype;g.G=function(a,b,c,d,e,f){this.sa.matches(new F(b,c))||(c=C);return a.R(b).ca(c)?a:a.Db()<this.ka?this.sa.Wb().G(a,b,c,d,e,f):sd(this,a,b,c,e,f)};
	g.xa=function(a,b,c){var d;if(b.K()||b.e())d=C.lb(this.g);else if(2*this.ka<b.Db()&&b.Jc(this.g)){d=C.lb(this.g);b=this.Jb?b.$b(this.sa.Gc,this.g):b.Yb(this.sa.ed,this.g);for(var e=0;0<b.Pa.length&&e<this.ka;){var f=J(b),h;if(h=this.Jb?0>=this.g.compare(this.sa.ed,f):0>=this.g.compare(f,this.sa.Gc))d=d.U(f.name,f.S),e++;else break}}else{d=b.lb(this.g);d=d.ga(C);var k,l,m;if(this.Jb){b=d.sf(this.g);k=this.sa.Gc;l=this.sa.ed;var t=td(this.g);m=function(a,b){return t(b,a)}}else b=d.Xb(this.g),k=this.sa.ed,
	l=this.sa.Gc,m=td(this.g);for(var e=0,z=!1;0<b.Pa.length;)f=J(b),!z&&0>=m(k,f)&&(z=!0),(h=z&&e<this.ka&&0>=m(f,l))?e++:d=d.U(f.name,C)}return this.sa.Wb().xa(a,d,c)};g.ga=function(a){return a};g.Na=function(){return!0};g.Wb=function(){return this.sa.Wb()};
	function sd(a,b,c,d,e,f){var h;if(a.Jb){var k=td(a.g);h=function(a,b){return k(b,a)}}else h=td(a.g);K(b.Db()==a.ka,"");var l=new F(c,d),m=a.Jb?ud(b,a.g):vd(b,a.g),t=a.sa.matches(l);if(b.Da(c)){for(var z=b.R(c),m=e.ye(a.g,m,a.Jb);null!=m&&(m.name==c||b.Da(m.name));)m=e.ye(a.g,m,a.Jb);e=null==m?1:h(m,l);if(t&&!d.e()&&0<=e)return null!=f&&hd(f,new D("child_changed",d,c,z)),b.U(c,d);null!=f&&hd(f,new D("child_removed",z,c));b=b.U(c,C);return null!=m&&a.sa.matches(m)?(null!=f&&hd(f,new D("child_added",
	m.S,m.name)),b.U(m.name,m.S)):b}return d.e()?b:t&&0<=h(m,l)?(null!=f&&(hd(f,new D("child_removed",m.S,m.name)),hd(f,new D("child_added",d,c))),b.U(c,d).U(m.name,C)):b};function wd(a,b){this.je=a;this.fg=b}function xd(a){this.V=a}
	xd.prototype.ab=function(a,b,c,d){var e=new gd,f;if(b.type===Yb)b.source.we?c=yd(this,a,b.path,b.Ga,c,d,e):(K(b.source.pf,"Unknown source."),f=b.source.af||Jb(a.w())&&!b.path.e(),c=Ad(this,a,b.path,b.Ga,c,d,f,e));else if(b.type===Bd)b.source.we?c=Cd(this,a,b.path,b.children,c,d,e):(K(b.source.pf,"Unknown source."),f=b.source.af||Jb(a.w()),c=Dd(this,a,b.path,b.children,c,d,f,e));else if(b.type===Ed)if(b.Vd)if(b=b.path,null!=c.tc(b))c=a;else{f=new rb(c,a,d);d=a.O.j();if(b.e()||".priority"===E(b))Ib(a.w())?
	b=c.za(ub(a)):(b=a.w().j(),K(b instanceof R,"serverChildren would be complete if leaf node"),b=c.yc(b)),b=this.V.xa(d,b,e);else{var h=E(b),k=c.xc(h,a.w());null==k&&sb(a.w(),h)&&(k=d.R(h));b=null!=k?this.V.G(d,h,k,H(b),f,e):a.O.j().Da(h)?this.V.G(d,h,C,H(b),f,e):d;b.e()&&Ib(a.w())&&(d=c.za(ub(a)),d.K()&&(b=this.V.xa(b,d,e)))}d=Ib(a.w())||null!=c.tc(G);c=Fd(a,b,d,this.V.Na())}else c=Gd(this,a,b.path,b.Qb,c,d,e);else if(b.type===$b)d=b.path,b=a.w(),f=b.j(),h=b.ea||d.e(),c=Hd(this,new Id(a.O,new tb(f,
	h,b.Ub)),d,c,qb,e);else throw Fc("Unknown operation type: "+b.type);e=ra(e.bb);d=c;b=d.O;b.ea&&(f=b.j().K()||b.j().e(),h=Jd(a),(0<e.length||!a.O.ea||f&&!b.j().ca(h)||!b.j().C().ca(h.C()))&&e.push(Eb(Jd(d))));return new wd(c,e)};
	function Hd(a,b,c,d,e,f){var h=b.O;if(null!=d.tc(c))return b;var k;if(c.e())K(Ib(b.w()),"If change path is empty, we must have complete server data"),Jb(b.w())?(e=ub(b),d=d.yc(e instanceof R?e:C)):d=d.za(ub(b)),f=a.V.xa(b.O.j(),d,f);else{var l=E(c);if(".priority"==l)K(1==Kd(c),"Can't have a priority with additional path components"),f=h.j(),k=b.w().j(),d=d.ld(c,f,k),f=null!=d?a.V.ga(f,d):h.j();else{var m=H(c);sb(h,l)?(k=b.w().j(),d=d.ld(c,h.j(),k),d=null!=d?h.j().R(l).G(m,d):h.j().R(l)):d=d.xc(l,
	b.w());f=null!=d?a.V.G(h.j(),l,d,m,e,f):h.j()}}return Fd(b,f,h.ea||c.e(),a.V.Na())}function Ad(a,b,c,d,e,f,h,k){var l=b.w();h=h?a.V:a.V.Wb();if(c.e())d=h.xa(l.j(),d,null);else if(h.Na()&&!l.Ub)d=l.j().G(c,d),d=h.xa(l.j(),d,null);else{var m=E(c);if(!Kb(l,c)&&1<Kd(c))return b;var t=H(c);d=l.j().R(m).G(t,d);d=".priority"==m?h.ga(l.j(),d):h.G(l.j(),m,d,t,qb,null)}l=l.ea||c.e();b=new Id(b.O,new tb(d,l,h.Na()));return Hd(a,b,c,e,new rb(e,b,f),k)}
	function yd(a,b,c,d,e,f,h){var k=b.O;e=new rb(e,b,f);if(c.e())h=a.V.xa(b.O.j(),d,h),a=Fd(b,h,!0,a.V.Na());else if(f=E(c),".priority"===f)h=a.V.ga(b.O.j(),d),a=Fd(b,h,k.ea,k.Ub);else{c=H(c);var l=k.j().R(f);if(!c.e()){var m=e.qf(f);d=null!=m?".priority"===Ld(c)&&m.Q(c.parent()).e()?m:m.G(c,d):C}l.ca(d)?a=b:(h=a.V.G(k.j(),f,d,c,e,h),a=Fd(b,h,k.ea,a.V.Na()))}return a}
	function Cd(a,b,c,d,e,f,h){var k=b;Md(d,function(d,m){var t=c.u(d);sb(b.O,E(t))&&(k=yd(a,k,t,m,e,f,h))});Md(d,function(d,m){var t=c.u(d);sb(b.O,E(t))||(k=yd(a,k,t,m,e,f,h))});return k}function Nd(a,b){Md(b,function(b,d){a=a.G(b,d)});return a}
	function Dd(a,b,c,d,e,f,h,k){if(b.w().j().e()&&!Ib(b.w()))return b;var l=b;c=c.e()?d:Od(Pd,c,d);var m=b.w().j();c.children.ia(function(c,d){if(m.Da(c)){var I=b.w().j().R(c),I=Nd(I,d);l=Ad(a,l,new L(c),I,e,f,h,k)}});c.children.ia(function(c,d){var I=!sb(b.w(),c)&&null==d.value;m.Da(c)||I||(I=b.w().j().R(c),I=Nd(I,d),l=Ad(a,l,new L(c),I,e,f,h,k))});return l}
	function Gd(a,b,c,d,e,f,h){if(null!=e.tc(c))return b;var k=Jb(b.w()),l=b.w();if(null!=d.value){if(c.e()&&l.ea||Kb(l,c))return Ad(a,b,c,l.j().Q(c),e,f,k,h);if(c.e()){var m=Pd;l.j().P(Qd,function(a,b){m=m.set(new L(a),b)});return Dd(a,b,c,m,e,f,k,h)}return b}m=Pd;Md(d,function(a){var b=c.u(a);Kb(l,b)&&(m=m.set(a,l.j().Q(b)))});return Dd(a,b,c,m,e,f,k,h)};function Rd(){}var Sd={};function td(a){return q(a.compare,a)}Rd.prototype.Ad=function(a,b){return 0!==this.compare(new F("[MIN_NAME]",a),new F("[MIN_NAME]",b))};Rd.prototype.Tc=function(){return Td};function Ud(a){K(!a.e()&&".priority"!==E(a),"Can't create PathIndex with empty path or .priority key");this.cc=a}ma(Ud,Rd);g=Ud.prototype;g.Ic=function(a){return!a.Q(this.cc).e()};g.compare=function(a,b){var c=a.S.Q(this.cc),d=b.S.Q(this.cc),c=c.Dc(d);return 0===c?Vb(a.name,b.name):c};
	g.Pc=function(a,b){var c=M(a),c=C.G(this.cc,c);return new F(b,c)};g.Qc=function(){var a=C.G(this.cc,Vd);return new F("[MAX_NAME]",a)};g.toString=function(){return this.cc.slice().join("/")};function Wd(){}ma(Wd,Rd);g=Wd.prototype;g.compare=function(a,b){var c=a.S.C(),d=b.S.C(),c=c.Dc(d);return 0===c?Vb(a.name,b.name):c};g.Ic=function(a){return!a.C().e()};g.Ad=function(a,b){return!a.C().ca(b.C())};g.Tc=function(){return Td};g.Qc=function(){return new F("[MAX_NAME]",new tc("[PRIORITY-POST]",Vd))};
	g.Pc=function(a,b){var c=M(a);return new F(b,new tc("[PRIORITY-POST]",c))};g.toString=function(){return".priority"};var N=new Wd;function Xd(){}ma(Xd,Rd);g=Xd.prototype;g.compare=function(a,b){return Vb(a.name,b.name)};g.Ic=function(){throw Fc("KeyIndex.isDefinedOn not expected to be called.");};g.Ad=function(){return!1};g.Tc=function(){return Td};g.Qc=function(){return new F("[MAX_NAME]",C)};g.Pc=function(a){K(p(a),"KeyIndex indexValue must always be a string.");return new F(a,C)};g.toString=function(){return".key"};
	var Qd=new Xd;function Yd(){}ma(Yd,Rd);g=Yd.prototype;g.compare=function(a,b){var c=a.S.Dc(b.S);return 0===c?Vb(a.name,b.name):c};g.Ic=function(){return!0};g.Ad=function(a,b){return!a.ca(b)};g.Tc=function(){return Td};g.Qc=function(){return Zd};g.Pc=function(a,b){var c=M(a);return new F(b,c)};g.toString=function(){return".value"};var $d=new Yd;function ae(){this.Tb=this.pa=this.Lb=this.ma=this.ja=!1;this.ka=0;this.Nb="";this.ec=null;this.xb="";this.bc=null;this.vb="";this.g=N}var be=new ae;function rd(a){return""===a.Nb?a.ma:"l"===a.Nb}function nd(a){K(a.ma,"Only valid if start has been set");return a.ec}function md(a){K(a.ma,"Only valid if start has been set");return a.Lb?a.xb:"[MIN_NAME]"}function pd(a){K(a.pa,"Only valid if end has been set");return a.bc}
	function od(a){K(a.pa,"Only valid if end has been set");return a.Tb?a.vb:"[MAX_NAME]"}function ce(a){var b=new ae;b.ja=a.ja;b.ka=a.ka;b.ma=a.ma;b.ec=a.ec;b.Lb=a.Lb;b.xb=a.xb;b.pa=a.pa;b.bc=a.bc;b.Tb=a.Tb;b.vb=a.vb;b.g=a.g;return b}g=ae.prototype;g.He=function(a){var b=ce(this);b.ja=!0;b.ka=a;b.Nb="";return b};g.Ie=function(a){var b=ce(this);b.ja=!0;b.ka=a;b.Nb="l";return b};g.Je=function(a){var b=ce(this);b.ja=!0;b.ka=a;b.Nb="r";return b};
	g.$d=function(a,b){var c=ce(this);c.ma=!0;n(a)||(a=null);c.ec=a;null!=b?(c.Lb=!0,c.xb=b):(c.Lb=!1,c.xb="");return c};g.td=function(a,b){var c=ce(this);c.pa=!0;n(a)||(a=null);c.bc=a;n(b)?(c.Tb=!0,c.vb=b):(c.ah=!1,c.vb="");return c};function de(a,b){var c=ce(a);c.g=b;return c}function ee(a){var b={};a.ma&&(b.sp=a.ec,a.Lb&&(b.sn=a.xb));a.pa&&(b.ep=a.bc,a.Tb&&(b.en=a.vb));if(a.ja){b.l=a.ka;var c=a.Nb;""===c&&(c=rd(a)?"l":"r");b.vf=c}a.g!==N&&(b.i=a.g.toString());return b}
	function S(a){return!(a.ma||a.pa||a.ja)}function fe(a){return S(a)&&a.g==N}function ge(a){var b={};if(fe(a))return b;var c;a.g===N?c="$priority":a.g===$d?c="$value":a.g===Qd?c="$key":(K(a.g instanceof Ud,"Unrecognized index type!"),c=a.g.toString());b.orderBy=B(c);a.ma&&(b.startAt=B(a.ec),a.Lb&&(b.startAt+=","+B(a.xb)));a.pa&&(b.endAt=B(a.bc),a.Tb&&(b.endAt+=","+B(a.vb)));a.ja&&(rd(a)?b.limitToFirst=a.ka:b.limitToLast=a.ka);return b}g.toString=function(){return B(ee(this))};function he(a,b){this.Bd=a;this.dc=b}he.prototype.get=function(a){var b=w(this.Bd,a);if(!b)throw Error("No index defined for "+a);return b===Sd?null:b};function ie(a,b,c){var d=na(a.Bd,function(d,f){var h=w(a.dc,f);K(h,"Missing index implementation for "+f);if(d===Sd){if(h.Ic(b.S)){for(var k=[],l=c.Xb(Tb),m=J(l);m;)m.name!=b.name&&k.push(m),m=J(l);k.push(b);return je(k,td(h))}return Sd}h=c.get(b.name);k=d;h&&(k=k.remove(new F(b.name,h)));return k.Oa(b,b.S)});return new he(d,a.dc)}
	function ke(a,b,c){var d=na(a.Bd,function(a){if(a===Sd)return a;var d=c.get(b.name);return d?a.remove(new F(b.name,d)):a});return new he(d,a.dc)}var le=new he({".priority":Sd},{".priority":N});function tc(a,b){this.B=a;K(n(this.B)&&null!==this.B,"LeafNode shouldn't be created with null/undefined value.");this.aa=b||C;me(this.aa);this.Cb=null}var ne=["object","boolean","number","string"];g=tc.prototype;g.K=function(){return!0};g.C=function(){return this.aa};g.ga=function(a){return new tc(this.B,a)};g.R=function(a){return".priority"===a?this.aa:C};g.Q=function(a){return a.e()?this:".priority"===E(a)?this.aa:C};g.Da=function(){return!1};g.rf=function(){return null};
	g.U=function(a,b){return".priority"===a?this.ga(b):b.e()&&".priority"!==a?this:C.U(a,b).ga(this.aa)};g.G=function(a,b){var c=E(a);if(null===c)return b;if(b.e()&&".priority"!==c)return this;K(".priority"!==c||1===Kd(a),".priority must be the last token in a path");return this.U(c,C.G(H(a),b))};g.e=function(){return!1};g.Db=function(){return 0};g.P=function(){return!1};g.I=function(a){return a&&!this.C().e()?{".value":this.Ca(),".priority":this.C().I()}:this.Ca()};
	g.hash=function(){if(null===this.Cb){var a="";this.aa.e()||(a+="priority:"+oe(this.aa.I())+":");var b=typeof this.B,a=a+(b+":"),a="number"===b?a+Xc(this.B):a+this.B;this.Cb=Hc(a)}return this.Cb};g.Ca=function(){return this.B};g.Dc=function(a){if(a===C)return 1;if(a instanceof R)return-1;K(a.K(),"Unknown node type");var b=typeof a.B,c=typeof this.B,d=Na(ne,b),e=Na(ne,c);K(0<=d,"Unknown leaf type: "+b);K(0<=e,"Unknown leaf type: "+c);return d===e?"object"===c?0:this.B<a.B?-1:this.B===a.B?0:1:e-d};
	g.lb=function(){return this};g.Jc=function(){return!0};g.ca=function(a){return a===this?!0:a.K()?this.B===a.B&&this.aa.ca(a.aa):!1};g.toString=function(){return B(this.I(!0))};function R(a,b,c){this.m=a;(this.aa=b)&&me(this.aa);a.e()&&K(!this.aa||this.aa.e(),"An empty node cannot have a priority");this.wb=c;this.Cb=null}g=R.prototype;g.K=function(){return!1};g.C=function(){return this.aa||C};g.ga=function(a){return this.m.e()?this:new R(this.m,a,this.wb)};g.R=function(a){if(".priority"===a)return this.C();a=this.m.get(a);return null===a?C:a};g.Q=function(a){var b=E(a);return null===b?this:this.R(b).Q(H(a))};g.Da=function(a){return null!==this.m.get(a)};
	g.U=function(a,b){K(b,"We should always be passing snapshot nodes");if(".priority"===a)return this.ga(b);var c=new F(a,b),d,e;b.e()?(d=this.m.remove(a),c=ke(this.wb,c,this.m)):(d=this.m.Oa(a,b),c=ie(this.wb,c,this.m));e=d.e()?C:this.aa;return new R(d,e,c)};g.G=function(a,b){var c=E(a);if(null===c)return b;K(".priority"!==E(a)||1===Kd(a),".priority must be the last token in a path");var d=this.R(c).G(H(a),b);return this.U(c,d)};g.e=function(){return this.m.e()};g.Db=function(){return this.m.count()};
	var pe=/^(0|[1-9]\d*)$/;g=R.prototype;g.I=function(a){if(this.e())return null;var b={},c=0,d=0,e=!0;this.P(N,function(f,h){b[f]=h.I(a);c++;e&&pe.test(f)?d=Math.max(d,Number(f)):e=!1});if(!a&&e&&d<2*c){var f=[],h;for(h in b)f[h]=b[h];return f}a&&!this.C().e()&&(b[".priority"]=this.C().I());return b};g.hash=function(){if(null===this.Cb){var a="";this.C().e()||(a+="priority:"+oe(this.C().I())+":");this.P(N,function(b,c){var d=c.hash();""!==d&&(a+=":"+b+":"+d)});this.Cb=""===a?"":Hc(a)}return this.Cb};
	g.rf=function(a,b,c){return(c=qe(this,c))?(a=cc(c,new F(a,b)))?a.name:null:cc(this.m,a)};function ud(a,b){var c;c=(c=qe(a,b))?(c=c.Sc())&&c.name:a.m.Sc();return c?new F(c,a.m.get(c)):null}function vd(a,b){var c;c=(c=qe(a,b))?(c=c.fc())&&c.name:a.m.fc();return c?new F(c,a.m.get(c)):null}g.P=function(a,b){var c=qe(this,a);return c?c.ia(function(a){return b(a.name,a.S)}):this.m.ia(b)};g.Xb=function(a){return this.Yb(a.Tc(),a)};
	g.Yb=function(a,b){var c=qe(this,b);if(c)return c.Yb(a,function(a){return a});for(var c=this.m.Yb(a.name,Tb),d=ec(c);null!=d&&0>b.compare(d,a);)J(c),d=ec(c);return c};g.sf=function(a){return this.$b(a.Qc(),a)};g.$b=function(a,b){var c=qe(this,b);if(c)return c.$b(a,function(a){return a});for(var c=this.m.$b(a.name,Tb),d=ec(c);null!=d&&0<b.compare(d,a);)J(c),d=ec(c);return c};g.Dc=function(a){return this.e()?a.e()?0:-1:a.K()||a.e()?1:a===Vd?-1:0};
	g.lb=function(a){if(a===Qd||ta(this.wb.dc,a.toString()))return this;var b=this.wb,c=this.m;K(a!==Qd,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var d=[],e=!1,c=c.Xb(Tb),f=J(c);f;)e=e||a.Ic(f.S),d.push(f),f=J(c);d=e?je(d,td(a)):Sd;e=a.toString();c=xa(b.dc);c[e]=a;a=xa(b.Bd);a[e]=d;return new R(this.m,this.aa,new he(a,c))};g.Jc=function(a){return a===Qd||ta(this.wb.dc,a.toString())};
	g.ca=function(a){if(a===this)return!0;if(a.K())return!1;if(this.C().ca(a.C())&&this.m.count()===a.m.count()){var b=this.Xb(N);a=a.Xb(N);for(var c=J(b),d=J(a);c&&d;){if(c.name!==d.name||!c.S.ca(d.S))return!1;c=J(b);d=J(a)}return null===c&&null===d}return!1};function qe(a,b){return b===Qd?null:a.wb.get(b.toString())}g.toString=function(){return B(this.I(!0))};function M(a,b){if(null===a)return C;var c=null;"object"===typeof a&&".priority"in a?c=a[".priority"]:"undefined"!==typeof b&&(c=b);K(null===c||"string"===typeof c||"number"===typeof c||"object"===typeof c&&".sv"in c,"Invalid priority type found: "+typeof c);"object"===typeof a&&".value"in a&&null!==a[".value"]&&(a=a[".value"]);if("object"!==typeof a||".sv"in a)return new tc(a,M(c));if(a instanceof Array){var d=C,e=a;r(e,function(a,b){if(v(e,b)&&"."!==b.substring(0,1)){var c=M(a);if(c.K()||!c.e())d=
	d.U(b,c)}});return d.ga(M(c))}var f=[],h=!1,k=a;ib(k,function(a){if("string"!==typeof a||"."!==a.substring(0,1)){var b=M(k[a]);b.e()||(h=h||!b.C().e(),f.push(new F(a,b)))}});if(0==f.length)return C;var l=je(f,Ub,function(a){return a.name},Wb);if(h){var m=je(f,td(N));return new R(l,M(c),new he({".priority":m},{".priority":N}))}return new R(l,M(c),le)}var re=Math.log(2);
	function se(a){this.count=parseInt(Math.log(a+1)/re,10);this.jf=this.count-1;this.eg=a+1&parseInt(Array(this.count+1).join("1"),2)}function te(a){var b=!(a.eg&1<<a.jf);a.jf--;return b}
	function je(a,b,c,d){function e(b,d){var f=d-b;if(0==f)return null;if(1==f){var m=a[b],t=c?c(m):m;return new fc(t,m.S,!1,null,null)}var m=parseInt(f/2,10)+b,f=e(b,m),z=e(m+1,d),m=a[m],t=c?c(m):m;return new fc(t,m.S,!1,f,z)}a.sort(b);var f=function(b){function d(b,h){var k=t-b,z=t;t-=b;var z=e(k+1,z),k=a[k],I=c?c(k):k,z=new fc(I,k.S,h,null,z);f?f.left=z:m=z;f=z}for(var f=null,m=null,t=a.length,z=0;z<b.count;++z){var I=te(b),zd=Math.pow(2,b.count-(z+1));I?d(zd,!1):(d(zd,!1),d(zd,!0))}return m}(new se(a.length));
	return null!==f?new ac(d||b,f):new ac(d||b)}function oe(a){return"number"===typeof a?"number:"+Xc(a):"string:"+a}function me(a){if(a.K()){var b=a.I();K("string"===typeof b||"number"===typeof b||"object"===typeof b&&v(b,".sv"),"Priority must be a string or number.")}else K(a===Vd||a.e(),"priority of unexpected type.");K(a===Vd||a.C().e(),"Priority nodes can't have a priority of their own.")}var C=new R(new ac(Wb),null,le);function ue(){R.call(this,new ac(Wb),C,le)}ma(ue,R);g=ue.prototype;
	g.Dc=function(a){return a===this?0:1};g.ca=function(a){return a===this};g.C=function(){return this};g.R=function(){return C};g.e=function(){return!1};var Vd=new ue,Td=new F("[MIN_NAME]",C),Zd=new F("[MAX_NAME]",Vd);function Id(a,b){this.O=a;this.Yd=b}function Fd(a,b,c,d){return new Id(new tb(b,c,d),a.Yd)}function Jd(a){return a.O.ea?a.O.j():null}Id.prototype.w=function(){return this.Yd};function ub(a){return a.Yd.ea?a.Yd.j():null};function ve(a,b){this.W=a;var c=a.n,d=new kd(c.g),c=S(c)?new kd(c.g):c.ja?new qd(c):new ld(c);this.Hf=new xd(c);var e=b.w(),f=b.O,h=d.xa(C,e.j(),null),k=c.xa(C,f.j(),null);this.Ka=new Id(new tb(k,f.ea,c.Na()),new tb(h,e.ea,d.Na()));this.Xa=[];this.lg=new cd(a)}function we(a){return a.W}g=ve.prototype;g.w=function(){return this.Ka.w().j()};g.fb=function(a){var b=ub(this.Ka);return b&&(S(this.W.n)||!a.e()&&!b.R(E(a)).e())?b.Q(a):null};g.e=function(){return 0===this.Xa.length};g.Pb=function(a){this.Xa.push(a)};
	g.jb=function(a,b){var c=[];if(b){K(null==a,"A cancel should cancel all event registrations.");var d=this.W.path;Oa(this.Xa,function(a){(a=a.gf(b,d))&&c.push(a)})}if(a){for(var e=[],f=0;f<this.Xa.length;++f){var h=this.Xa[f];if(!h.matches(a))e.push(h);else if(a.tf()){e=e.concat(this.Xa.slice(f+1));break}}this.Xa=e}else this.Xa=[];return c};
	g.ab=function(a,b,c){a.type===Bd&&null!==a.source.Hb&&(K(ub(this.Ka),"We should always have a full cache before handling merges"),K(Jd(this.Ka),"Missing event cache, even though we have a server cache"));var d=this.Ka;a=this.Hf.ab(d,a,b,c);b=this.Hf;c=a.je;K(c.O.j().Jc(b.V.g),"Event snap not indexed");K(c.w().j().Jc(b.V.g),"Server snap not indexed");K(Ib(a.je.w())||!Ib(d.w()),"Once a server snap is complete, it should never go back");this.Ka=a.je;return xe(this,a.fg,a.je.O.j(),null)};
	function ye(a,b){var c=a.Ka.O,d=[];c.j().K()||c.j().P(N,function(a,b){d.push(new D("child_added",b,a))});c.ea&&d.push(Eb(c.j()));return xe(a,d,c.j(),b)}function xe(a,b,c,d){return dd(a.lg,b,c,d?[d]:a.Xa)};function ze(a,b,c){this.type=Bd;this.source=a;this.path=b;this.children=c}ze.prototype.Xc=function(a){if(this.path.e())return a=this.children.subtree(new L(a)),a.e()?null:a.value?new Xb(this.source,G,a.value):new ze(this.source,G,a);K(E(this.path)===a,"Can't get a merge for a child not on the path of the operation");return new ze(this.source,H(this.path),this.children)};ze.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"};function Ae(a,b){this.f=Mc("p:rest:");this.F=a;this.Gb=b;this.Aa=null;this.$={}}function Be(a,b){if(n(b))return"tag$"+b;K(fe(a.n),"should have a tag if it's not a default query.");return a.path.toString()}g=Ae.prototype;
	g.yf=function(a,b,c,d){var e=a.path.toString();this.f("Listen called for "+e+" "+a.va());var f=Be(a,c),h={};this.$[f]=h;a=ge(a.n);var k=this;Ce(this,e+".json",a,function(a,b){var t=b;404===a&&(a=t=null);null===a&&k.Gb(e,t,!1,c);w(k.$,f)===h&&d(a?401==a?"permission_denied":"rest_error:"+a:"ok",null)})};g.Rf=function(a,b){var c=Be(a,b);delete this.$[c]};g.M=function(a,b){this.Aa=a;var c=$c(a),d=c.data,c=c.Bc&&c.Bc.exp;b&&b("ok",{auth:d,expires:c})};g.ge=function(a){this.Aa=null;a("ok",null)};g.Me=function(){};
	g.Cf=function(){};g.Jd=function(){};g.put=function(){};g.zf=function(){};g.Ue=function(){};
	function Ce(a,b,c,d){c=c||{};c.format="export";a.Aa&&(c.auth=a.Aa);var e=(a.F.kb?"https://":"http://")+a.F.host+b+"?"+kb(c);a.f("Sending REST request for "+e);var f=new XMLHttpRequest;f.onreadystatechange=function(){if(d&&4===f.readyState){a.f("REST Response for "+e+" received. status:",f.status,"response:",f.responseText);var b=null;if(200<=f.status&&300>f.status){try{b=nb(f.responseText)}catch(c){O("Failed to parse JSON response for "+e+": "+f.responseText)}d(null,b)}else 401!==f.status&&404!==
	f.status&&O("Got unsuccessful REST response for "+e+" Status: "+f.status),d(f.status);d=null}};f.open("GET",e,!0);f.send()};function De(a){K(ea(a)&&0<a.length,"Requires a non-empty array");this.Xf=a;this.Oc={}}De.prototype.fe=function(a,b){var c;c=this.Oc[a]||[];var d=c.length;if(0<d){for(var e=Array(d),f=0;f<d;f++)e[f]=c[f];c=e}else c=[];for(d=0;d<c.length;d++)c[d].zc.apply(c[d].Ma,Array.prototype.slice.call(arguments,1))};De.prototype.Eb=function(a,b,c){Ee(this,a);this.Oc[a]=this.Oc[a]||[];this.Oc[a].push({zc:b,Ma:c});(a=this.Ae(a))&&b.apply(c,a)};
	De.prototype.ic=function(a,b,c){Ee(this,a);a=this.Oc[a]||[];for(var d=0;d<a.length;d++)if(a[d].zc===b&&(!c||c===a[d].Ma)){a.splice(d,1);break}};function Ee(a,b){K(Ta(a.Xf,function(a){return a===b}),"Unknown event: "+b)};var Fe=function(){var a=0,b=[];return function(c){var d=c===a;a=c;for(var e=Array(8),f=7;0<=f;f--)e[f]="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(c%64),c=Math.floor(c/64);K(0===c,"Cannot push at time == 0");c=e.join("");if(d){for(f=11;0<=f&&63===b[f];f--)b[f]=0;b[f]++}else for(f=0;12>f;f++)b[f]=Math.floor(64*Math.random());for(f=0;12>f;f++)c+="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(b[f]);K(20===c.length,"nextPushId: Length should be 20.");
	return c}}();function Ge(){De.call(this,["online"]);this.kc=!0;if("undefined"!==typeof window&&"undefined"!==typeof window.addEventListener){var a=this;window.addEventListener("online",function(){a.kc||(a.kc=!0,a.fe("online",!0))},!1);window.addEventListener("offline",function(){a.kc&&(a.kc=!1,a.fe("online",!1))},!1)}}ma(Ge,De);Ge.prototype.Ae=function(a){K("online"===a,"Unknown event type: "+a);return[this.kc]};ca(Ge);function He(){De.call(this,["visible"]);var a,b;"undefined"!==typeof document&&"undefined"!==typeof document.addEventListener&&("undefined"!==typeof document.hidden?(b="visibilitychange",a="hidden"):"undefined"!==typeof document.mozHidden?(b="mozvisibilitychange",a="mozHidden"):"undefined"!==typeof document.msHidden?(b="msvisibilitychange",a="msHidden"):"undefined"!==typeof document.webkitHidden&&(b="webkitvisibilitychange",a="webkitHidden"));this.Ob=!0;if(b){var c=this;document.addEventListener(b,
	function(){var b=!document[a];b!==c.Ob&&(c.Ob=b,c.fe("visible",b))},!1)}}ma(He,De);He.prototype.Ae=function(a){K("visible"===a,"Unknown event type: "+a);return[this.Ob]};ca(He);function L(a,b){if(1==arguments.length){this.o=a.split("/");for(var c=0,d=0;d<this.o.length;d++)0<this.o[d].length&&(this.o[c]=this.o[d],c++);this.o.length=c;this.Z=0}else this.o=a,this.Z=b}function T(a,b){var c=E(a);if(null===c)return b;if(c===E(b))return T(H(a),H(b));throw Error("INTERNAL ERROR: innerPath ("+b+") is not within outerPath ("+a+")");}
	function Ie(a,b){for(var c=a.slice(),d=b.slice(),e=0;e<c.length&&e<d.length;e++){var f=Vb(c[e],d[e]);if(0!==f)return f}return c.length===d.length?0:c.length<d.length?-1:1}function E(a){return a.Z>=a.o.length?null:a.o[a.Z]}function Kd(a){return a.o.length-a.Z}function H(a){var b=a.Z;b<a.o.length&&b++;return new L(a.o,b)}function Ld(a){return a.Z<a.o.length?a.o[a.o.length-1]:null}g=L.prototype;
	g.toString=function(){for(var a="",b=this.Z;b<this.o.length;b++)""!==this.o[b]&&(a+="/"+this.o[b]);return a||"/"};g.slice=function(a){return this.o.slice(this.Z+(a||0))};g.parent=function(){if(this.Z>=this.o.length)return null;for(var a=[],b=this.Z;b<this.o.length-1;b++)a.push(this.o[b]);return new L(a,0)};
	g.u=function(a){for(var b=[],c=this.Z;c<this.o.length;c++)b.push(this.o[c]);if(a instanceof L)for(c=a.Z;c<a.o.length;c++)b.push(a.o[c]);else for(a=a.split("/"),c=0;c<a.length;c++)0<a[c].length&&b.push(a[c]);return new L(b,0)};g.e=function(){return this.Z>=this.o.length};g.ca=function(a){if(Kd(this)!==Kd(a))return!1;for(var b=this.Z,c=a.Z;b<=this.o.length;b++,c++)if(this.o[b]!==a.o[c])return!1;return!0};
	g.contains=function(a){var b=this.Z,c=a.Z;if(Kd(this)>Kd(a))return!1;for(;b<this.o.length;){if(this.o[b]!==a.o[c])return!1;++b;++c}return!0};var G=new L("");function Je(a,b){this.Qa=a.slice();this.Ha=Math.max(1,this.Qa.length);this.lf=b;for(var c=0;c<this.Qa.length;c++)this.Ha+=Zc(this.Qa[c]);Ke(this)}Je.prototype.push=function(a){0<this.Qa.length&&(this.Ha+=1);this.Qa.push(a);this.Ha+=Zc(a);Ke(this)};Je.prototype.pop=function(){var a=this.Qa.pop();this.Ha-=Zc(a);0<this.Qa.length&&--this.Ha};
	function Ke(a){if(768<a.Ha)throw Error(a.lf+"has a key path longer than 768 bytes ("+a.Ha+").");if(32<a.Qa.length)throw Error(a.lf+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Le(a));}function Le(a){return 0==a.Qa.length?"":"in property '"+a.Qa.join(".")+"'"};function Me(a,b){this.value=a;this.children=b||Ne}var Ne=new ac(function(a,b){return a===b?0:a<b?-1:1});function Oe(a){var b=Pd;r(a,function(a,d){b=b.set(new L(d),a)});return b}g=Me.prototype;g.e=function(){return null===this.value&&this.children.e()};function Pe(a,b,c){if(null!=a.value&&c(a.value))return{path:G,value:a.value};if(b.e())return null;var d=E(b);a=a.children.get(d);return null!==a?(b=Pe(a,H(b),c),null!=b?{path:(new L(d)).u(b.path),value:b.value}:null):null}
	function Qe(a,b){return Pe(a,b,function(){return!0})}g.subtree=function(a){if(a.e())return this;var b=this.children.get(E(a));return null!==b?b.subtree(H(a)):Pd};g.set=function(a,b){if(a.e())return new Me(b,this.children);var c=E(a),d=(this.children.get(c)||Pd).set(H(a),b),c=this.children.Oa(c,d);return new Me(this.value,c)};
	g.remove=function(a){if(a.e())return this.children.e()?Pd:new Me(null,this.children);var b=E(a),c=this.children.get(b);return c?(a=c.remove(H(a)),b=a.e()?this.children.remove(b):this.children.Oa(b,a),null===this.value&&b.e()?Pd:new Me(this.value,b)):this};g.get=function(a){if(a.e())return this.value;var b=this.children.get(E(a));return b?b.get(H(a)):null};
	function Od(a,b,c){if(b.e())return c;var d=E(b);b=Od(a.children.get(d)||Pd,H(b),c);d=b.e()?a.children.remove(d):a.children.Oa(d,b);return new Me(a.value,d)}function Re(a,b){return Se(a,G,b)}function Se(a,b,c){var d={};a.children.ia(function(a,f){d[a]=Se(f,b.u(a),c)});return c(b,a.value,d)}function Te(a,b,c){return Ue(a,b,G,c)}function Ue(a,b,c,d){var e=a.value?d(c,a.value):!1;if(e)return e;if(b.e())return null;e=E(b);return(a=a.children.get(e))?Ue(a,H(b),c.u(e),d):null}
	function Ve(a,b,c){We(a,b,G,c)}function We(a,b,c,d){if(b.e())return a;a.value&&d(c,a.value);var e=E(b);return(a=a.children.get(e))?We(a,H(b),c.u(e),d):Pd}function Md(a,b){Xe(a,G,b)}function Xe(a,b,c){a.children.ia(function(a,e){Xe(e,b.u(a),c)});a.value&&c(b,a.value)}function Ye(a,b){a.children.ia(function(a,d){d.value&&b(a,d.value)})}var Pd=new Me(null);Me.prototype.toString=function(){var a={};Md(this,function(b,c){a[b.toString()]=c.toString()});return B(a)};function Ze(a,b,c){this.type=Ed;this.source=$e;this.path=a;this.Qb=b;this.Vd=c}Ze.prototype.Xc=function(a){if(this.path.e()){if(null!=this.Qb.value)return K(this.Qb.children.e(),"affectedTree should not have overlapping affected paths."),this;a=this.Qb.subtree(new L(a));return new Ze(G,a,this.Vd)}K(E(this.path)===a,"operationForChild called for unrelated child.");return new Ze(H(this.path),this.Qb,this.Vd)};
	Ze.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" ack write revert="+this.Vd+" affectedTree="+this.Qb+")"};var Yb=0,Bd=1,Ed=2,$b=3;function af(a,b,c,d){this.we=a;this.pf=b;this.Hb=c;this.af=d;K(!d||b,"Tagged queries must be from server.")}var $e=new af(!0,!1,null,!1),bf=new af(!1,!0,null,!1);af.prototype.toString=function(){return this.we?"user":this.af?"server(queryID="+this.Hb+")":"server"};function cf(a){this.X=a}var df=new cf(new Me(null));function ef(a,b,c){if(b.e())return new cf(new Me(c));var d=Qe(a.X,b);if(null!=d){var e=d.path,d=d.value;b=T(e,b);d=d.G(b,c);return new cf(a.X.set(e,d))}a=Od(a.X,b,new Me(c));return new cf(a)}function ff(a,b,c){var d=a;ib(c,function(a,c){d=ef(d,b.u(a),c)});return d}cf.prototype.Rd=function(a){if(a.e())return df;a=Od(this.X,a,Pd);return new cf(a)};function gf(a,b){var c=Qe(a.X,b);return null!=c?a.X.get(c.path).Q(T(c.path,b)):null}
	function hf(a){var b=[],c=a.X.value;null!=c?c.K()||c.P(N,function(a,c){b.push(new F(a,c))}):a.X.children.ia(function(a,c){null!=c.value&&b.push(new F(a,c.value))});return b}function jf(a,b){if(b.e())return a;var c=gf(a,b);return null!=c?new cf(new Me(c)):new cf(a.X.subtree(b))}cf.prototype.e=function(){return this.X.e()};cf.prototype.apply=function(a){return kf(G,this.X,a)};
	function kf(a,b,c){if(null!=b.value)return c.G(a,b.value);var d=null;b.children.ia(function(b,f){".priority"===b?(K(null!==f.value,"Priority writes must always be leaf nodes"),d=f.value):c=kf(a.u(b),f,c)});c.Q(a).e()||null===d||(c=c.G(a.u(".priority"),d));return c};function lf(){this.T=df;this.na=[];this.Mc=-1}function mf(a,b){for(var c=0;c<a.na.length;c++){var d=a.na[c];if(d.kd===b)return d}return null}g=lf.prototype;
	g.Rd=function(a){var b=Ua(this.na,function(b){return b.kd===a});K(0<=b,"removeWrite called with nonexistent writeId.");var c=this.na[b];this.na.splice(b,1);for(var d=c.visible,e=!1,f=this.na.length-1;d&&0<=f;){var h=this.na[f];h.visible&&(f>=b&&nf(h,c.path)?d=!1:c.path.contains(h.path)&&(e=!0));f--}if(d){if(e)this.T=of(this.na,pf,G),this.Mc=0<this.na.length?this.na[this.na.length-1].kd:-1;else if(c.Ga)this.T=this.T.Rd(c.path);else{var k=this;r(c.children,function(a,b){k.T=k.T.Rd(c.path.u(b))})}return!0}return!1};
	g.za=function(a,b,c,d){if(c||d){var e=jf(this.T,a);return!d&&e.e()?b:d||null!=b||null!=gf(e,G)?(e=of(this.na,function(b){return(b.visible||d)&&(!c||!(0<=Na(c,b.kd)))&&(b.path.contains(a)||a.contains(b.path))},a),b=b||C,e.apply(b)):null}e=gf(this.T,a);if(null!=e)return e;e=jf(this.T,a);return e.e()?b:null!=b||null!=gf(e,G)?(b=b||C,e.apply(b)):null};
	g.yc=function(a,b){var c=C,d=gf(this.T,a);if(d)d.K()||d.P(N,function(a,b){c=c.U(a,b)});else if(b){var e=jf(this.T,a);b.P(N,function(a,b){var d=jf(e,new L(a)).apply(b);c=c.U(a,d)});Oa(hf(e),function(a){c=c.U(a.name,a.S)})}else e=jf(this.T,a),Oa(hf(e),function(a){c=c.U(a.name,a.S)});return c};g.ld=function(a,b,c,d){K(c||d,"Either existingEventSnap or existingServerSnap must exist");a=a.u(b);if(null!=gf(this.T,a))return null;a=jf(this.T,a);return a.e()?d.Q(b):a.apply(d.Q(b))};
	g.xc=function(a,b,c){a=a.u(b);var d=gf(this.T,a);return null!=d?d:sb(c,b)?jf(this.T,a).apply(c.j().R(b)):null};g.tc=function(a){return gf(this.T,a)};g.ne=function(a,b,c,d,e,f){var h;a=jf(this.T,a);h=gf(a,G);if(null==h)if(null!=b)h=a.apply(b);else return[];h=h.lb(f);if(h.e()||h.K())return[];b=[];a=td(f);e=e?h.$b(c,f):h.Yb(c,f);for(f=J(e);f&&b.length<d;)0!==a(f,c)&&b.push(f),f=J(e);return b};
	function nf(a,b){return a.Ga?a.path.contains(b):!!ua(a.children,function(c,d){return a.path.u(d).contains(b)})}function pf(a){return a.visible}
	function of(a,b,c){for(var d=df,e=0;e<a.length;++e){var f=a[e];if(b(f)){var h=f.path;if(f.Ga)c.contains(h)?(h=T(c,h),d=ef(d,h,f.Ga)):h.contains(c)&&(h=T(h,c),d=ef(d,G,f.Ga.Q(h)));else if(f.children)if(c.contains(h))h=T(c,h),d=ff(d,h,f.children);else{if(h.contains(c))if(h=T(h,c),h.e())d=ff(d,G,f.children);else if(f=w(f.children,E(h)))f=f.Q(H(h)),d=ef(d,G,f)}else throw Fc("WriteRecord should have .snap or .children");}}return d}function qf(a,b){this.Mb=a;this.X=b}g=qf.prototype;
	g.za=function(a,b,c){return this.X.za(this.Mb,a,b,c)};g.yc=function(a){return this.X.yc(this.Mb,a)};g.ld=function(a,b,c){return this.X.ld(this.Mb,a,b,c)};g.tc=function(a){return this.X.tc(this.Mb.u(a))};g.ne=function(a,b,c,d,e){return this.X.ne(this.Mb,a,b,c,d,e)};g.xc=function(a,b){return this.X.xc(this.Mb,a,b)};g.u=function(a){return new qf(this.Mb.u(a),this.X)};function rf(){this.ya={}}g=rf.prototype;g.e=function(){return wa(this.ya)};g.ab=function(a,b,c){var d=a.source.Hb;if(null!==d)return d=w(this.ya,d),K(null!=d,"SyncTree gave us an op for an invalid query."),d.ab(a,b,c);var e=[];r(this.ya,function(d){e=e.concat(d.ab(a,b,c))});return e};g.Pb=function(a,b,c,d,e){var f=a.va(),h=w(this.ya,f);if(!h){var h=c.za(e?d:null),k=!1;h?k=!0:(h=d instanceof R?c.yc(d):C,k=!1);h=new ve(a,new Id(new tb(h,k,!1),new tb(d,e,!1)));this.ya[f]=h}h.Pb(b);return ye(h,b)};
	g.jb=function(a,b,c){var d=a.va(),e=[],f=[],h=null!=sf(this);if("default"===d){var k=this;r(this.ya,function(a,d){f=f.concat(a.jb(b,c));a.e()&&(delete k.ya[d],S(a.W.n)||e.push(a.W))})}else{var l=w(this.ya,d);l&&(f=f.concat(l.jb(b,c)),l.e()&&(delete this.ya[d],S(l.W.n)||e.push(l.W)))}h&&null==sf(this)&&e.push(new U(a.k,a.path));return{Kg:e,mg:f}};function tf(a){return Pa(ra(a.ya),function(a){return!S(a.W.n)})}g.fb=function(a){var b=null;r(this.ya,function(c){b=b||c.fb(a)});return b};
	function uf(a,b){if(S(b.n))return sf(a);var c=b.va();return w(a.ya,c)}function sf(a){return va(a.ya,function(a){return S(a.W.n)})||null};function vf(a){this.ta=Pd;this.ib=new lf;this.$e={};this.mc={};this.Nc=a}function wf(a,b,c,d,e){var f=a.ib,h=e;K(d>f.Mc,"Stacking an older write on top of newer ones");n(h)||(h=!0);f.na.push({path:b,Ga:c,kd:d,visible:h});h&&(f.T=ef(f.T,b,c));f.Mc=d;return e?xf(a,new Xb($e,b,c)):[]}function yf(a,b,c,d){var e=a.ib;K(d>e.Mc,"Stacking an older merge on top of newer ones");e.na.push({path:b,children:c,kd:d,visible:!0});e.T=ff(e.T,b,c);e.Mc=d;c=Oe(c);return xf(a,new ze($e,b,c))}
	function zf(a,b,c){c=c||!1;var d=mf(a.ib,b);if(a.ib.Rd(b)){var e=Pd;null!=d.Ga?e=e.set(G,!0):ib(d.children,function(a,b){e=e.set(new L(a),b)});return xf(a,new Ze(d.path,e,c))}return[]}function Af(a,b,c){c=Oe(c);return xf(a,new ze(bf,b,c))}function Bf(a,b,c,d){d=Cf(a,d);if(null!=d){var e=Df(d);d=e.path;e=e.Hb;b=T(d,b);c=new Xb(new af(!1,!0,e,!0),b,c);return Ef(a,d,c)}return[]}
	function Ff(a,b,c,d){if(d=Cf(a,d)){var e=Df(d);d=e.path;e=e.Hb;b=T(d,b);c=Oe(c);c=new ze(new af(!1,!0,e,!0),b,c);return Ef(a,d,c)}return[]}
	vf.prototype.Pb=function(a,b){var c=a.path,d=null,e=!1;Ve(this.ta,c,function(a,b){var f=T(a,c);d=d||b.fb(f);e=e||null!=sf(b)});var f=this.ta.get(c);f?(e=e||null!=sf(f),d=d||f.fb(G)):(f=new rf,this.ta=this.ta.set(c,f));var h;null!=d?h=!0:(h=!1,d=C,Ye(this.ta.subtree(c),function(a,b){var c=b.fb(G);c&&(d=d.U(a,c))}));var k=null!=uf(f,a);if(!k&&!S(a.n)){var l=Gf(a);K(!(l in this.mc),"View does not exist, but we have a tag");var m=Hf++;this.mc[l]=m;this.$e["_"+m]=l}h=f.Pb(a,b,new qf(c,this.ib),d,h);k||
	e||(f=uf(f,a),h=h.concat(If(this,a,f)));return h};
	vf.prototype.jb=function(a,b,c){var d=a.path,e=this.ta.get(d),f=[];if(e&&("default"===a.va()||null!=uf(e,a))){f=e.jb(a,b,c);e.e()&&(this.ta=this.ta.remove(d));e=f.Kg;f=f.mg;b=-1!==Ua(e,function(a){return S(a.n)});var h=Te(this.ta,d,function(a,b){return null!=sf(b)});if(b&&!h&&(d=this.ta.subtree(d),!d.e()))for(var d=Jf(d),k=0;k<d.length;++k){var l=d[k],m=l.W,l=Kf(this,l);this.Nc.Xe(Lf(m),Mf(this,m),l.xd,l.H)}if(!h&&0<e.length&&!c)if(b)this.Nc.ae(Lf(a),null);else{var t=this;Oa(e,function(a){a.va();
	var b=t.mc[Gf(a)];t.Nc.ae(Lf(a),b)})}Nf(this,e)}return f};vf.prototype.za=function(a,b){var c=this.ib,d=Te(this.ta,a,function(b,c){var d=T(b,a);if(d=c.fb(d))return d});return c.za(a,d,b,!0)};function Jf(a){return Re(a,function(a,c,d){if(c&&null!=sf(c))return[sf(c)];var e=[];c&&(e=tf(c));r(d,function(a){e=e.concat(a)});return e})}function Nf(a,b){for(var c=0;c<b.length;++c){var d=b[c];if(!S(d.n)){var d=Gf(d),e=a.mc[d];delete a.mc[d];delete a.$e["_"+e]}}}
	function Lf(a){return S(a.n)&&!fe(a.n)?a.Ib():a}function If(a,b,c){var d=b.path,e=Mf(a,b);c=Kf(a,c);b=a.Nc.Xe(Lf(b),e,c.xd,c.H);d=a.ta.subtree(d);if(e)K(null==sf(d.value),"If we're adding a query, it shouldn't be shadowed");else for(e=Re(d,function(a,b,c){if(!a.e()&&b&&null!=sf(b))return[we(sf(b))];var d=[];b&&(d=d.concat(Qa(tf(b),function(a){return a.W})));r(c,function(a){d=d.concat(a)});return d}),d=0;d<e.length;++d)c=e[d],a.Nc.ae(Lf(c),Mf(a,c));return b}
	function Kf(a,b){var c=b.W,d=Mf(a,c);return{xd:function(){return(b.w()||C).hash()},H:function(b){if("ok"===b){if(d){var f=c.path;if(b=Cf(a,d)){var h=Df(b);b=h.path;h=h.Hb;f=T(b,f);f=new Zb(new af(!1,!0,h,!0),f);b=Ef(a,b,f)}else b=[]}else b=xf(a,new Zb(bf,c.path));return b}f="Unknown Error";"too_big"===b?f="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==b?f="Client doesn't have permission to access the desired data.":"unavailable"==b&&
	(f="The service is unavailable");f=Error(b+": "+f);f.code=b.toUpperCase();return a.jb(c,null,f)}}}function Gf(a){return a.path.toString()+"$"+a.va()}function Df(a){var b=a.indexOf("$");K(-1!==b&&b<a.length-1,"Bad queryKey.");return{Hb:a.substr(b+1),path:new L(a.substr(0,b))}}function Cf(a,b){var c=a.$e,d="_"+b;return d in c?c[d]:void 0}function Mf(a,b){var c=Gf(b);return w(a.mc,c)}var Hf=1;
	function Ef(a,b,c){var d=a.ta.get(b);K(d,"Missing sync point for query tag that we're tracking");return d.ab(c,new qf(b,a.ib),null)}function xf(a,b){return Of(a,b,a.ta,null,new qf(G,a.ib))}function Of(a,b,c,d,e){if(b.path.e())return Pf(a,b,c,d,e);var f=c.get(G);null==d&&null!=f&&(d=f.fb(G));var h=[],k=E(b.path),l=b.Xc(k);if((c=c.children.get(k))&&l)var m=d?d.R(k):null,k=e.u(k),h=h.concat(Of(a,l,c,m,k));f&&(h=h.concat(f.ab(b,e,d)));return h}
	function Pf(a,b,c,d,e){var f=c.get(G);null==d&&null!=f&&(d=f.fb(G));var h=[];c.children.ia(function(c,f){var m=d?d.R(c):null,t=e.u(c),z=b.Xc(c);z&&(h=h.concat(Pf(a,z,f,m,t)))});f&&(h=h.concat(f.ab(b,e,d)));return h};function Qf(){this.children={};this.nd=0;this.value=null}function Rf(a,b,c){this.Gd=a?a:"";this.Zc=b?b:null;this.A=c?c:new Qf}function Sf(a,b){for(var c=b instanceof L?b:new L(b),d=a,e;null!==(e=E(c));)d=new Rf(e,d,w(d.A.children,e)||new Qf),c=H(c);return d}g=Rf.prototype;g.Ca=function(){return this.A.value};function Tf(a,b){K("undefined"!==typeof b,"Cannot set value to undefined");a.A.value=b;Uf(a)}g.clear=function(){this.A.value=null;this.A.children={};this.A.nd=0;Uf(this)};
	g.wd=function(){return 0<this.A.nd};g.e=function(){return null===this.Ca()&&!this.wd()};g.P=function(a){var b=this;r(this.A.children,function(c,d){a(new Rf(d,b,c))})};function Vf(a,b,c,d){c&&!d&&b(a);a.P(function(a){Vf(a,b,!0,d)});c&&d&&b(a)}function Wf(a,b){for(var c=a.parent();null!==c&&!b(c);)c=c.parent()}g.path=function(){return new L(null===this.Zc?this.Gd:this.Zc.path()+"/"+this.Gd)};g.name=function(){return this.Gd};g.parent=function(){return this.Zc};
	function Uf(a){if(null!==a.Zc){var b=a.Zc,c=a.Gd,d=a.e(),e=v(b.A.children,c);d&&e?(delete b.A.children[c],b.A.nd--,Uf(b)):d||e||(b.A.children[c]=a.A,b.A.nd++,Uf(b))}};var Xf=/[\[\].#$\/\u0000-\u001F\u007F]/,Yf=/[\[\].#$\u0000-\u001F\u007F]/,Zf=/^[a-zA-Z][a-zA-Z._\-+]+$/;function $f(a){return p(a)&&0!==a.length&&!Xf.test(a)}function ag(a){return null===a||p(a)||ga(a)&&!Qc(a)||ia(a)&&v(a,".sv")}function bg(a,b,c,d){d&&!n(b)||cg(y(a,1,d),b,c)}
	function cg(a,b,c){c instanceof L&&(c=new Je(c,a));if(!n(b))throw Error(a+"contains undefined "+Le(c));if(ha(b))throw Error(a+"contains a function "+Le(c)+" with contents: "+b.toString());if(Qc(b))throw Error(a+"contains "+b.toString()+" "+Le(c));if(p(b)&&b.length>10485760/3&&10485760<Zc(b))throw Error(a+"contains a string greater than 10485760 utf8 bytes "+Le(c)+" ('"+b.substring(0,50)+"...')");if(ia(b)){var d=!1,e=!1;ib(b,function(b,h){if(".value"===b)d=!0;else if(".priority"!==b&&".sv"!==b&&(e=
	!0,!$f(b)))throw Error(a+" contains an invalid key ("+b+") "+Le(c)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');c.push(b);cg(a,h,c);c.pop()});if(d&&e)throw Error(a+' contains ".value" child '+Le(c)+" in addition to actual children.");}}
	function dg(a,b){var c,d;for(c=0;c<b.length;c++){d=b[c];for(var e=d.slice(),f=0;f<e.length;f++)if((".priority"!==e[f]||f!==e.length-1)&&!$f(e[f]))throw Error(a+"contains an invalid key ("+e[f]+") in path "+d.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');}b.sort(Ie);e=null;for(c=0;c<b.length;c++){d=b[c];if(null!==e&&e.contains(d))throw Error(a+"contains a path "+e.toString()+" that is ancestor of another path "+d.toString());e=d}}
	function eg(a,b,c){var d=y(a,1,!1);if(!ia(b)||ea(b))throw Error(d+" must be an object containing the children to replace.");var e=[];ib(b,function(a,b){var k=new L(a);cg(d,b,c.u(k));if(".priority"===Ld(k)&&!ag(b))throw Error(d+"contains an invalid value for '"+k.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");e.push(k)});dg(d,e)}
	function fg(a,b,c){if(Qc(c))throw Error(y(a,b,!1)+"is "+c.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!ag(c))throw Error(y(a,b,!1)+"must be a valid Firebase priority (a string, finite number, server value, or null).");}
	function gg(a,b,c){if(!c||n(b))switch(b){case "value":case "child_added":case "child_removed":case "child_changed":case "child_moved":break;default:throw Error(y(a,1,c)+'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".');}}function hg(a,b){if(n(b)&&!$f(b))throw Error(y(a,2,!0)+'was an invalid key: "'+b+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").');}
	function ig(a,b){if(!p(b)||0===b.length||Yf.test(b))throw Error(y(a,1,!1)+'was an invalid path: "'+b+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"');}function jg(a,b){if(".info"===E(b))throw Error(a+" failed: Can't modify data under /.info/");}function kg(a,b){if(!p(b))throw Error(y(a,1,!1)+"must be a valid credential (a string).");}function lg(a,b,c){if(!p(c))throw Error(y(a,b,!1)+"must be a valid string.");}
	function mg(a,b){lg(a,1,b);if(!Zf.test(b))throw Error(y(a,1,!1)+"'"+b+"' is not a valid authentication provider.");}function ng(a,b,c,d){if(!d||n(c))if(!ia(c)||null===c)throw Error(y(a,b,d)+"must be a valid object.");}function og(a,b,c){if(!ia(b)||!v(b,c))throw Error(y(a,1,!1)+'must contain the key "'+c+'"');if(!p(w(b,c)))throw Error(y(a,1,!1)+'must contain the key "'+c+'" with type "string"');};function pg(){this.set={}}g=pg.prototype;g.add=function(a,b){this.set[a]=null!==b?b:!0};g.contains=function(a){return v(this.set,a)};g.get=function(a){return this.contains(a)?this.set[a]:void 0};g.remove=function(a){delete this.set[a]};g.clear=function(){this.set={}};g.e=function(){return wa(this.set)};g.count=function(){return pa(this.set)};function qg(a,b){r(a.set,function(a,d){b(d,a)})}g.keys=function(){var a=[];r(this.set,function(b,c){a.push(c)});return a};function qc(){this.m=this.B=null}qc.prototype.find=function(a){if(null!=this.B)return this.B.Q(a);if(a.e()||null==this.m)return null;var b=E(a);a=H(a);return this.m.contains(b)?this.m.get(b).find(a):null};qc.prototype.nc=function(a,b){if(a.e())this.B=b,this.m=null;else if(null!==this.B)this.B=this.B.G(a,b);else{null==this.m&&(this.m=new pg);var c=E(a);this.m.contains(c)||this.m.add(c,new qc);c=this.m.get(c);a=H(a);c.nc(a,b)}};
	function rg(a,b){if(b.e())return a.B=null,a.m=null,!0;if(null!==a.B){if(a.B.K())return!1;var c=a.B;a.B=null;c.P(N,function(b,c){a.nc(new L(b),c)});return rg(a,b)}return null!==a.m?(c=E(b),b=H(b),a.m.contains(c)&&rg(a.m.get(c),b)&&a.m.remove(c),a.m.e()?(a.m=null,!0):!1):!0}function rc(a,b,c){null!==a.B?c(b,a.B):a.P(function(a,e){var f=new L(b.toString()+"/"+a);rc(e,f,c)})}qc.prototype.P=function(a){null!==this.m&&qg(this.m,function(b,c){a(b,c)})};var sg="auth.firebase.com";function tg(a,b,c){this.od=a||{};this.ee=b||{};this.$a=c||{};this.od.remember||(this.od.remember="default")}var ug=["remember","redirectTo"];function vg(a){var b={},c={};ib(a||{},function(a,e){0<=Na(ug,a)?b[a]=e:c[a]=e});return new tg(b,{},c)};function wg(a,b){this.Qe=["session",a.Od,a.hc].join(":");this.be=b}wg.prototype.set=function(a,b){if(!b)if(this.be.length)b=this.be[0];else throw Error("fb.login.SessionManager : No storage options available!");b.set(this.Qe,a)};wg.prototype.get=function(){var a=Qa(this.be,q(this.qg,this)),a=Pa(a,function(a){return null!==a});Xa(a,function(a,c){return ad(c.token)-ad(a.token)});return 0<a.length?a.shift():null};wg.prototype.qg=function(a){try{var b=a.get(this.Qe);if(b&&b.token)return b}catch(c){}return null};
	wg.prototype.clear=function(){var a=this;Oa(this.be,function(b){b.remove(a.Qe)})};function xg(){return"undefined"!==typeof navigator&&"string"===typeof navigator.userAgent?navigator.userAgent:""}function yg(){return"undefined"!==typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(xg())}function zg(){return"undefined"!==typeof location&&/^file:\//.test(location.href)}
	function Ag(a){var b=xg();if(""===b)return!1;if("Microsoft Internet Explorer"===navigator.appName){if((b=b.match(/MSIE ([0-9]{1,}[\.0-9]{0,})/))&&1<b.length)return parseFloat(b[1])>=a}else if(-1<b.indexOf("Trident")&&(b=b.match(/rv:([0-9]{2,2}[\.0-9]{0,})/))&&1<b.length)return parseFloat(b[1])>=a;return!1};function Bg(){var a=window.opener.frames,b;for(b=a.length-1;0<=b;b--)try{if(a[b].location.protocol===window.location.protocol&&a[b].location.host===window.location.host&&"__winchan_relay_frame"===a[b].name)return a[b]}catch(c){}return null}function Cg(a,b,c){a.attachEvent?a.attachEvent("on"+b,c):a.addEventListener&&a.addEventListener(b,c,!1)}function Dg(a,b,c){a.detachEvent?a.detachEvent("on"+b,c):a.removeEventListener&&a.removeEventListener(b,c,!1)}
	function Eg(a){/^https?:\/\//.test(a)||(a=window.location.href);var b=/^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/.exec(a);return b?b[1]:a}function Fg(a){var b="";try{a=a.replace("#","");var c=lb(a);c&&v(c,"__firebase_request_key")&&(b=w(c,"__firebase_request_key"))}catch(d){}return b}function Gg(){var a=Pc(sg);return a.scheme+"://"+a.host+"/v2"}function Hg(a){return Gg()+"/"+a+"/auth/channel"};function Ig(a){var b=this;this.Ac=a;this.ce="*";Ag(8)?this.Rc=this.zd=Bg():(this.Rc=window.opener,this.zd=window);if(!b.Rc)throw"Unable to find relay frame";Cg(this.zd,"message",q(this.jc,this));Cg(this.zd,"message",q(this.Bf,this));try{Jg(this,{a:"ready"})}catch(c){Cg(this.Rc,"load",function(){Jg(b,{a:"ready"})})}Cg(window,"unload",q(this.Bg,this))}function Jg(a,b){b=B(b);Ag(8)?a.Rc.doPost(b,a.ce):a.Rc.postMessage(b,a.ce)}
	Ig.prototype.jc=function(a){var b=this,c;try{c=nb(a.data)}catch(d){}c&&"request"===c.a&&(Dg(window,"message",this.jc),this.ce=a.origin,this.Ac&&setTimeout(function(){b.Ac(b.ce,c.d,function(a,c){b.dg=!c;b.Ac=void 0;Jg(b,{a:"response",d:a,forceKeepWindowOpen:c})})},0))};Ig.prototype.Bg=function(){try{Dg(this.zd,"message",this.Bf)}catch(a){}this.Ac&&(Jg(this,{a:"error",d:"unknown closed window"}),this.Ac=void 0);try{window.close()}catch(b){}};Ig.prototype.Bf=function(a){if(this.dg&&"die"===a.data)try{window.close()}catch(b){}};function Kg(a){this.pc=Ga()+Ga()+Ga();this.Ef=a}Kg.prototype.open=function(a,b){yc.set("redirect_request_id",this.pc);yc.set("redirect_request_id",this.pc);b.requestId=this.pc;b.redirectTo=b.redirectTo||window.location.href;a+=(/\?/.test(a)?"":"?")+kb(b);window.location=a};Kg.isAvailable=function(){return!zg()&&!yg()};Kg.prototype.Cc=function(){return"redirect"};var Lg={NETWORK_ERROR:"Unable to contact the Firebase server.",SERVER_ERROR:"An unknown server error occurred.",TRANSPORT_UNAVAILABLE:"There are no login transports available for the requested method.",REQUEST_INTERRUPTED:"The browser redirected the page before the login request could complete.",USER_CANCELLED:"The user cancelled authentication."};function Mg(a){var b=Error(w(Lg,a),a);b.code=a;return b};function Ng(a){var b;(b=!a.window_features)||(b=xg(),b=-1!==b.indexOf("Fennec/")||-1!==b.indexOf("Firefox/")&&-1!==b.indexOf("Android"));b&&(a.window_features=void 0);a.window_name||(a.window_name="_blank");this.options=a}
	Ng.prototype.open=function(a,b,c){function d(a){h&&(document.body.removeChild(h),h=void 0);t&&(t=clearInterval(t));Dg(window,"message",e);Dg(window,"unload",d);if(m&&!a)try{m.close()}catch(b){k.postMessage("die",l)}m=k=void 0}function e(a){if(a.origin===l)try{var b=nb(a.data);"ready"===b.a?k.postMessage(z,l):"error"===b.a?(d(!1),c&&(c(b.d),c=null)):"response"===b.a&&(d(b.forceKeepWindowOpen),c&&(c(null,b.d),c=null))}catch(e){}}var f=Ag(8),h,k;if(!this.options.relay_url)return c(Error("invalid arguments: origin of url and relay_url must match"));
	var l=Eg(a);if(l!==Eg(this.options.relay_url))c&&setTimeout(function(){c(Error("invalid arguments: origin of url and relay_url must match"))},0);else{f&&(h=document.createElement("iframe"),h.setAttribute("src",this.options.relay_url),h.style.display="none",h.setAttribute("name","__winchan_relay_frame"),document.body.appendChild(h),k=h.contentWindow);a+=(/\?/.test(a)?"":"?")+kb(b);var m=window.open(a,this.options.window_name,this.options.window_features);k||(k=m);var t=setInterval(function(){m&&m.closed&&
	(d(!1),c&&(c(Mg("USER_CANCELLED")),c=null))},500),z=B({a:"request",d:b});Cg(window,"unload",d);Cg(window,"message",e)}};
	Ng.isAvailable=function(){var a;if(a="postMessage"in window&&!zg())(a=yg()||"undefined"!==typeof navigator&&(!!xg().match(/Windows Phone/)||!!window.Windows&&/^ms-appx:/.test(location.href)))||(a=xg(),a="undefined"!==typeof navigator&&"undefined"!==typeof window&&!!(a.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i)||a.match(/CriOS/)||a.match(/Twitter for iPhone/)||a.match(/FBAN\/FBIOS/)||window.navigator.standalone)),a=!a;return a&&!xg().match(/PhantomJS/)};Ng.prototype.Cc=function(){return"popup"};function Og(a){a.method||(a.method="GET");a.headers||(a.headers={});a.headers.content_type||(a.headers.content_type="application/json");a.headers.content_type=a.headers.content_type.toLowerCase();this.options=a}
	Og.prototype.open=function(a,b,c){function d(){c&&(c(Mg("REQUEST_INTERRUPTED")),c=null)}var e=new XMLHttpRequest,f=this.options.method.toUpperCase(),h;Cg(window,"beforeunload",d);e.onreadystatechange=function(){if(c&&4===e.readyState){var a;if(200<=e.status&&300>e.status){try{a=nb(e.responseText)}catch(b){}c(null,a)}else 500<=e.status&&600>e.status?c(Mg("SERVER_ERROR")):c(Mg("NETWORK_ERROR"));c=null;Dg(window,"beforeunload",d)}};if("GET"===f)a+=(/\?/.test(a)?"":"?")+kb(b),h=null;else{var k=this.options.headers.content_type;
	"application/json"===k&&(h=B(b));"application/x-www-form-urlencoded"===k&&(h=kb(b))}e.open(f,a,!0);a={"X-Requested-With":"XMLHttpRequest",Accept:"application/json;text/plain"};za(a,this.options.headers);for(var l in a)e.setRequestHeader(l,a[l]);e.send(h)};Og.isAvailable=function(){var a;if(a=!!window.XMLHttpRequest)a=xg(),a=!(a.match(/MSIE/)||a.match(/Trident/))||Ag(10);return a};Og.prototype.Cc=function(){return"json"};function Pg(a){this.pc=Ga()+Ga()+Ga();this.Ef=a}
	Pg.prototype.open=function(a,b,c){function d(){c&&(c(Mg("USER_CANCELLED")),c=null)}var e=this,f=Pc(sg),h;b.requestId=this.pc;b.redirectTo=f.scheme+"://"+f.host+"/blank/page.html";a+=/\?/.test(a)?"":"?";a+=kb(b);(h=window.open(a,"_blank","location=no"))&&ha(h.addEventListener)?(h.addEventListener("loadstart",function(a){var b;if(b=a&&a.url)a:{try{var m=document.createElement("a");m.href=a.url;b=m.host===f.host&&"/blank/page.html"===m.pathname;break a}catch(t){}b=!1}b&&(a=Fg(a.url),h.removeEventListener("exit",
	d),h.close(),a=new tg(null,null,{requestId:e.pc,requestKey:a}),e.Ef.requestWithCredential("/auth/session",a,c),c=null)}),h.addEventListener("exit",d)):c(Mg("TRANSPORT_UNAVAILABLE"))};Pg.isAvailable=function(){return yg()};Pg.prototype.Cc=function(){return"redirect"};function Qg(a){a.callback_parameter||(a.callback_parameter="callback");this.options=a;window.__firebase_auth_jsonp=window.__firebase_auth_jsonp||{}}
	Qg.prototype.open=function(a,b,c){function d(){c&&(c(Mg("REQUEST_INTERRUPTED")),c=null)}function e(){setTimeout(function(){window.__firebase_auth_jsonp[f]=void 0;wa(window.__firebase_auth_jsonp)&&(window.__firebase_auth_jsonp=void 0);try{var a=document.getElementById(f);a&&a.parentNode.removeChild(a)}catch(b){}},1);Dg(window,"beforeunload",d)}var f="fn"+(new Date).getTime()+Math.floor(99999*Math.random());b[this.options.callback_parameter]="__firebase_auth_jsonp."+f;a+=(/\?/.test(a)?"":"?")+kb(b);
	Cg(window,"beforeunload",d);window.__firebase_auth_jsonp[f]=function(a){c&&(c(null,a),c=null);e()};Rg(f,a,c)};
	function Rg(a,b,c){setTimeout(function(){try{var d=document.createElement("script");d.type="text/javascript";d.id=a;d.async=!0;d.src=b;d.onerror=function(){var b=document.getElementById(a);null!==b&&b.parentNode.removeChild(b);c&&c(Mg("NETWORK_ERROR"))};var e=document.getElementsByTagName("head");(e&&0!=e.length?e[0]:document.documentElement).appendChild(d)}catch(f){c&&c(Mg("NETWORK_ERROR"))}},0)}Qg.isAvailable=function(){return"undefined"!==typeof document&&null!=document.createElement};
	Qg.prototype.Cc=function(){return"json"};function Sg(a,b,c,d){De.call(this,["auth_status"]);this.F=a;this.df=b;this.Vg=c;this.Le=d;this.sc=new wg(a,[xc,yc]);this.mb=null;this.Se=!1;Tg(this)}ma(Sg,De);g=Sg.prototype;g.xe=function(){return this.mb||null};function Tg(a){yc.get("redirect_request_id")&&Ug(a);var b=a.sc.get();b&&b.token?(Vg(a,b),a.df(b.token,function(c,d){Wg(a,c,d,!1,b.token,b)},function(b,d){Xg(a,"resumeSession()",b,d)})):Vg(a,null)}
	function Yg(a,b,c,d,e,f){"firebaseio-demo.com"===a.F.domain&&O("Firebase authentication is not supported on demo Firebases (*.firebaseio-demo.com). To secure your Firebase, create a production Firebase at https://www.firebase.com.");a.df(b,function(f,k){Wg(a,f,k,!0,b,c,d||{},e)},function(b,c){Xg(a,"auth()",b,c,f)})}function Zg(a,b){a.sc.clear();Vg(a,null);a.Vg(function(a,d){if("ok"===a)P(b,null);else{var e=(a||"error").toUpperCase(),f=e;d&&(f+=": "+d);f=Error(f);f.code=e;P(b,f)}})}
	function Wg(a,b,c,d,e,f,h,k){"ok"===b?(d&&(b=c.auth,f.auth=b,f.expires=c.expires,f.token=bd(e)?e:"",c=null,b&&v(b,"uid")?c=w(b,"uid"):v(f,"uid")&&(c=w(f,"uid")),f.uid=c,c="custom",b&&v(b,"provider")?c=w(b,"provider"):v(f,"provider")&&(c=w(f,"provider")),f.provider=c,a.sc.clear(),bd(e)&&(h=h||{},c=xc,"sessionOnly"===h.remember&&(c=yc),"none"!==h.remember&&a.sc.set(f,c)),Vg(a,f)),P(k,null,f)):(a.sc.clear(),Vg(a,null),f=a=(b||"error").toUpperCase(),c&&(f+=": "+c),f=Error(f),f.code=a,P(k,f))}
	function Xg(a,b,c,d,e){O(b+" was canceled: "+d);a.sc.clear();Vg(a,null);a=Error(d);a.code=c.toUpperCase();P(e,a)}function $g(a,b,c,d,e){ah(a);c=new tg(d||{},{},c||{});bh(a,[Og,Qg],"/auth/"+b,c,e)}
	function ch(a,b,c,d){ah(a);var e=[Ng,Pg];c=vg(c);"anonymous"===b||"password"===b?setTimeout(function(){P(d,Mg("TRANSPORT_UNAVAILABLE"))},0):(c.ee.window_features="menubar=yes,modal=yes,alwaysRaised=yeslocation=yes,resizable=yes,scrollbars=yes,status=yes,height=625,width=625,top="+("object"===typeof screen?.5*(screen.height-625):0)+",left="+("object"===typeof screen?.5*(screen.width-625):0),c.ee.relay_url=Hg(a.F.hc),c.ee.requestWithCredential=q(a.qc,a),bh(a,e,"/auth/"+b,c,d))}
	function Ug(a){var b=yc.get("redirect_request_id");if(b){var c=yc.get("redirect_client_options");yc.remove("redirect_request_id");yc.remove("redirect_client_options");var d=[Og,Qg],b={requestId:b,requestKey:Fg(document.location.hash)},c=new tg(c,{},b);a.Se=!0;try{document.location.hash=document.location.hash.replace(/&__firebase_request_key=([a-zA-z0-9]*)/,"")}catch(e){}bh(a,d,"/auth/session",c,function(){this.Se=!1}.bind(a))}}
	g.se=function(a,b){ah(this);var c=vg(a);c.$a._method="POST";this.qc("/users",c,function(a,c){a?P(b,a):P(b,a,c)})};g.Te=function(a,b){var c=this;ah(this);var d="/users/"+encodeURIComponent(a.email),e=vg(a);e.$a._method="DELETE";this.qc(d,e,function(a,d){!a&&d&&d.uid&&c.mb&&c.mb.uid&&c.mb.uid===d.uid&&Zg(c);P(b,a)})};g.pe=function(a,b){ah(this);var c="/users/"+encodeURIComponent(a.email)+"/password",d=vg(a);d.$a._method="PUT";d.$a.password=a.newPassword;this.qc(c,d,function(a){P(b,a)})};
	g.oe=function(a,b){ah(this);var c="/users/"+encodeURIComponent(a.oldEmail)+"/email",d=vg(a);d.$a._method="PUT";d.$a.email=a.newEmail;d.$a.password=a.password;this.qc(c,d,function(a){P(b,a)})};g.Ve=function(a,b){ah(this);var c="/users/"+encodeURIComponent(a.email)+"/password",d=vg(a);d.$a._method="POST";this.qc(c,d,function(a){P(b,a)})};g.qc=function(a,b,c){dh(this,[Og,Qg],a,b,c)};
	function bh(a,b,c,d,e){dh(a,b,c,d,function(b,c){!b&&c&&c.token&&c.uid?Yg(a,c.token,c,d.od,function(a,b){a?P(e,a):P(e,null,b)}):P(e,b||Mg("UNKNOWN_ERROR"))})}
	function dh(a,b,c,d,e){b=Pa(b,function(a){return"function"===typeof a.isAvailable&&a.isAvailable()});0===b.length?setTimeout(function(){P(e,Mg("TRANSPORT_UNAVAILABLE"))},0):(b=new (b.shift())(d.ee),d=jb(d.$a),d.v="js-"+hb,d.transport=b.Cc(),d.suppress_status_codes=!0,a=Gg()+"/"+a.F.hc+c,b.open(a,d,function(a,b){if(a)P(e,a);else if(b&&b.error){var c=Error(b.error.message);c.code=b.error.code;c.details=b.error.details;P(e,c)}else P(e,null,b)}))}
	function Vg(a,b){var c=null!==a.mb||null!==b;a.mb=b;c&&a.fe("auth_status",b);a.Le(null!==b)}g.Ae=function(a){K("auth_status"===a,'initial event must be of type "auth_status"');return this.Se?null:[this.mb]};function ah(a){var b=a.F;if("firebaseio.com"!==b.domain&&"firebaseio-demo.com"!==b.domain&&"auth.firebase.com"===sg)throw Error("This custom Firebase server ('"+a.F.domain+"') does not support delegated login.");};var Cc="websocket",Dc="long_polling";function eh(a){this.jc=a;this.Nd=[];this.Sb=0;this.qe=-1;this.Fb=null}function fh(a,b,c){a.qe=b;a.Fb=c;a.qe<a.Sb&&(a.Fb(),a.Fb=null)}function gh(a,b,c){for(a.Nd[b]=c;a.Nd[a.Sb];){var d=a.Nd[a.Sb];delete a.Nd[a.Sb];for(var e=0;e<d.length;++e)if(d[e]){var f=a;Db(function(){f.jc(d[e])})}if(a.Sb===a.qe){a.Fb&&(clearTimeout(a.Fb),a.Fb(),a.Fb=null);break}a.Sb++}};function hh(a,b,c,d){this.re=a;this.f=Mc(a);this.nb=this.ob=0;this.Ua=Rb(b);this.Qf=c;this.Hc=!1;this.Bb=d;this.jd=function(a){return Bc(b,Dc,a)}}var ih,jh;
	hh.prototype.open=function(a,b){this.hf=0;this.la=b;this.Af=new eh(a);this.zb=!1;var c=this;this.qb=setTimeout(function(){c.f("Timed out trying to connect.");c.gb();c.qb=null},Math.floor(3E4));Rc(function(){if(!c.zb){c.Sa=new kh(function(a,b,d,k,l){lh(c,arguments);if(c.Sa)if(c.qb&&(clearTimeout(c.qb),c.qb=null),c.Hc=!0,"start"==a)c.id=b,c.Gf=d;else if("close"===a)b?(c.Sa.Xd=!1,fh(c.Af,b,function(){c.gb()})):c.gb();else throw Error("Unrecognized command received: "+a);},function(a,b){lh(c,arguments);
	gh(c.Af,a,b)},function(){c.gb()},c.jd);var a={start:"t"};a.ser=Math.floor(1E8*Math.random());c.Sa.he&&(a.cb=c.Sa.he);a.v="5";c.Qf&&(a.s=c.Qf);c.Bb&&(a.ls=c.Bb);"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(a.r="f");a=c.jd(a);c.f("Connecting via long-poll to "+a);mh(c.Sa,a,function(){})}})};
	hh.prototype.start=function(){var a=this.Sa,b=this.Gf;a.ug=this.id;a.vg=b;for(a.le=!0;nh(a););a=this.id;b=this.Gf;this.gc=document.createElement("iframe");var c={dframe:"t"};c.id=a;c.pw=b;this.gc.src=this.jd(c);this.gc.style.display="none";document.body.appendChild(this.gc)};
	hh.isAvailable=function(){return ih||!jh&&"undefined"!==typeof document&&null!=document.createElement&&!("object"===typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"===typeof Windows&&"object"===typeof Windows.Xg)&&!0};g=hh.prototype;g.Ed=function(){};g.dd=function(){this.zb=!0;this.Sa&&(this.Sa.close(),this.Sa=null);this.gc&&(document.body.removeChild(this.gc),this.gc=null);this.qb&&(clearTimeout(this.qb),this.qb=null)};
	g.gb=function(){this.zb||(this.f("Longpoll is closing itself"),this.dd(),this.la&&(this.la(this.Hc),this.la=null))};g.close=function(){this.zb||(this.f("Longpoll is being closed."),this.dd())};g.send=function(a){a=B(a);this.ob+=a.length;Ob(this.Ua,"bytes_sent",a.length);a=Ic(a);a=fb(a,!0);a=Vc(a,1840);for(var b=0;b<a.length;b++){var c=this.Sa;c.ad.push({Mg:this.hf,Ug:a.length,kf:a[b]});c.le&&nh(c);this.hf++}};function lh(a,b){var c=B(b).length;a.nb+=c;Ob(a.Ua,"bytes_received",c)}
	function kh(a,b,c,d){this.jd=d;this.hb=c;this.Pe=new pg;this.ad=[];this.te=Math.floor(1E8*Math.random());this.Xd=!0;this.he=Ec();window["pLPCommand"+this.he]=a;window["pRTLPCB"+this.he]=b;a=document.createElement("iframe");a.style.display="none";if(document.body){document.body.appendChild(a);try{a.contentWindow.document||Cb("No IE domain setting required")}catch(e){a.src="javascript:void((function(){document.open();document.domain='"+document.domain+"';document.close();})())"}}else throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
	a.contentDocument?a.eb=a.contentDocument:a.contentWindow?a.eb=a.contentWindow.document:a.document&&(a.eb=a.document);this.Ea=a;a="";this.Ea.src&&"javascript:"===this.Ea.src.substr(0,11)&&(a='<script>document.domain="'+document.domain+'";\x3c/script>');a="<html><body>"+a+"</body></html>";try{this.Ea.eb.open(),this.Ea.eb.write(a),this.Ea.eb.close()}catch(f){Cb("frame writing exception"),f.stack&&Cb(f.stack),Cb(f)}}
	kh.prototype.close=function(){this.le=!1;if(this.Ea){this.Ea.eb.body.innerHTML="";var a=this;setTimeout(function(){null!==a.Ea&&(document.body.removeChild(a.Ea),a.Ea=null)},Math.floor(0))}var b=this.hb;b&&(this.hb=null,b())};
	function nh(a){if(a.le&&a.Xd&&a.Pe.count()<(0<a.ad.length?2:1)){a.te++;var b={};b.id=a.ug;b.pw=a.vg;b.ser=a.te;for(var b=a.jd(b),c="",d=0;0<a.ad.length;)if(1870>=a.ad[0].kf.length+30+c.length){var e=a.ad.shift(),c=c+"&seg"+d+"="+e.Mg+"&ts"+d+"="+e.Ug+"&d"+d+"="+e.kf;d++}else break;oh(a,b+c,a.te);return!0}return!1}function oh(a,b,c){function d(){a.Pe.remove(c);nh(a)}a.Pe.add(c,1);var e=setTimeout(d,Math.floor(25E3));mh(a,b,function(){clearTimeout(e);d()})}
	function mh(a,b,c){setTimeout(function(){try{if(a.Xd){var d=a.Ea.eb.createElement("script");d.type="text/javascript";d.async=!0;d.src=b;d.onload=d.onreadystatechange=function(){var a=d.readyState;a&&"loaded"!==a&&"complete"!==a||(d.onload=d.onreadystatechange=null,d.parentNode&&d.parentNode.removeChild(d),c())};d.onerror=function(){Cb("Long-poll script failed to load: "+b);a.Xd=!1;a.close()};a.Ea.eb.body.appendChild(d)}}catch(e){}},Math.floor(1))};var ph=null;"undefined"!==typeof MozWebSocket?ph=MozWebSocket:"undefined"!==typeof WebSocket&&(ph=WebSocket);function qh(a,b,c,d){this.re=a;this.f=Mc(this.re);this.frames=this.Kc=null;this.nb=this.ob=this.bf=0;this.Ua=Rb(b);a={v:"5"};"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(a.r="f");c&&(a.s=c);d&&(a.ls=d);this.ef=Bc(b,Cc,a)}var rh;
	qh.prototype.open=function(a,b){this.hb=b;this.zg=a;this.f("Websocket connecting to "+this.ef);this.Hc=!1;xc.set("previous_websocket_failure",!0);try{this.ua=new ph(this.ef)}catch(c){this.f("Error instantiating WebSocket.");var d=c.message||c.data;d&&this.f(d);this.gb();return}var e=this;this.ua.onopen=function(){e.f("Websocket connected.");e.Hc=!0};this.ua.onclose=function(){e.f("Websocket connection was disconnected.");e.ua=null;e.gb()};this.ua.onmessage=function(a){if(null!==e.ua)if(a=a.data,e.nb+=
	a.length,Ob(e.Ua,"bytes_received",a.length),sh(e),null!==e.frames)th(e,a);else{a:{K(null===e.frames,"We already have a frame buffer");if(6>=a.length){var b=Number(a);if(!isNaN(b)){e.bf=b;e.frames=[];a=null;break a}}e.bf=1;e.frames=[]}null!==a&&th(e,a)}};this.ua.onerror=function(a){e.f("WebSocket error.  Closing connection.");(a=a.message||a.data)&&e.f(a);e.gb()}};qh.prototype.start=function(){};
	qh.isAvailable=function(){var a=!1;if("undefined"!==typeof navigator&&navigator.userAgent){var b=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);b&&1<b.length&&4.4>parseFloat(b[1])&&(a=!0)}return!a&&null!==ph&&!rh};qh.responsesRequiredToBeHealthy=2;qh.healthyTimeout=3E4;g=qh.prototype;g.Ed=function(){xc.remove("previous_websocket_failure")};function th(a,b){a.frames.push(b);if(a.frames.length==a.bf){var c=a.frames.join("");a.frames=null;c=nb(c);a.zg(c)}}
	g.send=function(a){sh(this);a=B(a);this.ob+=a.length;Ob(this.Ua,"bytes_sent",a.length);a=Vc(a,16384);1<a.length&&this.ua.send(String(a.length));for(var b=0;b<a.length;b++)this.ua.send(a[b])};g.dd=function(){this.zb=!0;this.Kc&&(clearInterval(this.Kc),this.Kc=null);this.ua&&(this.ua.close(),this.ua=null)};g.gb=function(){this.zb||(this.f("WebSocket is closing itself"),this.dd(),this.hb&&(this.hb(this.Hc),this.hb=null))};g.close=function(){this.zb||(this.f("WebSocket is being closed"),this.dd())};
	function sh(a){clearInterval(a.Kc);a.Kc=setInterval(function(){a.ua&&a.ua.send("0");sh(a)},Math.floor(45E3))};function uh(a){vh(this,a)}var wh=[hh,qh];function vh(a,b){var c=qh&&qh.isAvailable(),d=c&&!(xc.wf||!0===xc.get("previous_websocket_failure"));b.Wg&&(c||O("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),d=!0);if(d)a.gd=[qh];else{var e=a.gd=[];Wc(wh,function(a,b){b&&b.isAvailable()&&e.push(b)})}}function xh(a){if(0<a.gd.length)return a.gd[0];throw Error("No transports available");};function yh(a,b,c,d,e,f,h){this.id=a;this.f=Mc("c:"+this.id+":");this.jc=c;this.Wc=d;this.la=e;this.Ne=f;this.F=b;this.Md=[];this.ff=0;this.Pf=new uh(b);this.Ta=0;this.Bb=h;this.f("Connection created");zh(this)}
	function zh(a){var b=xh(a.Pf);a.J=new b("c:"+a.id+":"+a.ff++,a.F,void 0,a.Bb);a.Re=b.responsesRequiredToBeHealthy||0;var c=Ah(a,a.J),d=Bh(a,a.J);a.hd=a.J;a.cd=a.J;a.D=null;a.Ab=!1;setTimeout(function(){a.J&&a.J.open(c,d)},Math.floor(0));b=b.healthyTimeout||0;0<b&&(a.yd=setTimeout(function(){a.yd=null;a.Ab||(a.J&&102400<a.J.nb?(a.f("Connection exceeded healthy timeout but has received "+a.J.nb+" bytes.  Marking connection healthy."),a.Ab=!0,a.J.Ed()):a.J&&10240<a.J.ob?a.f("Connection exceeded healthy timeout but has sent "+
	a.J.ob+" bytes.  Leaving connection alive."):(a.f("Closing unhealthy connection after timeout."),a.close()))},Math.floor(b)))}function Bh(a,b){return function(c){b===a.J?(a.J=null,c||0!==a.Ta?1===a.Ta&&a.f("Realtime connection lost."):(a.f("Realtime connection failed."),"s-"===a.F.Ya.substr(0,2)&&(xc.remove("host:"+a.F.host),a.F.Ya=a.F.host)),a.close()):b===a.D?(a.f("Secondary connection lost."),c=a.D,a.D=null,a.hd!==c&&a.cd!==c||a.close()):a.f("closing an old connection")}}
	function Ah(a,b){return function(c){if(2!=a.Ta)if(b===a.cd){var d=Tc("t",c);c=Tc("d",c);if("c"==d){if(d=Tc("t",c),"d"in c)if(c=c.d,"h"===d){var d=c.ts,e=c.v,f=c.h;a.Nf=c.s;Ac(a.F,f);0==a.Ta&&(a.J.start(),Ch(a,a.J,d),"5"!==e&&O("Protocol version mismatch detected"),c=a.Pf,(c=1<c.gd.length?c.gd[1]:null)&&Dh(a,c))}else if("n"===d){a.f("recvd end transmission on primary");a.cd=a.D;for(c=0;c<a.Md.length;++c)a.Id(a.Md[c]);a.Md=[];Eh(a)}else"s"===d?(a.f("Connection shutdown command received. Shutting down..."),
	a.Ne&&(a.Ne(c),a.Ne=null),a.la=null,a.close()):"r"===d?(a.f("Reset packet received.  New host: "+c),Ac(a.F,c),1===a.Ta?a.close():(Fh(a),zh(a))):"e"===d?Nc("Server Error: "+c):"o"===d?(a.f("got pong on primary."),Gh(a),Hh(a)):Nc("Unknown control packet command: "+d)}else"d"==d&&a.Id(c)}else if(b===a.D)if(d=Tc("t",c),c=Tc("d",c),"c"==d)"t"in c&&(c=c.t,"a"===c?Ih(a):"r"===c?(a.f("Got a reset on secondary, closing it"),a.D.close(),a.hd!==a.D&&a.cd!==a.D||a.close()):"o"===c&&(a.f("got pong on secondary."),
	a.Mf--,Ih(a)));else if("d"==d)a.Md.push(c);else throw Error("Unknown protocol layer: "+d);else a.f("message on old connection")}}yh.prototype.Fa=function(a){Jh(this,{t:"d",d:a})};function Eh(a){a.hd===a.D&&a.cd===a.D&&(a.f("cleaning up and promoting a connection: "+a.D.re),a.J=a.D,a.D=null)}
	function Ih(a){0>=a.Mf?(a.f("Secondary connection is healthy."),a.Ab=!0,a.D.Ed(),a.D.start(),a.f("sending client ack on secondary"),a.D.send({t:"c",d:{t:"a",d:{}}}),a.f("Ending transmission on primary"),a.J.send({t:"c",d:{t:"n",d:{}}}),a.hd=a.D,Eh(a)):(a.f("sending ping on secondary."),a.D.send({t:"c",d:{t:"p",d:{}}}))}yh.prototype.Id=function(a){Gh(this);this.jc(a)};function Gh(a){a.Ab||(a.Re--,0>=a.Re&&(a.f("Primary connection is healthy."),a.Ab=!0,a.J.Ed()))}
	function Dh(a,b){a.D=new b("c:"+a.id+":"+a.ff++,a.F,a.Nf);a.Mf=b.responsesRequiredToBeHealthy||0;a.D.open(Ah(a,a.D),Bh(a,a.D));setTimeout(function(){a.D&&(a.f("Timed out trying to upgrade."),a.D.close())},Math.floor(6E4))}function Ch(a,b,c){a.f("Realtime connection established.");a.J=b;a.Ta=1;a.Wc&&(a.Wc(c,a.Nf),a.Wc=null);0===a.Re?(a.f("Primary connection is healthy."),a.Ab=!0):setTimeout(function(){Hh(a)},Math.floor(5E3))}
	function Hh(a){a.Ab||1!==a.Ta||(a.f("sending ping on primary."),Jh(a,{t:"c",d:{t:"p",d:{}}}))}function Jh(a,b){if(1!==a.Ta)throw"Connection is not connected";a.hd.send(b)}yh.prototype.close=function(){2!==this.Ta&&(this.f("Closing realtime connection."),this.Ta=2,Fh(this),this.la&&(this.la(),this.la=null))};function Fh(a){a.f("Shutting down all connections");a.J&&(a.J.close(),a.J=null);a.D&&(a.D.close(),a.D=null);a.yd&&(clearTimeout(a.yd),a.yd=null)};function Kh(a,b,c,d){this.id=Lh++;this.f=Mc("p:"+this.id+":");this.xf=this.Ee=!1;this.$={};this.qa=[];this.Yc=0;this.Vc=[];this.oa=!1;this.Za=1E3;this.Fd=3E5;this.Gb=b;this.Uc=c;this.Oe=d;this.F=a;this.sb=this.Aa=this.Ia=this.Bb=this.We=null;this.Ob=!1;this.Td={};this.Lg=0;this.nf=!0;this.Lc=this.Ge=null;Mh(this,0);He.ub().Eb("visible",this.Cg,this);-1===a.host.indexOf("fblocal")&&Ge.ub().Eb("online",this.Ag,this)}var Lh=0,Nh=0;g=Kh.prototype;
	g.Fa=function(a,b,c){var d=++this.Lg;a={r:d,a:a,b:b};this.f(B(a));K(this.oa,"sendRequest call when we're not connected not allowed.");this.Ia.Fa(a);c&&(this.Td[d]=c)};g.yf=function(a,b,c,d){var e=a.va(),f=a.path.toString();this.f("Listen called for "+f+" "+e);this.$[f]=this.$[f]||{};K(fe(a.n)||!S(a.n),"listen() called for non-default but complete query");K(!this.$[f][e],"listen() called twice for same path/queryId.");a={H:d,xd:b,Ig:a,tag:c};this.$[f][e]=a;this.oa&&Oh(this,a)};
	function Oh(a,b){var c=b.Ig,d=c.path.toString(),e=c.va();a.f("Listen on "+d+" for "+e);var f={p:d};b.tag&&(f.q=ee(c.n),f.t=b.tag);f.h=b.xd();a.Fa("q",f,function(f){var k=f.d,l=f.s;if(k&&"object"===typeof k&&v(k,"w")){var m=w(k,"w");ea(m)&&0<=Na(m,"no_index")&&O("Using an unspecified index. Consider adding "+('".indexOn": "'+c.n.g.toString()+'"')+" at "+c.path.toString()+" to your security rules for better performance")}(a.$[d]&&a.$[d][e])===b&&(a.f("listen response",f),"ok"!==l&&Ph(a,d,e),b.H&&b.H(l,
	k))})}g.M=function(a,b,c){this.Aa={ig:a,of:!1,zc:b,md:c};this.f("Authenticating using credential: "+a);Qh(this);(b=40==a.length)||(a=$c(a).Bc,b="object"===typeof a&&!0===w(a,"admin"));b&&(this.f("Admin auth credential detected.  Reducing max reconnect time."),this.Fd=3E4)};g.ge=function(a){delete this.Aa;this.oa&&this.Fa("unauth",{},function(b){a(b.s,b.d)})};
	function Qh(a){var b=a.Aa;a.oa&&b&&a.Fa("auth",{cred:b.ig},function(c){var d=c.s;c=c.d||"error";"ok"!==d&&a.Aa===b&&delete a.Aa;b.of?"ok"!==d&&b.md&&b.md(d,c):(b.of=!0,b.zc&&b.zc(d,c))})}g.Rf=function(a,b){var c=a.path.toString(),d=a.va();this.f("Unlisten called for "+c+" "+d);K(fe(a.n)||!S(a.n),"unlisten() called for non-default but complete query");if(Ph(this,c,d)&&this.oa){var e=ee(a.n);this.f("Unlisten on "+c+" for "+d);c={p:c};b&&(c.q=e,c.t=b);this.Fa("n",c)}};
	g.Me=function(a,b,c){this.oa?Rh(this,"o",a,b,c):this.Vc.push({$c:a,action:"o",data:b,H:c})};g.Cf=function(a,b,c){this.oa?Rh(this,"om",a,b,c):this.Vc.push({$c:a,action:"om",data:b,H:c})};g.Jd=function(a,b){this.oa?Rh(this,"oc",a,null,b):this.Vc.push({$c:a,action:"oc",data:null,H:b})};function Rh(a,b,c,d,e){c={p:c,d:d};a.f("onDisconnect "+b,c);a.Fa(b,c,function(a){e&&setTimeout(function(){e(a.s,a.d)},Math.floor(0))})}g.put=function(a,b,c,d){Sh(this,"p",a,b,c,d)};
	g.zf=function(a,b,c,d){Sh(this,"m",a,b,c,d)};function Sh(a,b,c,d,e,f){d={p:c,d:d};n(f)&&(d.h=f);a.qa.push({action:b,Jf:d,H:e});a.Yc++;b=a.qa.length-1;a.oa?Th(a,b):a.f("Buffering put: "+c)}function Th(a,b){var c=a.qa[b].action,d=a.qa[b].Jf,e=a.qa[b].H;a.qa[b].Jg=a.oa;a.Fa(c,d,function(d){a.f(c+" response",d);delete a.qa[b];a.Yc--;0===a.Yc&&(a.qa=[]);e&&e(d.s,d.d)})}
	g.Ue=function(a){this.oa&&(a={c:a},this.f("reportStats",a),this.Fa("s",a,function(a){"ok"!==a.s&&this.f("reportStats","Error sending stats: "+a.d)}))};
	g.Id=function(a){if("r"in a){this.f("from server: "+B(a));var b=a.r,c=this.Td[b];c&&(delete this.Td[b],c(a.b))}else{if("error"in a)throw"A server-side error has occurred: "+a.error;"a"in a&&(b=a.a,c=a.b,this.f("handleServerMessage",b,c),"d"===b?this.Gb(c.p,c.d,!1,c.t):"m"===b?this.Gb(c.p,c.d,!0,c.t):"c"===b?Uh(this,c.p,c.q):"ac"===b?(a=c.s,b=c.d,c=this.Aa,delete this.Aa,c&&c.md&&c.md(a,b)):"sd"===b?this.We?this.We(c):"msg"in c&&"undefined"!==typeof console&&console.log("FIREBASE: "+c.msg.replace("\n",
	"\nFIREBASE: ")):Nc("Unrecognized action received from server: "+B(b)+"\nAre you using the latest client?"))}};g.Wc=function(a,b){this.f("connection ready");this.oa=!0;this.Lc=(new Date).getTime();this.Oe({serverTimeOffset:a-(new Date).getTime()});this.Bb=b;if(this.nf){var c={};c["sdk.js."+hb.replace(/\./g,"-")]=1;yg()&&(c["framework.cordova"]=1);this.Ue(c)}Vh(this);this.nf=!1;this.Uc(!0)};
	function Mh(a,b){K(!a.Ia,"Scheduling a connect when we're already connected/ing?");a.sb&&clearTimeout(a.sb);a.sb=setTimeout(function(){a.sb=null;Wh(a)},Math.floor(b))}g.Cg=function(a){a&&!this.Ob&&this.Za===this.Fd&&(this.f("Window became visible.  Reducing delay."),this.Za=1E3,this.Ia||Mh(this,0));this.Ob=a};g.Ag=function(a){a?(this.f("Browser went online."),this.Za=1E3,this.Ia||Mh(this,0)):(this.f("Browser went offline.  Killing connection."),this.Ia&&this.Ia.close())};
	g.Df=function(){this.f("data client disconnected");this.oa=!1;this.Ia=null;for(var a=0;a<this.qa.length;a++){var b=this.qa[a];b&&"h"in b.Jf&&b.Jg&&(b.H&&b.H("disconnect"),delete this.qa[a],this.Yc--)}0===this.Yc&&(this.qa=[]);this.Td={};Xh(this)&&(this.Ob?this.Lc&&(3E4<(new Date).getTime()-this.Lc&&(this.Za=1E3),this.Lc=null):(this.f("Window isn't visible.  Delaying reconnect."),this.Za=this.Fd,this.Ge=(new Date).getTime()),a=Math.max(0,this.Za-((new Date).getTime()-this.Ge)),a*=Math.random(),this.f("Trying to reconnect in "+
	a+"ms"),Mh(this,a),this.Za=Math.min(this.Fd,1.3*this.Za));this.Uc(!1)};function Wh(a){if(Xh(a)){a.f("Making a connection attempt");a.Ge=(new Date).getTime();a.Lc=null;var b=q(a.Id,a),c=q(a.Wc,a),d=q(a.Df,a),e=a.id+":"+Nh++;a.Ia=new yh(e,a.F,b,c,d,function(b){O(b+" ("+a.F.toString()+")");a.xf=!0},a.Bb)}}g.yb=function(){this.Ee=!0;this.Ia?this.Ia.close():(this.sb&&(clearTimeout(this.sb),this.sb=null),this.oa&&this.Df())};g.rc=function(){this.Ee=!1;this.Za=1E3;this.Ia||Mh(this,0)};
	function Uh(a,b,c){c=c?Qa(c,function(a){return Uc(a)}).join("$"):"default";(a=Ph(a,b,c))&&a.H&&a.H("permission_denied")}function Ph(a,b,c){b=(new L(b)).toString();var d;n(a.$[b])?(d=a.$[b][c],delete a.$[b][c],0===pa(a.$[b])&&delete a.$[b]):d=void 0;return d}function Vh(a){Qh(a);r(a.$,function(b){r(b,function(b){Oh(a,b)})});for(var b=0;b<a.qa.length;b++)a.qa[b]&&Th(a,b);for(;a.Vc.length;)b=a.Vc.shift(),Rh(a,b.action,b.$c,b.data,b.H)}function Xh(a){var b;b=Ge.ub().kc;return!a.xf&&!a.Ee&&b};var V={og:function(){ih=rh=!0}};V.forceLongPolling=V.og;V.pg=function(){jh=!0};V.forceWebSockets=V.pg;V.Pg=function(a,b){a.k.Ra.We=b};V.setSecurityDebugCallback=V.Pg;V.Ye=function(a,b){a.k.Ye(b)};V.stats=V.Ye;V.Ze=function(a,b){a.k.Ze(b)};V.statsIncrementCounter=V.Ze;V.sd=function(a){return a.k.sd};V.dataUpdateCount=V.sd;V.sg=function(a,b){a.k.De=b};V.interceptServerData=V.sg;V.yg=function(a){new Ig(a)};V.onPopupOpen=V.yg;V.Ng=function(a){sg=a};V.setAuthenticationServer=V.Ng;function Q(a,b,c){this.A=a;this.W=b;this.g=c}Q.prototype.I=function(){x("Firebase.DataSnapshot.val",0,0,arguments.length);return this.A.I()};Q.prototype.val=Q.prototype.I;Q.prototype.mf=function(){x("Firebase.DataSnapshot.exportVal",0,0,arguments.length);return this.A.I(!0)};Q.prototype.exportVal=Q.prototype.mf;Q.prototype.ng=function(){x("Firebase.DataSnapshot.exists",0,0,arguments.length);return!this.A.e()};Q.prototype.exists=Q.prototype.ng;
	Q.prototype.u=function(a){x("Firebase.DataSnapshot.child",0,1,arguments.length);ga(a)&&(a=String(a));ig("Firebase.DataSnapshot.child",a);var b=new L(a),c=this.W.u(b);return new Q(this.A.Q(b),c,N)};Q.prototype.child=Q.prototype.u;Q.prototype.Da=function(a){x("Firebase.DataSnapshot.hasChild",1,1,arguments.length);ig("Firebase.DataSnapshot.hasChild",a);var b=new L(a);return!this.A.Q(b).e()};Q.prototype.hasChild=Q.prototype.Da;
	Q.prototype.C=function(){x("Firebase.DataSnapshot.getPriority",0,0,arguments.length);return this.A.C().I()};Q.prototype.getPriority=Q.prototype.C;Q.prototype.forEach=function(a){x("Firebase.DataSnapshot.forEach",1,1,arguments.length);A("Firebase.DataSnapshot.forEach",1,a,!1);if(this.A.K())return!1;var b=this;return!!this.A.P(this.g,function(c,d){return a(new Q(d,b.W.u(c),N))})};Q.prototype.forEach=Q.prototype.forEach;
	Q.prototype.wd=function(){x("Firebase.DataSnapshot.hasChildren",0,0,arguments.length);return this.A.K()?!1:!this.A.e()};Q.prototype.hasChildren=Q.prototype.wd;Q.prototype.name=function(){O("Firebase.DataSnapshot.name() being deprecated. Please use Firebase.DataSnapshot.key() instead.");x("Firebase.DataSnapshot.name",0,0,arguments.length);return this.key()};Q.prototype.name=Q.prototype.name;Q.prototype.key=function(){x("Firebase.DataSnapshot.key",0,0,arguments.length);return this.W.key()};
	Q.prototype.key=Q.prototype.key;Q.prototype.Db=function(){x("Firebase.DataSnapshot.numChildren",0,0,arguments.length);return this.A.Db()};Q.prototype.numChildren=Q.prototype.Db;Q.prototype.Ib=function(){x("Firebase.DataSnapshot.ref",0,0,arguments.length);return this.W};Q.prototype.ref=Q.prototype.Ib;function Yh(a,b){this.F=a;this.Ua=Rb(a);this.fd=null;this.da=new vb;this.Hd=1;this.Ra=null;b||0<=("object"===typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)?(this.ba=new Ae(this.F,q(this.Gb,this)),setTimeout(q(this.Uc,this,!0),0)):this.ba=this.Ra=new Kh(this.F,q(this.Gb,this),q(this.Uc,this),q(this.Oe,this));this.Sg=Sb(a,q(function(){return new Mb(this.Ua,this.ba)},this));this.uc=new Rf;
	this.Ce=new ob;var c=this;this.Cd=new vf({Xe:function(a,b,f,h){b=[];f=c.Ce.j(a.path);f.e()||(b=xf(c.Cd,new Xb(bf,a.path,f)),setTimeout(function(){h("ok")},0));return b},ae:ba});Zh(this,"connected",!1);this.la=new qc;this.M=new Sg(a,q(this.ba.M,this.ba),q(this.ba.ge,this.ba),q(this.Le,this));this.sd=0;this.De=null;this.L=new vf({Xe:function(a,b,f,h){c.ba.yf(a,f,b,function(b,e){var f=h(b,e);Ab(c.da,a.path,f)});return[]},ae:function(a,b){c.ba.Rf(a,b)}})}g=Yh.prototype;
	g.toString=function(){return(this.F.kb?"https://":"http://")+this.F.host};g.name=function(){return this.F.hc};function $h(a){a=a.Ce.j(new L(".info/serverTimeOffset")).I()||0;return(new Date).getTime()+a}function ai(a){a=a={timestamp:$h(a)};a.timestamp=a.timestamp||(new Date).getTime();return a}
	g.Gb=function(a,b,c,d){this.sd++;var e=new L(a);b=this.De?this.De(a,b):b;a=[];d?c?(b=na(b,function(a){return M(a)}),a=Ff(this.L,e,b,d)):(b=M(b),a=Bf(this.L,e,b,d)):c?(d=na(b,function(a){return M(a)}),a=Af(this.L,e,d)):(d=M(b),a=xf(this.L,new Xb(bf,e,d)));d=e;0<a.length&&(d=bi(this,e));Ab(this.da,d,a)};g.Uc=function(a){Zh(this,"connected",a);!1===a&&ci(this)};g.Oe=function(a){var b=this;Wc(a,function(a,d){Zh(b,d,a)})};g.Le=function(a){Zh(this,"authenticated",a)};
	function Zh(a,b,c){b=new L("/.info/"+b);c=M(c);var d=a.Ce;d.Wd=d.Wd.G(b,c);c=xf(a.Cd,new Xb(bf,b,c));Ab(a.da,b,c)}g.Kb=function(a,b,c,d){this.f("set",{path:a.toString(),value:b,$g:c});var e=ai(this);b=M(b,c);var e=sc(b,e),f=this.Hd++,e=wf(this.L,a,e,f,!0);wb(this.da,e);var h=this;this.ba.put(a.toString(),b.I(!0),function(b,c){var e="ok"===b;e||O("set at "+a+" failed: "+b);e=zf(h.L,f,!e);Ab(h.da,a,e);di(d,b,c)});e=ei(this,a);bi(this,e);Ab(this.da,e,[])};
	g.update=function(a,b,c){this.f("update",{path:a.toString(),value:b});var d=!0,e=ai(this),f={};r(b,function(a,b){d=!1;var c=M(a);f[b]=sc(c,e)});if(d)Cb("update() called with empty data.  Don't do anything."),di(c,"ok");else{var h=this.Hd++,k=yf(this.L,a,f,h);wb(this.da,k);var l=this;this.ba.zf(a.toString(),b,function(b,d){var e="ok"===b;e||O("update at "+a+" failed: "+b);var e=zf(l.L,h,!e),f=a;0<e.length&&(f=bi(l,a));Ab(l.da,f,e);di(c,b,d)});b=ei(this,a);bi(this,b);Ab(this.da,a,[])}};
	function ci(a){a.f("onDisconnectEvents");var b=ai(a),c=[];rc(pc(a.la,b),G,function(b,e){c=c.concat(xf(a.L,new Xb(bf,b,e)));var f=ei(a,b);bi(a,f)});a.la=new qc;Ab(a.da,G,c)}g.Jd=function(a,b){var c=this;this.ba.Jd(a.toString(),function(d,e){"ok"===d&&rg(c.la,a);di(b,d,e)})};function fi(a,b,c,d){var e=M(c);a.ba.Me(b.toString(),e.I(!0),function(c,h){"ok"===c&&a.la.nc(b,e);di(d,c,h)})}function gi(a,b,c,d,e){var f=M(c,d);a.ba.Me(b.toString(),f.I(!0),function(c,d){"ok"===c&&a.la.nc(b,f);di(e,c,d)})}
	function hi(a,b,c,d){var e=!0,f;for(f in c)e=!1;e?(Cb("onDisconnect().update() called with empty data.  Don't do anything."),di(d,"ok")):a.ba.Cf(b.toString(),c,function(e,f){if("ok"===e)for(var l in c){var m=M(c[l]);a.la.nc(b.u(l),m)}di(d,e,f)})}function ii(a,b,c){c=".info"===E(b.path)?a.Cd.Pb(b,c):a.L.Pb(b,c);yb(a.da,b.path,c)}g.yb=function(){this.Ra&&this.Ra.yb()};g.rc=function(){this.Ra&&this.Ra.rc()};
	g.Ye=function(a){if("undefined"!==typeof console){a?(this.fd||(this.fd=new Lb(this.Ua)),a=this.fd.get()):a=this.Ua.get();var b=Ra(sa(a),function(a,b){return Math.max(b.length,a)},0),c;for(c in a){for(var d=a[c],e=c.length;e<b+2;e++)c+=" ";console.log(c+d)}}};g.Ze=function(a){Ob(this.Ua,a);this.Sg.Of[a]=!0};g.f=function(a){var b="";this.Ra&&(b=this.Ra.id+":");Cb(b,arguments)};
	function di(a,b,c){a&&Db(function(){if("ok"==b)a(null);else{var d=(b||"error").toUpperCase(),e=d;c&&(e+=": "+c);e=Error(e);e.code=d;a(e)}})};function ji(a,b,c,d,e){function f(){}a.f("transaction on "+b);var h=new U(a,b);h.Eb("value",f);c={path:b,update:c,H:d,status:null,Ff:Ec(),cf:e,Lf:0,ie:function(){h.ic("value",f)},ke:null,Ba:null,pd:null,qd:null,rd:null};d=a.L.za(b,void 0)||C;c.pd=d;d=c.update(d.I());if(n(d)){cg("transaction failed: Data returned ",d,c.path);c.status=1;e=Sf(a.uc,b);var k=e.Ca()||[];k.push(c);Tf(e,k);"object"===typeof d&&null!==d&&v(d,".priority")?(k=w(d,".priority"),K(ag(k),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):
	k=(a.L.za(b)||C).C().I();e=ai(a);d=M(d,k);e=sc(d,e);c.qd=d;c.rd=e;c.Ba=a.Hd++;c=wf(a.L,b,e,c.Ba,c.cf);Ab(a.da,b,c);ki(a)}else c.ie(),c.qd=null,c.rd=null,c.H&&(a=new Q(c.pd,new U(a,c.path),N),c.H(null,!1,a))}function ki(a,b){var c=b||a.uc;b||li(a,c);if(null!==c.Ca()){var d=mi(a,c);K(0<d.length,"Sending zero length transaction queue");Sa(d,function(a){return 1===a.status})&&ni(a,c.path(),d)}else c.wd()&&c.P(function(b){ki(a,b)})}
	function ni(a,b,c){for(var d=Qa(c,function(a){return a.Ba}),e=a.L.za(b,d)||C,d=e,e=e.hash(),f=0;f<c.length;f++){var h=c[f];K(1===h.status,"tryToSendTransactionQueue_: items in queue should all be run.");h.status=2;h.Lf++;var k=T(b,h.path),d=d.G(k,h.qd)}d=d.I(!0);a.ba.put(b.toString(),d,function(d){a.f("transaction put response",{path:b.toString(),status:d});var e=[];if("ok"===d){d=[];for(f=0;f<c.length;f++){c[f].status=3;e=e.concat(zf(a.L,c[f].Ba));if(c[f].H){var h=c[f].rd,k=new U(a,c[f].path);d.push(q(c[f].H,
	null,null,!0,new Q(h,k,N)))}c[f].ie()}li(a,Sf(a.uc,b));ki(a);Ab(a.da,b,e);for(f=0;f<d.length;f++)Db(d[f])}else{if("datastale"===d)for(f=0;f<c.length;f++)c[f].status=4===c[f].status?5:1;else for(O("transaction at "+b.toString()+" failed: "+d),f=0;f<c.length;f++)c[f].status=5,c[f].ke=d;bi(a,b)}},e)}function bi(a,b){var c=oi(a,b),d=c.path(),c=mi(a,c);pi(a,c,d);return d}
	function pi(a,b,c){if(0!==b.length){for(var d=[],e=[],f=Qa(b,function(a){return a.Ba}),h=0;h<b.length;h++){var k=b[h],l=T(c,k.path),m=!1,t;K(null!==l,"rerunTransactionsUnderNode_: relativePath should not be null.");if(5===k.status)m=!0,t=k.ke,e=e.concat(zf(a.L,k.Ba,!0));else if(1===k.status)if(25<=k.Lf)m=!0,t="maxretry",e=e.concat(zf(a.L,k.Ba,!0));else{var z=a.L.za(k.path,f)||C;k.pd=z;var I=b[h].update(z.I());n(I)?(cg("transaction failed: Data returned ",I,k.path),l=M(I),"object"===typeof I&&null!=
	I&&v(I,".priority")||(l=l.ga(z.C())),z=k.Ba,I=ai(a),I=sc(l,I),k.qd=l,k.rd=I,k.Ba=a.Hd++,Va(f,z),e=e.concat(wf(a.L,k.path,I,k.Ba,k.cf)),e=e.concat(zf(a.L,z,!0))):(m=!0,t="nodata",e=e.concat(zf(a.L,k.Ba,!0)))}Ab(a.da,c,e);e=[];m&&(b[h].status=3,setTimeout(b[h].ie,Math.floor(0)),b[h].H&&("nodata"===t?(k=new U(a,b[h].path),d.push(q(b[h].H,null,null,!1,new Q(b[h].pd,k,N)))):d.push(q(b[h].H,null,Error(t),!1,null))))}li(a,a.uc);for(h=0;h<d.length;h++)Db(d[h]);ki(a)}}
	function oi(a,b){for(var c,d=a.uc;null!==(c=E(b))&&null===d.Ca();)d=Sf(d,c),b=H(b);return d}function mi(a,b){var c=[];qi(a,b,c);c.sort(function(a,b){return a.Ff-b.Ff});return c}function qi(a,b,c){var d=b.Ca();if(null!==d)for(var e=0;e<d.length;e++)c.push(d[e]);b.P(function(b){qi(a,b,c)})}function li(a,b){var c=b.Ca();if(c){for(var d=0,e=0;e<c.length;e++)3!==c[e].status&&(c[d]=c[e],d++);c.length=d;Tf(b,0<c.length?c:null)}b.P(function(b){li(a,b)})}
	function ei(a,b){var c=oi(a,b).path(),d=Sf(a.uc,b);Wf(d,function(b){ri(a,b)});ri(a,d);Vf(d,function(b){ri(a,b)});return c}
	function ri(a,b){var c=b.Ca();if(null!==c){for(var d=[],e=[],f=-1,h=0;h<c.length;h++)4!==c[h].status&&(2===c[h].status?(K(f===h-1,"All SENT items should be at beginning of queue."),f=h,c[h].status=4,c[h].ke="set"):(K(1===c[h].status,"Unexpected transaction status in abort"),c[h].ie(),e=e.concat(zf(a.L,c[h].Ba,!0)),c[h].H&&d.push(q(c[h].H,null,Error("set"),!1,null))));-1===f?Tf(b,null):c.length=f+1;Ab(a.da,b.path(),e);for(h=0;h<d.length;h++)Db(d[h])}};function W(){this.oc={};this.Sf=!1}W.prototype.yb=function(){for(var a in this.oc)this.oc[a].yb()};W.prototype.rc=function(){for(var a in this.oc)this.oc[a].rc()};W.prototype.ve=function(){this.Sf=!0};ca(W);W.prototype.interrupt=W.prototype.yb;W.prototype.resume=W.prototype.rc;function X(a,b){this.bd=a;this.ra=b}X.prototype.cancel=function(a){x("Firebase.onDisconnect().cancel",0,1,arguments.length);A("Firebase.onDisconnect().cancel",1,a,!0);this.bd.Jd(this.ra,a||null)};X.prototype.cancel=X.prototype.cancel;X.prototype.remove=function(a){x("Firebase.onDisconnect().remove",0,1,arguments.length);jg("Firebase.onDisconnect().remove",this.ra);A("Firebase.onDisconnect().remove",1,a,!0);fi(this.bd,this.ra,null,a)};X.prototype.remove=X.prototype.remove;
	X.prototype.set=function(a,b){x("Firebase.onDisconnect().set",1,2,arguments.length);jg("Firebase.onDisconnect().set",this.ra);bg("Firebase.onDisconnect().set",a,this.ra,!1);A("Firebase.onDisconnect().set",2,b,!0);fi(this.bd,this.ra,a,b)};X.prototype.set=X.prototype.set;
	X.prototype.Kb=function(a,b,c){x("Firebase.onDisconnect().setWithPriority",2,3,arguments.length);jg("Firebase.onDisconnect().setWithPriority",this.ra);bg("Firebase.onDisconnect().setWithPriority",a,this.ra,!1);fg("Firebase.onDisconnect().setWithPriority",2,b);A("Firebase.onDisconnect().setWithPriority",3,c,!0);gi(this.bd,this.ra,a,b,c)};X.prototype.setWithPriority=X.prototype.Kb;
	X.prototype.update=function(a,b){x("Firebase.onDisconnect().update",1,2,arguments.length);jg("Firebase.onDisconnect().update",this.ra);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;O("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}eg("Firebase.onDisconnect().update",a,this.ra);A("Firebase.onDisconnect().update",2,b,!0);
	hi(this.bd,this.ra,a,b)};X.prototype.update=X.prototype.update;function Y(a,b,c,d){this.k=a;this.path=b;this.n=c;this.lc=d}
	function si(a){var b=null,c=null;a.ma&&(b=nd(a));a.pa&&(c=pd(a));if(a.g===Qd){if(a.ma){if("[MIN_NAME]"!=md(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==typeof b)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}if(a.pa){if("[MAX_NAME]"!=od(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==
	typeof c)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}}else if(a.g===N){if(null!=b&&!ag(b)||null!=c&&!ag(c))throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).");}else if(K(a.g instanceof Ud||a.g===$d,"unknown index type."),null!=b&&"object"===typeof b||null!=c&&"object"===typeof c)throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.");
	}function ti(a){if(a.ma&&a.pa&&a.ja&&(!a.ja||""===a.Nb))throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");}function ui(a,b){if(!0===a.lc)throw Error(b+": You can't combine multiple orderBy calls.");}g=Y.prototype;g.Ib=function(){x("Query.ref",0,0,arguments.length);return new U(this.k,this.path)};
	g.Eb=function(a,b,c,d){x("Query.on",2,4,arguments.length);gg("Query.on",a,!1);A("Query.on",2,b,!1);var e=vi("Query.on",c,d);if("value"===a)ii(this.k,this,new id(b,e.cancel||null,e.Ma||null));else{var f={};f[a]=b;ii(this.k,this,new jd(f,e.cancel,e.Ma))}return b};
	g.ic=function(a,b,c){x("Query.off",0,3,arguments.length);gg("Query.off",a,!0);A("Query.off",2,b,!0);mb("Query.off",3,c);var d=null,e=null;"value"===a?d=new id(b||null,null,c||null):a&&(b&&(e={},e[a]=b),d=new jd(e,null,c||null));e=this.k;d=".info"===E(this.path)?e.Cd.jb(this,d):e.L.jb(this,d);yb(e.da,this.path,d)};
	g.Dg=function(a,b){function c(h){f&&(f=!1,e.ic(a,c),b.call(d.Ma,h))}x("Query.once",2,4,arguments.length);gg("Query.once",a,!1);A("Query.once",2,b,!1);var d=vi("Query.once",arguments[2],arguments[3]),e=this,f=!0;this.Eb(a,c,function(b){e.ic(a,c);d.cancel&&d.cancel.call(d.Ma,b)})};
	g.He=function(a){O("Query.limit() being deprecated. Please use Query.limitToFirst() or Query.limitToLast() instead.");x("Query.limit",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limit: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limit: Limit was already set (by another call to limit, limitToFirst, orlimitToLast.");var b=this.n.He(a);ti(b);return new Y(this.k,this.path,b,this.lc)};
	g.Ie=function(a){x("Query.limitToFirst",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToFirst: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.n.Ie(a),this.lc)};
	g.Je=function(a){x("Query.limitToLast",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToLast: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.n.Je(a),this.lc)};
	g.Eg=function(a){x("Query.orderByChild",1,1,arguments.length);if("$key"===a)throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===a)throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===a)throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');ig("Query.orderByChild",a);ui(this,"Query.orderByChild");var b=new L(a);if(b.e())throw Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");
	b=new Ud(b);b=de(this.n,b);si(b);return new Y(this.k,this.path,b,!0)};g.Fg=function(){x("Query.orderByKey",0,0,arguments.length);ui(this,"Query.orderByKey");var a=de(this.n,Qd);si(a);return new Y(this.k,this.path,a,!0)};g.Gg=function(){x("Query.orderByPriority",0,0,arguments.length);ui(this,"Query.orderByPriority");var a=de(this.n,N);si(a);return new Y(this.k,this.path,a,!0)};
	g.Hg=function(){x("Query.orderByValue",0,0,arguments.length);ui(this,"Query.orderByValue");var a=de(this.n,$d);si(a);return new Y(this.k,this.path,a,!0)};g.$d=function(a,b){x("Query.startAt",0,2,arguments.length);bg("Query.startAt",a,this.path,!0);hg("Query.startAt",b);var c=this.n.$d(a,b);ti(c);si(c);if(this.n.ma)throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");n(a)||(b=a=null);return new Y(this.k,this.path,c,this.lc)};
	g.td=function(a,b){x("Query.endAt",0,2,arguments.length);bg("Query.endAt",a,this.path,!0);hg("Query.endAt",b);var c=this.n.td(a,b);ti(c);si(c);if(this.n.pa)throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new Y(this.k,this.path,c,this.lc)};
	g.kg=function(a,b){x("Query.equalTo",1,2,arguments.length);bg("Query.equalTo",a,this.path,!1);hg("Query.equalTo",b);if(this.n.ma)throw Error("Query.equalTo: Starting point was already set (by another call to endAt or equalTo).");if(this.n.pa)throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.$d(a,b).td(a,b)};
	g.toString=function(){x("Query.toString",0,0,arguments.length);for(var a=this.path,b="",c=a.Z;c<a.o.length;c++)""!==a.o[c]&&(b+="/"+encodeURIComponent(String(a.o[c])));return this.k.toString()+(b||"/")};g.va=function(){var a=Uc(ee(this.n));return"{}"===a?"default":a};
	function vi(a,b,c){var d={cancel:null,Ma:null};if(b&&c)d.cancel=b,A(a,3,d.cancel,!0),d.Ma=c,mb(a,4,d.Ma);else if(b)if("object"===typeof b&&null!==b)d.Ma=b;else if("function"===typeof b)d.cancel=b;else throw Error(y(a,3,!0)+" must either be a cancel callback or a context object.");return d}Y.prototype.ref=Y.prototype.Ib;Y.prototype.on=Y.prototype.Eb;Y.prototype.off=Y.prototype.ic;Y.prototype.once=Y.prototype.Dg;Y.prototype.limit=Y.prototype.He;Y.prototype.limitToFirst=Y.prototype.Ie;
	Y.prototype.limitToLast=Y.prototype.Je;Y.prototype.orderByChild=Y.prototype.Eg;Y.prototype.orderByKey=Y.prototype.Fg;Y.prototype.orderByPriority=Y.prototype.Gg;Y.prototype.orderByValue=Y.prototype.Hg;Y.prototype.startAt=Y.prototype.$d;Y.prototype.endAt=Y.prototype.td;Y.prototype.equalTo=Y.prototype.kg;Y.prototype.toString=Y.prototype.toString;var Z={};Z.vc=Kh;Z.DataConnection=Z.vc;Kh.prototype.Rg=function(a,b){this.Fa("q",{p:a},b)};Z.vc.prototype.simpleListen=Z.vc.prototype.Rg;Kh.prototype.jg=function(a,b){this.Fa("echo",{d:a},b)};Z.vc.prototype.echo=Z.vc.prototype.jg;Kh.prototype.interrupt=Kh.prototype.yb;Z.Vf=yh;Z.RealTimeConnection=Z.Vf;yh.prototype.sendRequest=yh.prototype.Fa;yh.prototype.close=yh.prototype.close;
	Z.rg=function(a){var b=Kh.prototype.put;Kh.prototype.put=function(c,d,e,f){n(f)&&(f=a());b.call(this,c,d,e,f)};return function(){Kh.prototype.put=b}};Z.hijackHash=Z.rg;Z.Uf=zc;Z.ConnectionTarget=Z.Uf;Z.va=function(a){return a.va()};Z.queryIdentifier=Z.va;Z.tg=function(a){return a.k.Ra.$};Z.listens=Z.tg;Z.ve=function(a){a.ve()};Z.forceRestClient=Z.ve;function U(a,b){var c,d,e;if(a instanceof Yh)c=a,d=b;else{x("new Firebase",1,2,arguments.length);d=Pc(arguments[0]);c=d.Tg;"firebase"===d.domain&&Oc(d.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");c&&"undefined"!=c||Oc("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");d.kb||"undefined"!==typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&O("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
	c=new zc(d.host,d.kb,c,"ws"===d.scheme||"wss"===d.scheme);d=new L(d.$c);e=d.toString();var f;!(f=!p(c.host)||0===c.host.length||!$f(c.hc))&&(f=0!==e.length)&&(e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),f=!(p(e)&&0!==e.length&&!Yf.test(e)));if(f)throw Error(y("new Firebase",1,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');if(b)if(b instanceof W)e=b;else if(p(b))e=W.ub(),c.Od=b;else throw Error("Expected a valid Firebase.Context for second argument to new Firebase()");
	else e=W.ub();f=c.toString();var h=w(e.oc,f);h||(h=new Yh(c,e.Sf),e.oc[f]=h);c=h}Y.call(this,c,d,be,!1)}ma(U,Y);var wi=U,xi=["Firebase"],yi=aa;xi[0]in yi||!yi.execScript||yi.execScript("var "+xi[0]);for(var zi;xi.length&&(zi=xi.shift());)!xi.length&&n(wi)?yi[zi]=wi:yi=yi[zi]?yi[zi]:yi[zi]={};U.goOffline=function(){x("Firebase.goOffline",0,0,arguments.length);W.ub().yb()};U.goOnline=function(){x("Firebase.goOnline",0,0,arguments.length);W.ub().rc()};
	function Lc(a,b){K(!b||!0===a||!1===a,"Can't turn on custom loggers persistently.");!0===a?("undefined"!==typeof console&&("function"===typeof console.log?Bb=q(console.log,console):"object"===typeof console.log&&(Bb=function(a){console.log(a)})),b&&yc.set("logging_enabled",!0)):a?Bb=a:(Bb=null,yc.remove("logging_enabled"))}U.enableLogging=Lc;U.ServerValue={TIMESTAMP:{".sv":"timestamp"}};U.SDK_VERSION=hb;U.INTERNAL=V;U.Context=W;U.TEST_ACCESS=Z;
	U.prototype.name=function(){O("Firebase.name() being deprecated. Please use Firebase.key() instead.");x("Firebase.name",0,0,arguments.length);return this.key()};U.prototype.name=U.prototype.name;U.prototype.key=function(){x("Firebase.key",0,0,arguments.length);return this.path.e()?null:Ld(this.path)};U.prototype.key=U.prototype.key;
	U.prototype.u=function(a){x("Firebase.child",1,1,arguments.length);if(ga(a))a=String(a);else if(!(a instanceof L))if(null===E(this.path)){var b=a;b&&(b=b.replace(/^\/*\.info(\/|$)/,"/"));ig("Firebase.child",b)}else ig("Firebase.child",a);return new U(this.k,this.path.u(a))};U.prototype.child=U.prototype.u;U.prototype.parent=function(){x("Firebase.parent",0,0,arguments.length);var a=this.path.parent();return null===a?null:new U(this.k,a)};U.prototype.parent=U.prototype.parent;
	U.prototype.root=function(){x("Firebase.ref",0,0,arguments.length);for(var a=this;null!==a.parent();)a=a.parent();return a};U.prototype.root=U.prototype.root;U.prototype.set=function(a,b){x("Firebase.set",1,2,arguments.length);jg("Firebase.set",this.path);bg("Firebase.set",a,this.path,!1);A("Firebase.set",2,b,!0);this.k.Kb(this.path,a,null,b||null)};U.prototype.set=U.prototype.set;
	U.prototype.update=function(a,b){x("Firebase.update",1,2,arguments.length);jg("Firebase.update",this.path);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;O("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}eg("Firebase.update",a,this.path);A("Firebase.update",2,b,!0);this.k.update(this.path,a,b||null)};U.prototype.update=U.prototype.update;
	U.prototype.Kb=function(a,b,c){x("Firebase.setWithPriority",2,3,arguments.length);jg("Firebase.setWithPriority",this.path);bg("Firebase.setWithPriority",a,this.path,!1);fg("Firebase.setWithPriority",2,b);A("Firebase.setWithPriority",3,c,!0);if(".length"===this.key()||".keys"===this.key())throw"Firebase.setWithPriority failed: "+this.key()+" is a read-only object.";this.k.Kb(this.path,a,b,c||null)};U.prototype.setWithPriority=U.prototype.Kb;
	U.prototype.remove=function(a){x("Firebase.remove",0,1,arguments.length);jg("Firebase.remove",this.path);A("Firebase.remove",1,a,!0);this.set(null,a)};U.prototype.remove=U.prototype.remove;
	U.prototype.transaction=function(a,b,c){x("Firebase.transaction",1,3,arguments.length);jg("Firebase.transaction",this.path);A("Firebase.transaction",1,a,!1);A("Firebase.transaction",2,b,!0);if(n(c)&&"boolean"!=typeof c)throw Error(y("Firebase.transaction",3,!0)+"must be a boolean.");if(".length"===this.key()||".keys"===this.key())throw"Firebase.transaction failed: "+this.key()+" is a read-only object.";"undefined"===typeof c&&(c=!0);ji(this.k,this.path,a,b||null,c)};U.prototype.transaction=U.prototype.transaction;
	U.prototype.Og=function(a,b){x("Firebase.setPriority",1,2,arguments.length);jg("Firebase.setPriority",this.path);fg("Firebase.setPriority",1,a);A("Firebase.setPriority",2,b,!0);this.k.Kb(this.path.u(".priority"),a,null,b)};U.prototype.setPriority=U.prototype.Og;
	U.prototype.push=function(a,b){x("Firebase.push",0,2,arguments.length);jg("Firebase.push",this.path);bg("Firebase.push",a,this.path,!0);A("Firebase.push",2,b,!0);var c=$h(this.k),c=Fe(c),c=this.u(c);"undefined"!==typeof a&&null!==a&&c.set(a,b);return c};U.prototype.push=U.prototype.push;U.prototype.hb=function(){jg("Firebase.onDisconnect",this.path);return new X(this.k,this.path)};U.prototype.onDisconnect=U.prototype.hb;
	U.prototype.M=function(a,b,c){O("FirebaseRef.auth() being deprecated. Please use FirebaseRef.authWithCustomToken() instead.");x("Firebase.auth",1,3,arguments.length);kg("Firebase.auth",a);A("Firebase.auth",2,b,!0);A("Firebase.auth",3,b,!0);Yg(this.k.M,a,{},{remember:"none"},b,c)};U.prototype.auth=U.prototype.M;U.prototype.ge=function(a){x("Firebase.unauth",0,1,arguments.length);A("Firebase.unauth",1,a,!0);Zg(this.k.M,a)};U.prototype.unauth=U.prototype.ge;
	U.prototype.xe=function(){x("Firebase.getAuth",0,0,arguments.length);return this.k.M.xe()};U.prototype.getAuth=U.prototype.xe;U.prototype.xg=function(a,b){x("Firebase.onAuth",1,2,arguments.length);A("Firebase.onAuth",1,a,!1);mb("Firebase.onAuth",2,b);this.k.M.Eb("auth_status",a,b)};U.prototype.onAuth=U.prototype.xg;U.prototype.wg=function(a,b){x("Firebase.offAuth",1,2,arguments.length);A("Firebase.offAuth",1,a,!1);mb("Firebase.offAuth",2,b);this.k.M.ic("auth_status",a,b)};U.prototype.offAuth=U.prototype.wg;
	U.prototype.Zf=function(a,b,c){x("Firebase.authWithCustomToken",2,3,arguments.length);kg("Firebase.authWithCustomToken",a);A("Firebase.authWithCustomToken",2,b,!1);ng("Firebase.authWithCustomToken",3,c,!0);Yg(this.k.M,a,{},c||{},b)};U.prototype.authWithCustomToken=U.prototype.Zf;U.prototype.$f=function(a,b,c){x("Firebase.authWithOAuthPopup",2,3,arguments.length);mg("Firebase.authWithOAuthPopup",a);A("Firebase.authWithOAuthPopup",2,b,!1);ng("Firebase.authWithOAuthPopup",3,c,!0);ch(this.k.M,a,c,b)};
	U.prototype.authWithOAuthPopup=U.prototype.$f;U.prototype.ag=function(a,b,c){x("Firebase.authWithOAuthRedirect",2,3,arguments.length);mg("Firebase.authWithOAuthRedirect",a);A("Firebase.authWithOAuthRedirect",2,b,!1);ng("Firebase.authWithOAuthRedirect",3,c,!0);var d=this.k.M;ah(d);var e=[Kg],f=vg(c);"anonymous"===a||"firebase"===a?P(b,Mg("TRANSPORT_UNAVAILABLE")):(yc.set("redirect_client_options",f.od),bh(d,e,"/auth/"+a,f,b))};U.prototype.authWithOAuthRedirect=U.prototype.ag;
	U.prototype.bg=function(a,b,c,d){x("Firebase.authWithOAuthToken",3,4,arguments.length);mg("Firebase.authWithOAuthToken",a);A("Firebase.authWithOAuthToken",3,c,!1);ng("Firebase.authWithOAuthToken",4,d,!0);p(b)?(lg("Firebase.authWithOAuthToken",2,b),$g(this.k.M,a+"/token",{access_token:b},d,c)):(ng("Firebase.authWithOAuthToken",2,b,!1),$g(this.k.M,a+"/token",b,d,c))};U.prototype.authWithOAuthToken=U.prototype.bg;
	U.prototype.Yf=function(a,b){x("Firebase.authAnonymously",1,2,arguments.length);A("Firebase.authAnonymously",1,a,!1);ng("Firebase.authAnonymously",2,b,!0);$g(this.k.M,"anonymous",{},b,a)};U.prototype.authAnonymously=U.prototype.Yf;
	U.prototype.cg=function(a,b,c){x("Firebase.authWithPassword",2,3,arguments.length);ng("Firebase.authWithPassword",1,a,!1);og("Firebase.authWithPassword",a,"email");og("Firebase.authWithPassword",a,"password");A("Firebase.authWithPassword",2,b,!1);ng("Firebase.authWithPassword",3,c,!0);$g(this.k.M,"password",a,c,b)};U.prototype.authWithPassword=U.prototype.cg;
	U.prototype.se=function(a,b){x("Firebase.createUser",2,2,arguments.length);ng("Firebase.createUser",1,a,!1);og("Firebase.createUser",a,"email");og("Firebase.createUser",a,"password");A("Firebase.createUser",2,b,!1);this.k.M.se(a,b)};U.prototype.createUser=U.prototype.se;U.prototype.Te=function(a,b){x("Firebase.removeUser",2,2,arguments.length);ng("Firebase.removeUser",1,a,!1);og("Firebase.removeUser",a,"email");og("Firebase.removeUser",a,"password");A("Firebase.removeUser",2,b,!1);this.k.M.Te(a,b)};
	U.prototype.removeUser=U.prototype.Te;U.prototype.pe=function(a,b){x("Firebase.changePassword",2,2,arguments.length);ng("Firebase.changePassword",1,a,!1);og("Firebase.changePassword",a,"email");og("Firebase.changePassword",a,"oldPassword");og("Firebase.changePassword",a,"newPassword");A("Firebase.changePassword",2,b,!1);this.k.M.pe(a,b)};U.prototype.changePassword=U.prototype.pe;
	U.prototype.oe=function(a,b){x("Firebase.changeEmail",2,2,arguments.length);ng("Firebase.changeEmail",1,a,!1);og("Firebase.changeEmail",a,"oldEmail");og("Firebase.changeEmail",a,"newEmail");og("Firebase.changeEmail",a,"password");A("Firebase.changeEmail",2,b,!1);this.k.M.oe(a,b)};U.prototype.changeEmail=U.prototype.oe;
	U.prototype.Ve=function(a,b){x("Firebase.resetPassword",2,2,arguments.length);ng("Firebase.resetPassword",1,a,!1);og("Firebase.resetPassword",a,"email");A("Firebase.resetPassword",2,b,!1);this.k.M.Ve(a,b)};U.prototype.resetPassword=U.prototype.Ve;})();

	module.exports = Firebase;


/***/ },
/* 29 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @mixin
	 */
	var crcTable = (function () {
		var crcTable = [],
			c, n, k;

		for (n = 0; n < 256; n++) {
			c = n;

			for (k = 0; k < 8; k++) {
				c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1)); // jshint ignore:line
			}

			crcTable[n] = c;
		}

		return crcTable;
	}());

	module.exports = function(str) {
		var crc = 0 ^ (-1), // jshint ignore:line
			i;

		for (i = 0; i < str.length; i++) {
			crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF]; // jshint ignore:line
		}

		return (crc ^ (-1)) >>> 0; // jshint ignore:line
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// TODO: Remove the _update* methods because we are already mixing them
	// TODO: in now via Mixin.Updating and update autobind to extend the _update*
	// TODO: methods like we already do with collection
	var Shared,
		Collection,
		Db;

	Shared = __webpack_require__(3);

	/**
	 * Creates a new Document instance. Documents allow you to create individual
	 * objects that can have standard ForerunnerDB CRUD operations run against
	 * them, as well as data-binding if the AutoBind module is included in your
	 * project.
	 * @name Document
	 * @class Document
	 * @constructor
	 */
	var FdbDocument = function () {
		this.init.apply(this, arguments);
	};

	FdbDocument.prototype.init = function (name) {
		this._name = name;
		this._data = {};
	};

	Shared.addModule('Document', FdbDocument);
	Shared.mixin(FdbDocument.prototype, 'Mixin.Common');
	Shared.mixin(FdbDocument.prototype, 'Mixin.Events');
	Shared.mixin(FdbDocument.prototype, 'Mixin.ChainReactor');
	Shared.mixin(FdbDocument.prototype, 'Mixin.Constants');
	Shared.mixin(FdbDocument.prototype, 'Mixin.Triggers');
	Shared.mixin(FdbDocument.prototype, 'Mixin.Matching');
	Shared.mixin(FdbDocument.prototype, 'Mixin.Updating');
	Shared.mixin(FdbDocument.prototype, 'Mixin.Tags');

	Collection = __webpack_require__(5);
	Db = Shared.modules.Db;

	/**
	 * Gets / sets the current state.
	 * @func state
	 * @memberof Document
	 * @param {String=} val The name of the state to set.
	 * @returns {*}
	 */
	Shared.synthesize(FdbDocument.prototype, 'state');

	/**
	 * Gets / sets the db instance this class instance belongs to.
	 * @func db
	 * @memberof Document
	 * @param {Db=} db The db instance.
	 * @returns {*}
	 */
	Shared.synthesize(FdbDocument.prototype, 'db');

	/**
	 * Gets / sets the document name.
	 * @func name
	 * @memberof Document
	 * @param {String=} val The name to assign
	 * @returns {*}
	 */
	Shared.synthesize(FdbDocument.prototype, 'name');

	/**
	 * Sets the data for the document.
	 * @func setData
	 * @memberof Document
	 * @param data
	 * @param options
	 * @returns {Document}
	 */
	FdbDocument.prototype.setData = function (data, options) {
		var i,
			$unset;

		if (data) {
			options = options || {
				$decouple: true
			};

			if (options && options.$decouple === true) {
				data = this.decouple(data);
			}

			if (this._linked) {
				$unset = {};

				// Remove keys that don't exist in the new data from the current object
				for (i in this._data) {
					if (i.substr(0, 6) !== 'jQuery' && this._data.hasOwnProperty(i)) {
						// Check if existing data has key
						if (data[i] === undefined) {
							// Add property name to those to unset
							$unset[i] = 1;
						}
					}
				}

				data.$unset = $unset;

				// Now update the object with new data
				this.updateObject(this._data, data, {});
			} else {
				// Straight data assignment
				this._data = data;
			}

			this.deferEmit('change', {type: 'setData', data: this.decouple(this._data)});
		}

		return this;
	};

	/**
	 * Gets the document's data returned as a single object.
	 * @func find
	 * @memberof Document
	 * @param {Object} query The query object - currently unused, just
	 * provide a blank object e.g. {}
	 * @param {Object=} options An options object.
	 * @returns {Object} The document's data object.
	 */
	FdbDocument.prototype.find = function (query, options) {
		var result;

		if (options && options.$decouple === false) {
			result = this._data;
		} else {
			result = this.decouple(this._data);
		}

		return result;
	};

	/**
	 * Modifies the document. This will update the document with the data held in 'update'.
	 * @func update
	 * @memberof Document
	 * @param {Object} query The query that must be matched for a document to be
	 * operated on.
	 * @param {Object} update The object containing updated key/values. Any keys that
	 * match keys on the existing document will be overwritten with this data. Any
	 * keys that do not currently exist on the document will be added to the document.
	 * @param {Object=} options An options object.
	 * @returns {Array} The items that were updated.
	 */
	FdbDocument.prototype.update = function (query, update, options) {
		var result = this.updateObject(this._data, update, query, options);

		if (result) {
			this.deferEmit('change', {type: 'update', data: this.decouple(this._data)});
		}
	};

	/**
	 * Internal method for document updating.
	 * @func updateObject
	 * @memberof Document
	 * @param {Object} doc The document to update.
	 * @param {Object} update The object with key/value pairs to update the document with.
	 * @param {Object} query The query object that we need to match to perform an update.
	 * @param {Object} options An options object.
	 * @param {String} path The current recursive path.
	 * @param {String} opType The type of update operation to perform, if none is specified
	 * default is to set new data against matching fields.
	 * @returns {Boolean} True if the document was updated with new / changed data or
	 * false if it was not updated because the data was the same.
	 * @private
	 */
	FdbDocument.prototype.updateObject = Collection.prototype.updateObject;

	/**
	 * Determines if the passed key has an array positional mark (a dollar at the end
	 * of its name).
	 * @func _isPositionalKey
	 * @memberof Document
	 * @param {String} key The key to check.
	 * @returns {Boolean} True if it is a positional or false if not.
	 * @private
	 */
	FdbDocument.prototype._isPositionalKey = function (key) {
		return key.substr(key.length - 2, 2) === '.$';
	};

	/**
	 * Updates a property on an object depending on if the collection is
	 * currently running data-binding or not.
	 * @func _updateProperty
	 * @memberof Document
	 * @param {Object} doc The object whose property is to be updated.
	 * @param {String} prop The property to update.
	 * @param {*} val The new value of the property.
	 * @private
	 */
	FdbDocument.prototype._updateProperty = function (doc, prop, val) {
		if (this._linked) {
			window.jQuery.observable(doc).setProperty(prop, val);

			if (this.debug()) {
				console.log(this.logIdentifier() + ' Setting data-bound document property "' + prop + '"');
			}
		} else {
			doc[prop] = val;

			if (this.debug()) {
				console.log(this.logIdentifier() + ' Setting non-data-bound document property "' + prop + '"');
			}
		}
	};

	/**
	 * Increments a value for a property on a document by the passed number.
	 * @func _updateIncrement
	 * @memberof Document
	 * @param {Object} doc The document to modify.
	 * @param {String} prop The property to modify.
	 * @param {Number} val The amount to increment by.
	 * @private
	 */
	FdbDocument.prototype._updateIncrement = function (doc, prop, val) {
		if (this._linked) {
			window.jQuery.observable(doc).setProperty(prop, doc[prop] + val);
		} else {
			doc[prop] += val;
		}
	};

	/**
	 * Changes the index of an item in the passed array.
	 * @func _updateSpliceMove
	 * @memberof Document
	 * @param {Array} arr The array to modify.
	 * @param {Number} indexFrom The index to move the item from.
	 * @param {Number} indexTo The index to move the item to.
	 * @private
	 */
	FdbDocument.prototype._updateSpliceMove = function (arr, indexFrom, indexTo) {
		if (this._linked) {
			window.jQuery.observable(arr).move(indexFrom, indexTo);

			if (this.debug()) {
				console.log(this.logIdentifier() + ' Moving data-bound document array index from "' + indexFrom + '" to "' + indexTo + '"');
			}
		} else {
			arr.splice(indexTo, 0, arr.splice(indexFrom, 1)[0]);

			if (this.debug()) {
				console.log(this.logIdentifier() + ' Moving non-data-bound document array index from "' + indexFrom + '" to "' + indexTo + '"');
			}
		}
	};

	/**
	 * Inserts an item into the passed array at the specified index.
	 * @func _updateSplicePush
	 * @memberof Document
	 * @param {Array} arr The array to insert into.
	 * @param {Number} index The index to insert at.
	 * @param {Object} doc The document to insert.
	 * @private
	 */
	FdbDocument.prototype._updateSplicePush = function (arr, index, doc) {
		if (arr.length > index) {
			if (this._linked) {
				window.jQuery.observable(arr).insert(index, doc);
			} else {
				arr.splice(index, 0, doc);
			}
		} else {
			if (this._linked) {
				window.jQuery.observable(arr).insert(doc);
			} else {
				arr.push(doc);
			}
		}
	};

	/**
	 * Inserts an item at the end of an array.
	 * @func _updatePush
	 * @memberof Document
	 * @param {Array} arr The array to insert the item into.
	 * @param {Object} doc The document to insert.
	 * @private
	 */
	FdbDocument.prototype._updatePush = function (arr, doc) {
		if (this._linked) {
			window.jQuery.observable(arr).insert(doc);
		} else {
			arr.push(doc);
		}
	};

	/**
	 * Removes an item from the passed array.
	 * @func _updatePull
	 * @memberof Document
	 * @param {Array} arr The array to modify.
	 * @param {Number} index The index of the item in the array to remove.
	 * @private
	 */
	FdbDocument.prototype._updatePull = function (arr, index) {
		if (this._linked) {
			window.jQuery.observable(arr).remove(index);
		} else {
			arr.splice(index, 1);
		}
	};

	/**
	 * Multiplies a value for a property on a document by the passed number.
	 * @func _updateMultiply
	 * @memberof Document
	 * @param {Object} doc The document to modify.
	 * @param {String} prop The property to modify.
	 * @param {Number} val The amount to multiply by.
	 * @private
	 */
	FdbDocument.prototype._updateMultiply = function (doc, prop, val) {
		if (this._linked) {
			window.jQuery.observable(doc).setProperty(prop, doc[prop] * val);
		} else {
			doc[prop] *= val;
		}
	};

	/**
	 * Renames a property on a document to the passed property.
	 * @func _updateRename
	 * @memberof Document
	 * @param {Object} doc The document to modify.
	 * @param {String} prop The property to rename.
	 * @param {Number} val The new property name.
	 * @private
	 */
	FdbDocument.prototype._updateRename = function (doc, prop, val) {
		var existingVal = doc[prop];
		if (this._linked) {
			window.jQuery.observable(doc).setProperty(val, existingVal);
			window.jQuery.observable(doc).removeProperty(prop);
		} else {
			doc[val] = existingVal;
			delete doc[prop];
		}
	};

	/**
	 * Deletes a property on a document.
	 * @func _updateUnset
	 * @memberof Document
	 * @param {Object} doc The document to modify.
	 * @param {String} prop The property to delete.
	 * @private
	 */
	FdbDocument.prototype._updateUnset = function (doc, prop) {
		if (this._linked) {
			window.jQuery.observable(doc).removeProperty(prop);
		} else {
			delete doc[prop];
		}
	};

	/**
	 * Drops the document.
	 * @func drop
	 * @memberof Document
	 * @returns {boolean} True if successful, false if not.
	 */
	FdbDocument.prototype.drop = function (callback) {
		if (!this.isDropped()) {
			if (this._db && this._name) {
				if (this._db && this._db._document && this._db._document[this._name]) {
					this._state = 'dropped';

					delete this._db._document[this._name];
					delete this._data;

					this.emit('drop', this);

					if (callback) { callback(false, true); }

					return true;
				}
			}
		} else {
			return true;
		}

		return false;
	};

	/**
	 * Creates a new document instance.
	 * @func document
	 * @memberof Db
	 * @param {String} documentName The name of the document to create.
	 * @returns {*}
	 */
	Db.prototype.document = function (documentName) {
		if (documentName) {
			// Handle being passed an instance
			if (documentName instanceof FdbDocument) {
				if (documentName.state() !== 'droppped') {
					return documentName;
				} else {
					documentName = documentName.name();
				}
			}

			this._document = this._document || {};
			this._document[documentName] = this._document[documentName] || new FdbDocument(documentName).db(this);
			return this._document[documentName];
		} else {
			// Return an object of document data
			return this._document;
		}
	};

	/**
	 * Returns an array of documents the DB currently has.
	 * @func documents
	 * @memberof Db
	 * @returns {Array} An array of objects containing details of each document
	 * the database is currently managing.
	 */
	Db.prototype.documents = function () {
		var arr = [],
			item,
			i;

		for (i in this._document) {
			if (this._document.hasOwnProperty(i)) {
				item = this._document[i];

				arr.push({
					name: i,
					linked: item.isLinked !== undefined ? item.isLinked() : false
				});
			}
		}

		return arr;
	};

	Shared.finishModule('Document');
	module.exports = FdbDocument;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// Import external names locally
	var Shared,
		Db,
		Collection,
		CollectionGroup,
		CollectionInit,
		DbInit,
		ReactorIO,
		ActiveBucket;

	Shared = __webpack_require__(3);

	/**
	 * Creates a new view instance.
	 * @param {String} name The name of the view.
	 * @param {Object=} query The view's query.
	 * @param {Object=} options An options object.
	 * @constructor
	 */
	var View = function (name, query, options) {
		this.init.apply(this, arguments);
	};

	View.prototype.init = function (name, query, options) {
		var self = this;

		this._name = name;
		this._listeners = {};
		this._querySettings = {};
		this._debug = {};

		this.query(query, false);
		this.queryOptions(options, false);

		this._collectionDroppedWrap = function () {
			self._collectionDropped.apply(self, arguments);
		};

		this._privateData = new Collection(this.name() + '_internalPrivate');
	};

	Shared.addModule('View', View);
	Shared.mixin(View.prototype, 'Mixin.Common');
	Shared.mixin(View.prototype, 'Mixin.ChainReactor');
	Shared.mixin(View.prototype, 'Mixin.Constants');
	Shared.mixin(View.prototype, 'Mixin.Triggers');
	Shared.mixin(View.prototype, 'Mixin.Tags');

	Collection = __webpack_require__(5);
	CollectionGroup = __webpack_require__(13);
	ActiveBucket = __webpack_require__(50);
	ReactorIO = __webpack_require__(17);
	CollectionInit = Collection.prototype.init;
	Db = Shared.modules.Db;
	DbInit = Db.prototype.init;

	/**
	 * Gets / sets the current state.
	 * @param {String=} val The name of the state to set.
	 * @returns {*}
	 */
	Shared.synthesize(View.prototype, 'state');

	/**
	 * Gets / sets the current name.
	 * @param {String=} val The new name to set.
	 * @returns {*}
	 */
	Shared.synthesize(View.prototype, 'name');

	/**
	 * Gets / sets the current cursor.
	 * @param {String=} val The new cursor to set.
	 * @returns {*}
	 */
	Shared.synthesize(View.prototype, 'cursor', function (val) {
		if (val === undefined) {
			return this._cursor || {};
		}

		this.$super.apply(this, arguments);
	});

	/**
	 * Executes an insert against the view's underlying data-source.
	 * @see Collection::insert()
	 */
	View.prototype.insert = function () {
		this._from.insert.apply(this._from, arguments);
	};

	/**
	 * Executes an update against the view's underlying data-source.
	 * @see Collection::update()
	 */
	View.prototype.update = function () {
		this._from.update.apply(this._from, arguments);
	};

	/**
	 * Executes an updateById against the view's underlying data-source.
	 * @see Collection::updateById()
	 */
	View.prototype.updateById = function () {
		this._from.updateById.apply(this._from, arguments);
	};

	/**
	 * Executes a remove against the view's underlying data-source.
	 * @see Collection::remove()
	 */
	View.prototype.remove = function () {
		this._from.remove.apply(this._from, arguments);
	};

	/**
	 * Queries the view data.
	 * @see Collection::find()
	 * @returns {Array} The result of the find query.
	 */
	View.prototype.find = function (query, options) {
		return this.publicData().find(query, options);
	};

	/**
	 * Queries the view data for a single document.
	 * @see Collection::findOne()
	 * @returns {Object} The result of the find query.
	 */
	View.prototype.findOne = function (query, options) {
		return this.publicData().findOne(query, options);
	};

	/**
	 * Queries the view data by specific id.
	 * @see Collection::findById()
	 * @returns {Array} The result of the find query.
	 */
	View.prototype.findById = function (id, options) {
		return this.publicData().findById(id, options);
	};

	/**
	 * Queries the view data in a sub-array.
	 * @see Collection::findSub()
	 * @returns {Array} The result of the find query.
	 */
	View.prototype.findSub = function (match, path, subDocQuery, subDocOptions) {
		return this.publicData().findSub(match, path, subDocQuery, subDocOptions);
	};

	/**
	 * Queries the view data in a sub-array and returns first match.
	 * @see Collection::findSubOne()
	 * @returns {Object} The result of the find query.
	 */
	View.prototype.findSubOne = function (match, path, subDocQuery, subDocOptions) {
		return this.publicData().findSubOne(match, path, subDocQuery, subDocOptions);
	};

	/**
	 * Gets the module's internal data collection.
	 * @returns {Collection}
	 */
	View.prototype.data = function () {
		return this._privateData;
	};

	/**
	 * Sets the source from which the view will assemble its data.
	 * @param {Collection|View} source The source to use to assemble view data.
	 * @param {Function=} callback A callback method.
	 * @returns {*} If no argument is passed, returns the current value of from,
	 * otherwise returns itself for chaining.
	 */
	View.prototype.from = function (source, callback) {
		var self = this;

		if (source !== undefined) {
			// Check if we have an existing from
			if (this._from) {
				// Remove the listener to the drop event
				this._from.off('drop', this._collectionDroppedWrap);
				delete this._from;
			}

			if (typeof(source) === 'string') {
				source = this._db.collection(source);
			}

			if (source.className === 'View') {
				// The source is a view so IO to the internal data collection
				// instead of the view proper
				source = source.privateData();
				if (this.debug()) {
					console.log(this.logIdentifier() + ' Using internal private data "' + source.instanceIdentifier() + '" for IO graph linking');
				}
			}

			this._from = source;
			this._from.on('drop', this._collectionDroppedWrap);

			// Create a new reactor IO graph node that intercepts chain packets from the
			// view's "from" source and determines how they should be interpreted by
			// this view. If the view does not have a query then this reactor IO will
			// simply pass along the chain packet without modifying it.
			this._io = new ReactorIO(source, this, function (chainPacket) {
				var data,
					diff,
					query,
					filteredData,
					doSend,
					pk,
					i;

				// Check that the state of the "self" object is not dropped
				if (self && !self.isDropped()) {
					// Check if we have a constraining query
					if (self._querySettings.query) {
						if (chainPacket.type === 'insert') {
							data = chainPacket.data;

							// Check if the data matches our query
							if (data instanceof Array) {
								filteredData = [];

								for (i = 0; i < data.length; i++) {
									if (self._privateData._match(data[i], self._querySettings.query, self._querySettings.options, 'and', {})) {
										filteredData.push(data[i]);
										doSend = true;
									}
								}
							} else {
								if (self._privateData._match(data, self._querySettings.query, self._querySettings.options, 'and', {})) {
									filteredData = data;
									doSend = true;
								}
							}

							if (doSend) {
								this.chainSend('insert', filteredData);
							}

							return true;
						}

						if (chainPacket.type === 'update') {
							// Do a DB diff between this view's data and the underlying collection it reads from
							// to see if something has changed
							diff = self._privateData.diff(self._from.subset(self._querySettings.query, self._querySettings.options));

							if (diff.insert.length || diff.remove.length) {
								// Now send out new chain packets for each operation
								if (diff.insert.length) {
									this.chainSend('insert', diff.insert);
								}

								if (diff.update.length) {
									pk = self._privateData.primaryKey();
									for (i = 0; i < diff.update.length; i++) {
										query = {};
										query[pk] = diff.update[i][pk];

										this.chainSend('update', {
											query: query,
											update: diff.update[i]
										});
									}
								}

								if (diff.remove.length) {
									pk = self._privateData.primaryKey();
									var $or = [],
										removeQuery = {
											query: {
												$or: $or
											}
										};

									for (i = 0; i < diff.remove.length; i++) {
										$or.push({_id: diff.remove[i][pk]});
									}

									this.chainSend('remove', removeQuery);
								}

								// Return true to stop further propagation of the chain packet
								return true;
							} else {
								// Returning false informs the chain reactor to continue propagation
								// of the chain packet down the graph tree
								return false;
							}
						}
					}
				}

				// Returning false informs the chain reactor to continue propagation
				// of the chain packet down the graph tree
				return false;
			});

			var collData = source.find(this._querySettings.query, this._querySettings.options);

			this._privateData.primaryKey(source.primaryKey());
			this._privateData.setData(collData, {}, callback);

			if (this._querySettings.options && this._querySettings.options.$orderBy) {
				this.rebuildActiveBucket(this._querySettings.options.$orderBy);
			} else {
				this.rebuildActiveBucket();
			}

			return this;
		}

		return this._from;
	};

	/**
	 * Handles when an underlying collection the view is using as a data
	 * source is dropped.
	 * @param {Collection} collection The collection that has been dropped.
	 * @private
	 */
	View.prototype._collectionDropped = function (collection) {
		if (collection) {
			// Collection was dropped, remove from view
			delete this._from;
		}
	};

	/**
	 * Creates an index on the view.
	 * @see Collection::ensureIndex()
	 * @returns {*}
	 */
	View.prototype.ensureIndex = function () {
		return this._privateData.ensureIndex.apply(this._privateData, arguments);
	};

	/**
	 * The chain reaction handler method for the view.
	 * @param {Object} chainPacket The chain reaction packet to handle.
	 * @private
	 */
	View.prototype._chainHandler = function (chainPacket) {
		var //self = this,
			arr,
			count,
			index,
			insertIndex,
			updates,
			primaryKey,
			item,
			currentIndex;

		if (this.debug()) {
			console.log(this.logIdentifier() + ' Received chain reactor data');
		}

		switch (chainPacket.type) {
			case 'setData':
				if (this.debug()) {
					console.log(this.logIdentifier() + ' Setting data in underlying (internal) view collection "' + this._privateData.name() + '"');
				}

				// Get the new data from our underlying data source sorted as we want
				var collData = this._from.find(this._querySettings.query, this._querySettings.options);
				this._privateData.setData(collData);
				break;

			case 'insert':
				if (this.debug()) {
					console.log(this.logIdentifier() + ' Inserting some data into underlying (internal) view collection "' + this._privateData.name() + '"');
				}

				// Decouple the data to ensure we are working with our own copy
				chainPacket.data = this.decouple(chainPacket.data);

				// Make sure we are working with an array
				if (!(chainPacket.data instanceof Array)) {
					chainPacket.data = [chainPacket.data];
				}

				if (this._querySettings.options && this._querySettings.options.$orderBy) {
					// Loop the insert data and find each item's index
					arr = chainPacket.data;
					count = arr.length;

					for (index = 0; index < count; index++) {
						insertIndex = this._activeBucket.insert(arr[index]);
						this._privateData._insertHandle(chainPacket.data, insertIndex);
					}
				} else {
					// Set the insert index to the passed index, or if none, the end of the view data array
					insertIndex = this._privateData._data.length;
					this._privateData._insertHandle(chainPacket.data, insertIndex);
				}
				break;

			case 'update':
				if (this.debug()) {
					console.log(this.logIdentifier() + ' Updating some data in underlying (internal) view collection "' + this._privateData.name() + '"');
				}

				primaryKey = this._privateData.primaryKey();

				// Do the update
				updates = this._privateData.update(
					chainPacket.data.query,
					chainPacket.data.update,
					chainPacket.data.options
				);

				if (this._querySettings.options && this._querySettings.options.$orderBy) {
					// TODO: This would be a good place to improve performance by somehow
					// TODO: inspecting the change that occurred when update was performed
					// TODO: above and determining if it affected the order clause keys
					// TODO: and if not, skipping the active bucket updates here

					// Loop the updated items and work out their new sort locations
					count = updates.length;
					for (index = 0; index < count; index++) {
						item = updates[index];

						// Remove the item from the active bucket (via it's id)
						this._activeBucket.remove(item);

						// Get the current location of the item
						currentIndex = this._privateData._data.indexOf(item);

						// Add the item back in to the active bucket
						insertIndex = this._activeBucket.insert(item);

						if (currentIndex !== insertIndex) {
							// Move the updated item to the new index
							this._privateData._updateSpliceMove(this._privateData._data, currentIndex, insertIndex);
						}
					}
				}
				break;

			case 'remove':
				if (this.debug()) {
					console.log(this.logIdentifier() + ' Removing some data from underlying (internal) view collection "' + this._privateData.name() + '"');
				}

				this._privateData.remove(chainPacket.data.query, chainPacket.options);
				break;

			default:
				break;
		}
	};

	/**
	 * Listens for an event.
	 * @see Mixin.Events::on()
	 */
	View.prototype.on = function () {
		return this._privateData.on.apply(this._privateData, arguments);
	};

	/**
	 * Cancels an event listener.
	 * @see Mixin.Events::off()
	 */
	View.prototype.off = function () {
		return this._privateData.off.apply(this._privateData, arguments);
	};

	/**
	 * Emits an event.
	 * @see Mixin.Events::emit()
	 */
	View.prototype.emit = function () {
		return this._privateData.emit.apply(this._privateData, arguments);
	};

	/**
	 * Find the distinct values for a specified field across a single collection and
	 * returns the results in an array.
	 * @param {String} key The field path to return distinct values for e.g. "person.name".
	 * @param {Object=} query The query to use to filter the documents used to return values from.
	 * @param {Object=} options The query options to use when running the query.
	 * @returns {Array}
	 */
	View.prototype.distinct = function (key, query, options) {
		var coll = this.publicData();
		return coll.distinct.apply(coll, arguments);
	};

	/**
	 * Gets the primary key for this view from the assigned collection.
	 * @see Collection::primaryKey()
	 * @returns {String}
	 */
	View.prototype.primaryKey = function () {
		return this.publicData().primaryKey();
	};

	/**
	 * Drops a view and all it's stored data from the database.
	 * @returns {boolean} True on success, false on failure.
	 */
	View.prototype.drop = function (callback) {
		if (!this.isDropped()) {
			if (this._from) {
				this._from.off('drop', this._collectionDroppedWrap);
				this._from._removeView(this);
			}

			if (this.debug() || (this._db && this._db.debug())) {
				console.log(this.logIdentifier() + ' Dropping');
			}

			this._state = 'dropped';

			// Clear io and chains
			if (this._io) {
				this._io.drop();
			}

			// Drop the view's internal collection
			if (this._privateData) {
				this._privateData.drop();
			}

			if (this._publicData && this._publicData !== this._privateData) {
				this._publicData.drop();
			}

			if (this._db && this._name) {
				delete this._db._view[this._name];
			}

			this.emit('drop', this);

			if (callback) { callback(false, true); }

			delete this._chain;
			delete this._from;
			delete this._privateData;
			delete this._io;
			delete this._listeners;
			delete this._querySettings;
			delete this._db;

			return true;
		}

		return false;
	};

	/**
	 * Gets / sets the db instance this class instance belongs to.
	 * @param {Db=} db The db instance.
	 * @memberof View
	 * @returns {*}
	 */
	Shared.synthesize(View.prototype, 'db', function (db) {
		if (db) {
			this.privateData().db(db);
			this.publicData().db(db);

			// Apply the same debug settings
			this.debug(db.debug());
			this.privateData().debug(db.debug());
			this.publicData().debug(db.debug());
		}

		return this.$super.apply(this, arguments);
	});

	/**
	 * Gets / sets the query object and query options that the view uses
	 * to build it's data set. This call modifies both the query and
	 * query options at the same time.
	 * @param {Object=} query The query to set.
	 * @param {Boolean=} options The query options object.
	 * @param {Boolean=} refresh Whether to refresh the view data after
	 * this operation. Defaults to true.
	 * @returns {*}
	 */
	View.prototype.queryData = function (query, options, refresh) {
		if (query !== undefined) {
			this._querySettings.query = query;
		}

		if (options !== undefined) {
			this._querySettings.options = options;
		}

		if (query !== undefined || options !== undefined) {
			if (refresh === undefined || refresh === true) {
				this.refresh();
			}

			return this;
		}

		return this._querySettings;
	};

	/**
	 * Add data to the existing query.
	 * @param {Object} obj The data whose keys will be added to the existing
	 * query object.
	 * @param {Boolean} overwrite Whether or not to overwrite data that already
	 * exists in the query object. Defaults to true.
	 * @param {Boolean=} refresh Whether or not to refresh the view data set
	 * once the operation is complete. Defaults to true.
	 */
	View.prototype.queryAdd = function (obj, overwrite, refresh) {
		this._querySettings.query = this._querySettings.query || {};

		var query = this._querySettings.query,
			i;

		if (obj !== undefined) {
			// Loop object properties and add to existing query
			for (i in obj) {
				if (obj.hasOwnProperty(i)) {
					if (query[i] === undefined || (query[i] !== undefined && overwrite !== false)) {
						query[i] = obj[i];
					}
				}
			}
		}

		if (refresh === undefined || refresh === true) {
			this.refresh();
		}
	};

	/**
	 * Remove data from the existing query.
	 * @param {Object} obj The data whose keys will be removed from the existing
	 * query object.
	 * @param {Boolean=} refresh Whether or not to refresh the view data set
	 * once the operation is complete. Defaults to true.
	 */
	View.prototype.queryRemove = function (obj, refresh) {
		var query = this._querySettings.query,
			i;

		if (query) {
			if (obj !== undefined) {
				// Loop object properties and add to existing query
				for (i in obj) {
					if (obj.hasOwnProperty(i)) {
						delete query[i];
					}
				}
			}

			if (refresh === undefined || refresh === true) {
				this.refresh();
			}
		}
	};

	/**
	 * Gets / sets the query being used to generate the view data. It
	 * does not change or modify the view's query options.
	 * @param {Object=} query The query to set.
	 * @param {Boolean=} refresh Whether to refresh the view data after
	 * this operation. Defaults to true.
	 * @returns {*}
	 */
	View.prototype.query = function (query, refresh) {
		if (query !== undefined) {
			this._querySettings.query = query;

			if (refresh === undefined || refresh === true) {
				this.refresh();
			}

			return this;
		}

		return this._querySettings.query;
	};

	/**
	 * Gets / sets the orderBy clause in the query options for the view.
	 * @param {Object=} val The order object.
	 * @returns {*}
	 */
	View.prototype.orderBy = function (val) {
		if (val !== undefined) {
			var queryOptions = this.queryOptions() || {};
			queryOptions.$orderBy = val;

			this.queryOptions(queryOptions);
			return this;
		}

		return (this.queryOptions() || {}).$orderBy;
	};

	/**
	 * Gets / sets the page clause in the query options for the view.
	 * @param {Number=} val The page number to change to (zero index).
	 * @returns {*}
	 */
	View.prototype.page = function (val) {
		if (val !== undefined) {
			var queryOptions = this.queryOptions() || {};

			// Only execute a query options update if page has changed
			if (val !== queryOptions.$page) {
				queryOptions.$page = val;
				this.queryOptions(queryOptions);
			}

			return this;
		}

		return (this.queryOptions() || {}).$page;
	};

	/**
	 * Jump to the first page in the data set.
	 * @returns {*}
	 */
	View.prototype.pageFirst = function () {
		return this.page(0);
	};

	/**
	 * Jump to the last page in the data set.
	 * @returns {*}
	 */
	View.prototype.pageLast = function () {
		var pages = this.cursor().pages,
			lastPage = pages !== undefined ? pages : 0;

		return this.page(lastPage - 1);
	};

	/**
	 * Move forward or backwards in the data set pages by passing a positive
	 * or negative integer of the number of pages to move.
	 * @param {Number} val The number of pages to move.
	 * @returns {*}
	 */
	View.prototype.pageScan = function (val) {
		if (val !== undefined) {
			var pages = this.cursor().pages,
				queryOptions = this.queryOptions() || {},
				currentPage = queryOptions.$page !== undefined ? queryOptions.$page : 0;

			currentPage += val;

			if (currentPage < 0) {
				currentPage = 0;
			}

			if (currentPage >= pages) {
				currentPage = pages - 1;
			}

			return this.page(currentPage);
		}
	};

	/**
	 * Gets / sets the query options used when applying sorting etc to the
	 * view data set.
	 * @param {Object=} options An options object.
	 * @param {Boolean=} refresh Whether to refresh the view data after
	 * this operation. Defaults to true.
	 * @returns {*}
	 */
	View.prototype.queryOptions = function (options, refresh) {
		if (options !== undefined) {
			this._querySettings.options = options;
			if (options.$decouple === undefined) { options.$decouple = true; }

			if (refresh === undefined || refresh === true) {
				this.refresh();
			} else {
				this.rebuildActiveBucket(options.$orderBy);
			}
			return this;
		}

		return this._querySettings.options;
	};

	View.prototype.rebuildActiveBucket = function (orderBy) {
		if (orderBy) {
			var arr = this._privateData._data,
				arrCount = arr.length;

			// Build a new active bucket
			this._activeBucket = new ActiveBucket(orderBy);
			this._activeBucket.primaryKey(this._privateData.primaryKey());

			// Loop the current view data and add each item
			for (var i = 0; i < arrCount; i++) {
				this._activeBucket.insert(arr[i]);
			}
		} else {
			// Remove any existing active bucket
			delete this._activeBucket;
		}
	};

	/**
	 * Refreshes the view data such as ordering etc.
	 */
	View.prototype.refresh = function () {
		if (this._from) {
			var pubData = this.publicData(),
				refreshResults;

			// Re-grab all the data for the view from the collection
			this._privateData.remove();
			//pubData.remove();

			refreshResults = this._from.find(this._querySettings.query, this._querySettings.options);
			this.cursor(refreshResults.$cursor);

			this._privateData.insert(refreshResults);

			this._privateData._data.$cursor = refreshResults.$cursor;
			pubData._data.$cursor = refreshResults.$cursor;

			/*if (pubData._linked) {
				// Update data and observers
				//var transformedData = this._privateData.find();
				// TODO: Shouldn't this data get passed into a transformIn first?
				// TODO: This breaks linking because its passing decoupled data and overwriting non-decoupled data
				// TODO: Is this even required anymore? After commenting it all seems to work
				// TODO: Might be worth setting up a test to check transforms and linking then remove this if working?
				//jQuery.observable(pubData._data).refresh(transformedData);
			}*/
		}

		if (this._querySettings.options && this._querySettings.options.$orderBy) {
			this.rebuildActiveBucket(this._querySettings.options.$orderBy);
		} else {
			this.rebuildActiveBucket();
		}

		return this;
	};

	/**
	 * Returns the number of documents currently in the view.
	 * @returns {Number}
	 */
	View.prototype.count = function () {
		if (this.publicData()) {
			return this.publicData().count.apply(this.publicData(), arguments);
		}

		return 0;
	};

	// Call underlying
	View.prototype.subset = function () {
		return this.publicData().subset.apply(this._privateData, arguments);
	};

	/**
	 * Takes the passed data and uses it to set transform methods and globally
	 * enable or disable the transform system for the view.
	 * @param {Object} obj The new transform system settings "enabled", "dataIn" and "dataOut":
	 * {
	 * 	"enabled": true,
	 * 	"dataIn": function (data) { return data; },
	 * 	"dataOut": function (data) { return data; }
	 * }
	 * @returns {*}
	 */
	View.prototype.transform = function (obj) {
		var self = this;

		if (obj !== undefined) {
			if (typeof obj === "object") {
				if (obj.enabled !== undefined) {
					this._transformEnabled = obj.enabled;
				}

				if (obj.dataIn !== undefined) {
					this._transformIn = obj.dataIn;
				}

				if (obj.dataOut !== undefined) {
					this._transformOut = obj.dataOut;
				}
			} else {
				this._transformEnabled = obj !== false;
			}

			if (this._transformEnabled) {
				// Check for / create the public data collection
				if (!this._publicData) {
					// Create the public data collection
					this._publicData = new Collection('__FDB__view_publicData_' + this._name);
					this._publicData.db(this._privateData._db);
					this._publicData.transform({
						enabled: true,
						dataIn: this._transformIn,
						dataOut: this._transformOut
					});

					// Create a chain reaction IO node to keep the private and
					// public data collections in sync
					this._transformIo = new ReactorIO(this._privateData, this._publicData, function (chainPacket) {
						var data = chainPacket.data;

						switch (chainPacket.type) {
							case 'primaryKey':
								self._publicData.primaryKey(data);
								this.chainSend('primaryKey', data);
								break;

							case 'setData':
								self._publicData.setData(data);
								this.chainSend('setData', data);
								break;

							case 'insert':
								self._publicData.insert(data);
								this.chainSend('insert', data);
								break;

							case 'update':
								// Do the update
								self._publicData.update(
									data.query,
									data.update,
									data.options
								);

								this.chainSend('update', data);
								break;

							case 'remove':
								self._publicData.remove(data.query, chainPacket.options);
								this.chainSend('remove', data);
								break;

							default:
								break;
						}
					});
				}

				// Set initial data and settings
				this._publicData.primaryKey(this.privateData().primaryKey());
				this._publicData.setData(this.privateData().find());
			} else {
				// Remove the public data collection
				if (this._publicData) {
					this._publicData.drop();
					delete this._publicData;

					if (this._transformIo) {
						this._transformIo.drop();
						delete this._transformIo;
					}
				}
			}

			return this;
		}

		return {
			enabled: this._transformEnabled,
			dataIn: this._transformIn,
			dataOut: this._transformOut
		};
	};

	/**
	 * Executes a method against each document that matches query and returns an
	 * array of documents that may have been modified by the method.
	 * @param {Object} query The query object.
	 * @param {Function} func The method that each document is passed to. If this method
	 * returns false for a particular document it is excluded from the results.
	 * @param {Object=} options Optional options object.
	 * @returns {Array}
	 */
	View.prototype.filter = function (query, func, options) {
		return (this.publicData()).filter(query, func, options);
	};

	/**
	 * Returns the non-transformed data the view holds as a collection
	 * reference.
	 * @return {Collection} The non-transformed collection reference.
	 */
	View.prototype.privateData = function () {
		return this._privateData;
	};

	/**
	 * Returns a data object representing the public data this view
	 * contains. This can change depending on if transforms are being
	 * applied to the view or not.
	 *
	 * If no transforms are applied then the public data will be the
	 * same as the private data the view holds. If transforms are
	 * applied then the public data will contain the transformed version
	 * of the private data.
	 *
	 * The public data collection is also used by data binding to only
	 * changes to the publicData will show in a data-bound element.
	 */
	View.prototype.publicData = function () {
		if (this._transformEnabled) {
			return this._publicData;
		} else {
			return this._privateData;
		}
	};

	// Extend collection with view init
	Collection.prototype.init = function () {
		this._view = [];
		CollectionInit.apply(this, arguments);
	};

	/**
	 * Creates a view and assigns the collection as its data source.
	 * @param {String} name The name of the new view.
	 * @param {Object} query The query to apply to the new view.
	 * @param {Object} options The options object to apply to the view.
	 * @returns {*}
	 */
	Collection.prototype.view = function (name, query, options) {
		if (this._db && this._db._view ) {
			if (!this._db._view[name]) {
				var view = new View(name, query, options)
					.db(this._db)
					.from(this);

				this._view = this._view || [];
				this._view.push(view);

				return view;
			} else {
				throw(this.logIdentifier() + ' Cannot create a view using this collection because a view with this name already exists: ' + name);
			}
		}
	};

	/**
	 * Adds a view to the internal view lookup.
	 * @param {View} view The view to add.
	 * @returns {Collection}
	 * @private
	 */
	Collection.prototype._addView = CollectionGroup.prototype._addView = function (view) {
		if (view !== undefined) {
			this._view.push(view);
		}

		return this;
	};

	/**
	 * Removes a view from the internal view lookup.
	 * @param {View} view The view to remove.
	 * @returns {Collection}
	 * @private
	 */
	Collection.prototype._removeView = CollectionGroup.prototype._removeView = function (view) {
		if (view !== undefined) {
			var index = this._view.indexOf(view);
			if (index > -1) {
				this._view.splice(index, 1);
			}
		}

		return this;
	};

	// Extend DB with views init
	Db.prototype.init = function () {
		this._view = {};
		DbInit.apply(this, arguments);
	};

	/**
	 * Gets a view by it's name.
	 * @param {String} viewName The name of the view to retrieve.
	 * @returns {*}
	 */
	Db.prototype.view = function (viewName) {
		// Handle being passed an instance
		if (viewName instanceof View) {
			return viewName;
		}

		if (!this._view[viewName]) {
			if (this.debug() || (this._db && this._db.debug())) {
				console.log(this.logIdentifier() + ' Creating view ' + viewName);
			}
		}

		this._view[viewName] = this._view[viewName] || new View(viewName).db(this);
		return this._view[viewName];
	};

	/**
	 * Determine if a view with the passed name already exists.
	 * @param {String} viewName The name of the view to check for.
	 * @returns {boolean}
	 */
	Db.prototype.viewExists = function (viewName) {
		return Boolean(this._view[viewName]);
	};

	/**
	 * Returns an array of views the DB currently has.
	 * @returns {Array} An array of objects containing details of each view
	 * the database is currently managing.
	 */
	Db.prototype.views = function () {
		var arr = [],
			view,
			i;

		for (i in this._view) {
			if (this._view.hasOwnProperty(i)) {
				view = this._view[i];

				arr.push({
					name: i,
					count: view.count(),
					linked: view.isLinked !== undefined ? view.isLinked() : false
				});
			}
		}

		return arr;
	};

	Shared.finishModule('View');
	module.exports = View;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Initialization and round constants tables
		    var H = [];
		    var K = [];

		    // Compute constants
		    (function () {
		        function isPrime(n) {
		            var sqrtN = Math.sqrt(n);
		            for (var factor = 2; factor <= sqrtN; factor++) {
		                if (!(n % factor)) {
		                    return false;
		                }
		            }

		            return true;
		        }

		        function getFractionalBits(n) {
		            return ((n - (n | 0)) * 0x100000000) | 0;
		        }

		        var n = 2;
		        var nPrime = 0;
		        while (nPrime < 64) {
		            if (isPrime(n)) {
		                if (nPrime < 8) {
		                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
		                }
		                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

		                nPrime++;
		            }

		            n++;
		        }
		    }());

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-256 hash algorithm.
		     */
		    var SHA256 = C_algo.SHA256 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init(H.slice(0));
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var H = this._hash.words;

		            // Working variables
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];
		            var e = H[4];
		            var f = H[5];
		            var g = H[6];
		            var h = H[7];

		            // Computation
		            for (var i = 0; i < 64; i++) {
		                if (i < 16) {
		                    W[i] = M[offset + i] | 0;
		                } else {
		                    var gamma0x = W[i - 15];
		                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
		                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
		                                   (gamma0x >>> 3);

		                    var gamma1x = W[i - 2];
		                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
		                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
		                                   (gamma1x >>> 10);

		                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
		                }

		                var ch  = (e & f) ^ (~e & g);
		                var maj = (a & b) ^ (a & c) ^ (b & c);

		                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
		                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

		                var t1 = h + sigma1 + ch + K[i] + W[i];
		                var t2 = sigma0 + maj;

		                h = g;
		                g = f;
		                f = e;
		                e = (d + t1) | 0;
		                d = c;
		                c = b;
		                b = a;
		                a = (t1 + t2) | 0;
		            }

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		            H[4] = (H[4] + e) | 0;
		            H[5] = (H[5] + f) | 0;
		            H[6] = (H[6] + g) | 0;
		            H[7] = (H[7] + h) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Return final computed hash
		            return this._hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA256('message');
		     *     var hash = CryptoJS.SHA256(wordArray);
		     */
		    C.SHA256 = Hasher._createHelper(SHA256);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA256(message, key);
		     */
		    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
		}(Math));


		return CryptoJS.SHA256;

	}));

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(15));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;

		    function X64Word_create() {
		        return X64Word.create.apply(X64Word, arguments);
		    }

		    // Constants
		    var K = [
		        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
		        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
		        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
		        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
		        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
		        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
		        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
		        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
		        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
		        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
		        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
		        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
		        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
		        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
		        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
		        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
		        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
		        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
		        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
		        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
		        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
		        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
		        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
		        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
		        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
		        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
		        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
		        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
		        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
		        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
		        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
		        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
		        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
		        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
		        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
		        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
		        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
		        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
		        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
		        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
		    ];

		    // Reusable objects
		    var W = [];
		    (function () {
		        for (var i = 0; i < 80; i++) {
		            W[i] = X64Word_create();
		        }
		    }());

		    /**
		     * SHA-512 hash algorithm.
		     */
		    var SHA512 = C_algo.SHA512 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new X64WordArray.init([
		                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
		                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
		                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
		                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcuts
		            var H = this._hash.words;

		            var H0 = H[0];
		            var H1 = H[1];
		            var H2 = H[2];
		            var H3 = H[3];
		            var H4 = H[4];
		            var H5 = H[5];
		            var H6 = H[6];
		            var H7 = H[7];

		            var H0h = H0.high;
		            var H0l = H0.low;
		            var H1h = H1.high;
		            var H1l = H1.low;
		            var H2h = H2.high;
		            var H2l = H2.low;
		            var H3h = H3.high;
		            var H3l = H3.low;
		            var H4h = H4.high;
		            var H4l = H4.low;
		            var H5h = H5.high;
		            var H5l = H5.low;
		            var H6h = H6.high;
		            var H6l = H6.low;
		            var H7h = H7.high;
		            var H7l = H7.low;

		            // Working variables
		            var ah = H0h;
		            var al = H0l;
		            var bh = H1h;
		            var bl = H1l;
		            var ch = H2h;
		            var cl = H2l;
		            var dh = H3h;
		            var dl = H3l;
		            var eh = H4h;
		            var el = H4l;
		            var fh = H5h;
		            var fl = H5l;
		            var gh = H6h;
		            var gl = H6l;
		            var hh = H7h;
		            var hl = H7l;

		            // Rounds
		            for (var i = 0; i < 80; i++) {
		                // Shortcut
		                var Wi = W[i];

		                // Extend message
		                if (i < 16) {
		                    var Wih = Wi.high = M[offset + i * 2]     | 0;
		                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
		                } else {
		                    // Gamma0
		                    var gamma0x  = W[i - 15];
		                    var gamma0xh = gamma0x.high;
		                    var gamma0xl = gamma0x.low;
		                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
		                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

		                    // Gamma1
		                    var gamma1x  = W[i - 2];
		                    var gamma1xh = gamma1x.high;
		                    var gamma1xl = gamma1x.low;
		                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
		                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

		                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
		                    var Wi7  = W[i - 7];
		                    var Wi7h = Wi7.high;
		                    var Wi7l = Wi7.low;

		                    var Wi16  = W[i - 16];
		                    var Wi16h = Wi16.high;
		                    var Wi16l = Wi16.low;

		                    var Wil = gamma0l + Wi7l;
		                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
		                    var Wil = Wil + gamma1l;
		                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
		                    var Wil = Wil + Wi16l;
		                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

		                    Wi.high = Wih;
		                    Wi.low  = Wil;
		                }

		                var chh  = (eh & fh) ^ (~eh & gh);
		                var chl  = (el & fl) ^ (~el & gl);
		                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
		                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

		                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
		                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
		                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
		                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

		                // t1 = h + sigma1 + ch + K[i] + W[i]
		                var Ki  = K[i];
		                var Kih = Ki.high;
		                var Kil = Ki.low;

		                var t1l = hl + sigma1l;
		                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
		                var t1l = t1l + chl;
		                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
		                var t1l = t1l + Kil;
		                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
		                var t1l = t1l + Wil;
		                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

		                // t2 = sigma0 + maj
		                var t2l = sigma0l + majl;
		                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

		                // Update working variables
		                hh = gh;
		                hl = gl;
		                gh = fh;
		                gl = fl;
		                fh = eh;
		                fl = el;
		                el = (dl + t1l) | 0;
		                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
		                dh = ch;
		                dl = cl;
		                ch = bh;
		                cl = bl;
		                bh = ah;
		                bl = al;
		                al = (t1l + t2l) | 0;
		                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
		            }

		            // Intermediate hash value
		            H0l = H0.low  = (H0l + al);
		            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
		            H1l = H1.low  = (H1l + bl);
		            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
		            H2l = H2.low  = (H2l + cl);
		            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
		            H3l = H3.low  = (H3l + dl);
		            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
		            H4l = H4.low  = (H4l + el);
		            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
		            H5l = H5.low  = (H5l + fl);
		            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
		            H6l = H6.low  = (H6l + gl);
		            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
		            H7l = H7.low  = (H7l + hl);
		            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Convert hash to 32-bit word array before returning
		            var hash = this._hash.toX32();

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        },

		        blockSize: 1024/32
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA512('message');
		     *     var hash = CryptoJS.SHA512(wordArray);
		     */
		    C.SHA512 = Hasher._createHelper(SHA512);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA512(message, key);
		     */
		    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
		}());


		return CryptoJS.SHA512;

	}));

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	// String encode/decode helpers
	'use strict';


	var utils = __webpack_require__(7);


	// Quick check if we can use fast array to bin string conversion
	//
	// - apply(Array) can fail on Android 2.2
	// - apply(Uint8Array) can fail on iOS 5.1 Safary
	//
	var STR_APPLY_OK = true;
	var STR_APPLY_UIA_OK = true;

	try { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }
	try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }


	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new utils.Buf8(256);
	for (var q=0; q<256; q++) {
	  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
	}
	_utf8len[254]=_utf8len[254]=1; // Invalid sequence start


	// convert string to array (typed, when possible)
	exports.string2buf = function (str) {
	  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

	  // count binary size
	  for (m_pos = 0; m_pos < str_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
	      c2 = str.charCodeAt(m_pos+1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	  }

	  // allocate buffer
	  buf = new utils.Buf8(buf_len);

	  // convert
	  for (i=0, m_pos = 0; i < buf_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
	      c2 = str.charCodeAt(m_pos+1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    if (c < 0x80) {
	      /* one byte */
	      buf[i++] = c;
	    } else if (c < 0x800) {
	      /* two bytes */
	      buf[i++] = 0xC0 | (c >>> 6);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else if (c < 0x10000) {
	      /* three bytes */
	      buf[i++] = 0xE0 | (c >>> 12);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else {
	      /* four bytes */
	      buf[i++] = 0xf0 | (c >>> 18);
	      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    }
	  }

	  return buf;
	};

	// Helper (used in 2 places)
	function buf2binstring(buf, len) {
	  // use fallback for big arrays to avoid stack overflow
	  if (len < 65537) {
	    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
	      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
	    }
	  }

	  var result = '';
	  for (var i=0; i < len; i++) {
	    result += String.fromCharCode(buf[i]);
	  }
	  return result;
	}


	// Convert byte array to binary string
	exports.buf2binstring = function(buf) {
	  return buf2binstring(buf, buf.length);
	};


	// Convert binary string (typed, when possible)
	exports.binstring2buf = function(str) {
	  var buf = new utils.Buf8(str.length);
	  for (var i=0, len=buf.length; i < len; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	};


	// convert array to string
	exports.buf2string = function (buf, max) {
	  var i, out, c, c_len;
	  var len = max || buf.length;

	  // Reserve max possible length (2 words per char)
	  // NB: by unknown reasons, Array is significantly faster for
	  //     String.fromCharCode.apply than Uint16Array.
	  var utf16buf = new Array(len*2);

	  for (out=0, i=0; i<len;) {
	    c = buf[i++];
	    // quick process ascii
	    if (c < 0x80) { utf16buf[out++] = c; continue; }

	    c_len = _utf8len[c];
	    // skip 5 & 6 byte codes
	    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

	    // apply mask on first byte
	    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	    // join the rest
	    while (c_len > 1 && i < len) {
	      c = (c << 6) | (buf[i++] & 0x3f);
	      c_len--;
	    }

	    // terminated by end of string?
	    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

	    if (c < 0x10000) {
	      utf16buf[out++] = c;
	    } else {
	      c -= 0x10000;
	      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	    }
	  }

	  return buf2binstring(utf16buf, out);
	};


	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	exports.utf8border = function(buf, max) {
	  var pos;

	  max = max || buf.length;
	  if (max > buf.length) { max = buf.length; }

	  // go back from last position, until start of sequence found
	  pos = max-1;
	  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

	  // Fuckup - very small and broken sequence,
	  // return max, because we should return something anyway.
	  if (pos < 0) { return max; }

	  // If we came to start of buffer - that means vuffer is too small,
	  // return max too.
	  if (pos === 0) { return max; }

	  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};


/***/ },
/* 35 */
/***/ function(module, exports) {

	'use strict';

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}


	module.exports = adler32;


/***/ },
/* 36 */
/***/ function(module, exports) {

	module.exports = {

	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,


	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,

	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ },
/* 37 */
/***/ function(module, exports) {

	'use strict';

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.


	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n =0; n < 256; n++) {
	    c = n;
	    for (var k =0; k < 8; k++) {
	      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc = crc ^ (-1);

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}


	module.exports = crc32;


/***/ },
/* 38 */
/***/ function(module, exports) {

	'use strict';


	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	module.exports = ZStream;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012-2013 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define, location) {
		'use strict';

		var undef;

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var mixin, origin, urlRE, absoluteUrlRE, fullyQualifiedUrlRE;

			mixin = __webpack_require__(24);

			urlRE = /([a-z][a-z0-9\+\-\.]*:)\/\/([^@]+@)?(([^:\/]+)(:([0-9]+))?)?(\/[^?#]*)?(\?[^#]*)?(#\S*)?/i;
			absoluteUrlRE = /^([a-z][a-z0-9\-\+\.]*:\/\/|\/)/i;
			fullyQualifiedUrlRE = /([a-z][a-z0-9\+\-\.]*:)\/\/([^@]+@)?(([^:\/]+)(:([0-9]+))?)?\//i;

			/**
			 * Apply params to the template to create a URL.
			 *
			 * Parameters that are not applied directly to the template, are appended
			 * to the URL as query string parameters.
			 *
			 * @param {string} template the URI template
			 * @param {Object} params parameters to apply to the template
			 * @return {string} the resulting URL
			 */
			function buildUrl(template, params) {
				// internal builder to convert template with params.
				var url, name, queryStringParams, re;

				url = template;
				queryStringParams = {};

				if (params) {
					for (name in params) {
						/*jshint forin:false */
						re = new RegExp('\\{' + name + '\\}');
						if (re.test(url)) {
							url = url.replace(re, encodeURIComponent(params[name]), 'g');
						}
						else {
							queryStringParams[name] = params[name];
						}
					}
					for (name in queryStringParams) {
						url += url.indexOf('?') === -1 ? '?' : '&';
						url += encodeURIComponent(name);
						if (queryStringParams[name] !== null && queryStringParams[name] !== undefined) {
							url += '=';
							url += encodeURIComponent(queryStringParams[name]);
						}
					}
				}
				return url;
			}

			function startsWith(str, test) {
				return str.indexOf(test) === 0;
			}

			/**
			 * Create a new URL Builder
			 *
			 * @param {string|UrlBuilder} template the base template to build from, may be another UrlBuilder
			 * @param {Object} [params] base parameters
			 * @constructor
			 */
			function UrlBuilder(template, params) {
				if (!(this instanceof UrlBuilder)) {
					// invoke as a constructor
					return new UrlBuilder(template, params);
				}

				if (template instanceof UrlBuilder) {
					this._template = template.template;
					this._params = mixin({}, this._params, params);
				}
				else {
					this._template = (template || '').toString();
					this._params = params || {};
				}
			}

			UrlBuilder.prototype = {

				/**
				 * Create a new UrlBuilder instance that extends the current builder.
				 * The current builder is unmodified.
				 *
				 * @param {string} [template] URL template to append to the current template
				 * @param {Object} [params] params to combine with current params.  New params override existing params
				 * @return {UrlBuilder} the new builder
				 */
				append: function (template,  params) {
					// TODO consider query strings and fragments
					return new UrlBuilder(this._template + template, mixin({}, this._params, params));
				},

				/**
				 * Create a new UrlBuilder with a fully qualified URL based on the
				 * window's location or base href and the current templates relative URL.
				 *
				 * Path variables are preserved.
				 *
				 * *Browser only*
				 *
				 * @return {UrlBuilder} the fully qualified URL template
				 */
				fullyQualify: function () {
					if (!location) { return this; }
					if (this.isFullyQualified()) { return this; }

					var template = this._template;

					if (startsWith(template, '//')) {
						template = origin.protocol + template;
					}
					else if (startsWith(template, '/')) {
						template = origin.origin + template;
					}
					else if (!this.isAbsolute()) {
						template = origin.origin + origin.pathname.substring(0, origin.pathname.lastIndexOf('/') + 1);
					}

					if (template.indexOf('/', 8) === -1) {
						// default the pathname to '/'
						template = template + '/';
					}

					return new UrlBuilder(template, this._params);
				},

				/**
				 * True if the URL is absolute
				 *
				 * @return {boolean}
				 */
				isAbsolute: function () {
					return absoluteUrlRE.test(this.build());
				},

				/**
				 * True if the URL is fully qualified
				 *
				 * @return {boolean}
				 */
				isFullyQualified: function () {
					return fullyQualifiedUrlRE.test(this.build());
				},

				/**
				 * True if the URL is cross origin. The protocol, host and port must not be
				 * the same in order to be cross origin,
				 *
				 * @return {boolean}
				 */
				isCrossOrigin: function () {
					if (!origin) {
						return true;
					}
					var url = this.parts();
					return url.protocol !== origin.protocol ||
					       url.hostname !== origin.hostname ||
					       url.port !== origin.port;
				},

				/**
				 * Split a URL into its consituent parts following the naming convention of
				 * 'window.location'. One difference is that the port will contain the
				 * protocol default if not specified.
				 *
				 * @see https://developer.mozilla.org/en-US/docs/DOM/window.location
				 *
				 * @returns {Object} a 'window.location'-like object
				 */
				parts: function () {
					/*jshint maxcomplexity:20 */
					var url, parts;
					url = this.fullyQualify().build().match(urlRE);
					parts = {
						href: url[0],
						protocol: url[1],
						host: url[3] || '',
						hostname: url[4] || '',
						port: url[6],
						pathname: url[7] || '',
						search: url[8] || '',
						hash: url[9] || ''
					};
					parts.origin = parts.protocol + '//' + parts.host;
					parts.port = parts.port || (parts.protocol === 'https:' ? '443' : parts.protocol === 'http:' ? '80' : '');
					return parts;
				},

				/**
				 * Expand the template replacing path variables with parameters
				 *
				 * @param {Object} [params] params to combine with current params.  New params override existing params
				 * @return {string} the expanded URL
				 */
				build: function (params) {
					return buildUrl(this._template, mixin({}, this._params, params));
				},

				/**
				 * @see build
				 */
				toString: function () {
					return this.build();
				}

			};

			origin = location ? new UrlBuilder(location.href).parts() : undef;

			return UrlBuilder;
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1),
		typeof window !== 'undefined' ? window.location : void 0
		// Boilerplate for AMD and Node
	));


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2014 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		var undef;

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			/**
			 * Plain JS Object containing properties that represent an HTTP request.
			 *
			 * Depending on the capabilities of the underlying client, a request
			 * may be cancelable. If a request may be canceled, the client will add
			 * a canceled flag and cancel function to the request object. Canceling
			 * the request will put the response into an error state.
			 *
			 * @field {string} [method='GET'] HTTP method, commonly GET, POST, PUT, DELETE or HEAD
			 * @field {string|UrlBuilder} [path=''] path template with optional path variables
			 * @field {Object} [params] parameters for the path template and query string
			 * @field {Object} [headers] custom HTTP headers to send, in addition to the clients default headers
			 * @field [entity] the HTTP entity, common for POST or PUT requests
			 * @field {boolean} [canceled] true if the request has been canceled, set by the client
			 * @field {Function} [cancel] cancels the request if invoked, provided by the client
			 * @field {Client} [originator] the client that first handled this request, provided by the interceptor
			 *
			 * @class Request
			 */

			/**
			 * Plain JS Object containing properties that represent an HTTP response
			 *
			 * @field {Object} [request] the request object as received by the root client
			 * @field {Object} [raw] the underlying request object, like XmlHttpRequest in a browser
			 * @field {number} [status.code] status code of the response (i.e. 200, 404)
			 * @field {string} [status.text] status phrase of the response
			 * @field {Object] [headers] response headers hash of normalized name, value pairs
			 * @field [entity] the response body
			 *
			 * @class Response
			 */

			/**
			 * HTTP client particularly suited for RESTful operations.
			 *
			 * @field {function} wrap wraps this client with a new interceptor returning the wrapped client
			 *
			 * @param {Request} the HTTP request
			 * @returns {ResponsePromise<Response>} a promise the resolves to the HTTP response
			 *
			 * @class Client
			 */

			 /**
			  * Extended when.js Promises/A+ promise with HTTP specific helpers
			  *q
			  * @method entity promise for the HTTP entity
			  * @method status promise for the HTTP status code
			  * @method headers promise for the HTTP response headers
			  * @method header promise for a specific HTTP response header
			  *
			  * @class ResponsePromise
			  * @extends Promise
			  */

			var client, target, platformDefault;

			client = __webpack_require__(21);

			/**
			 * Make a request with the default client
			 * @param {Request} the HTTP request
			 * @returns {Promise<Response>} a promise the resolves to the HTTP response
			 */
			function defaultClient() {
				return target.apply(undef, arguments);
			}

			/**
			 * Change the default client
			 * @param {Client} client the new default client
			 */
			defaultClient.setDefaultClient = function setDefaultClient(client) {
				target = client;
			};

			/**
			 * Obtain a direct reference to the current default client
			 * @returns {Client} the default client
			 */
			defaultClient.getDefaultClient = function getDefaultClient() {
				return target;
			};

			/**
			 * Reset the default client to the platform default
			 */
			defaultClient.resetDefaultClient = function resetDefaultClient() {
				target = platformDefault;
			};

			/**
			 * @private
			 */
			defaultClient.setPlatformDefaultClient = function setPlatformDefaultClient(client) {
				if (platformDefault) {
					throw new Error('Unable to redefine platformDefaultClient');
				}
				target = platformDefault = client;
			};

			return client(defaultClient);

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	* Copyright 2014 the original author or authors
	* @license MIT, see LICENSE.txt for details
	*
	* @author Scott Andrews
	*/

	(function (define) {
		'use strict';

		var undef;

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			/**
			 * Parse a MIME type into it's constituent parts
			 *
			 * @param {string} mime MIME type to parse
			 * @return {{
			 *   {string} raw the original MIME type
			 *   {string} type the type and subtype
			 *   {string} [suffix] mime suffix, including the plus, if any
			 *   {Object} params key/value pair of attributes
			 * }}
			 */
			function parse(mime) {
				var params, type;

				params = mime.split(';');
				type = params[0].trim().split('+');

				return {
					raw: mime,
					type: type[0],
					suffix: type[1] ? '+' + type[1] : '',
					params: params.slice(1).reduce(function (params, pair) {
						pair = pair.split('=');
						params[pair[0].trim()] = pair[1] ? pair[1].trim() : undef;
						return params;
					}, {})
				};
			}

			return {
				parse: parse
			};

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		/**
		 * Custom error type for promises rejected by promise.timeout
		 * @param {string} message
		 * @constructor
		 */
		function TimeoutError (message) {
			Error.call(this);
			this.message = message;
			this.name = TimeoutError.name;
			if (typeof Error.captureStackTrace === 'function') {
				Error.captureStackTrace(this, TimeoutError);
			}
		}

		TimeoutError.prototype = Object.create(Error.prototype);
		TimeoutError.prototype.constructor = TimeoutError;

		return TimeoutError;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		makeApply.tryCatchResolve = tryCatchResolve;

		return makeApply;

		function makeApply(Promise, call) {
			if(arguments.length < 2) {
				call = tryCatchResolve;
			}

			return apply;

			function apply(f, thisArg, args) {
				var p = Promise._defer();
				var l = args.length;
				var params = new Array(l);
				callAndResolve({ f:f, thisArg:thisArg, args:args, params:params, i:l-1, call:call }, p._handler);

				return p;
			}

			function callAndResolve(c, h) {
				if(c.i < 0) {
					return call(c.f, c.thisArg, c.params, h);
				}

				var handler = Promise._handler(c.args[c.i]);
				handler.fold(callAndResolveNext, c, void 0, h);
			}

			function callAndResolveNext(c, x, h) {
				c.params[c.i] = x;
				c.i -= 1;
				callAndResolve(c, h);
			}
		}

		function tryCatchResolve(f, thisArg, args, resolver) {
			try {
				resolver.resolve(f.apply(thisArg, args));
			} catch(e) {
				resolver.reject(e);
			}
		}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));




/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return {
			pending: toPendingState,
			fulfilled: toFulfilledState,
			rejected: toRejectedState,
			inspect: inspect
		};

		function toPendingState() {
			return { state: 'pending' };
		}

		function toRejectedState(e) {
			return { state: 'rejected', reason: e };
		}

		function toFulfilledState(x) {
			return { state: 'fulfilled', value: x };
		}

		function inspect(handler) {
			var state = handler.state();
			return state === 0 ? toPendingState()
				 : state > 0   ? toFulfilledState(handler.value)
				               : toRejectedState(handler.value);
		}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			/**
			 * Normalize HTTP header names using the pseudo camel case.
			 *
			 * For example:
			 *   content-type         -> Content-Type
			 *   accepts              -> Accepts
			 *   x-custom-header-name -> X-Custom-Header-Name
			 *
			 * @param {string} name the raw header name
			 * @return {string} the normalized header name
			 */
			function normalizeHeaderName(name) {
				return name.toLowerCase()
					.split('-')
					.map(function (chunk) { return chunk.charAt(0).toUpperCase() + chunk.slice(1); })
					.join('-');
			}

			return normalizeHeaderName;

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {  /* globals require, module */

	  'use strict';

	  /**
	   * Module dependencies.
	   */

	  var pathtoRegexp = __webpack_require__(141);

	  /**
	   * Module exports.
	   */

	  module.exports = page;

	  /**
	   * Detect click event
	   */
	  var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';

	  /**
	   * To work properly with the URL
	   * history.location generated polyfill in https://github.com/devote/HTML5-History-API
	   */

	  var location = ('undefined' !== typeof window) && (window.history.location || window.location);

	  /**
	   * Perform initial dispatch.
	   */

	  var dispatch = true;


	  /**
	   * Decode URL components (query string, pathname, hash).
	   * Accommodates both regular percent encoding and x-www-form-urlencoded format.
	   */
	  var decodeURLComponents = true;

	  /**
	   * Base path.
	   */

	  var base = '';

	  /**
	   * Running flag.
	   */

	  var running;

	  /**
	   * HashBang option
	   */

	  var hashbang = false;

	  /**
	   * Previous context, for capturing
	   * page exit events.
	   */

	  var prevContext;

	  /**
	   * Register `path` with callback `fn()`,
	   * or route `path`, or redirection,
	   * or `page.start()`.
	   *
	   *   page(fn);
	   *   page('*', fn);
	   *   page('/user/:id', load, user);
	   *   page('/user/' + user.id, { some: 'thing' });
	   *   page('/user/' + user.id);
	   *   page('/from', '/to')
	   *   page();
	   *
	   * @param {String|Function} path
	   * @param {Function} fn...
	   * @api public
	   */

	  function page(path, fn) {
	    // <callback>
	    if ('function' === typeof path) {
	      return page('*', path);
	    }

	    // route <path> to <callback ...>
	    if ('function' === typeof fn) {
	      var route = new Route(path);
	      for (var i = 1; i < arguments.length; ++i) {
	        page.callbacks.push(route.middleware(arguments[i]));
	      }
	      // show <path> with [state]
	    } else if ('string' === typeof path) {
	      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);
	      // start [options]
	    } else {
	      page.start(path);
	    }
	  }

	  /**
	   * Callback functions.
	   */

	  page.callbacks = [];
	  page.exits = [];

	  /**
	   * Current path being processed
	   * @type {String}
	   */
	  page.current = '';

	  /**
	   * Number of pages navigated to.
	   * @type {number}
	   *
	   *     page.len == 0;
	   *     page('/login');
	   *     page.len == 1;
	   */

	  page.len = 0;

	  /**
	   * Get or set basepath to `path`.
	   *
	   * @param {String} path
	   * @api public
	   */

	  page.base = function(path) {
	    if (0 === arguments.length) return base;
	    base = path;
	  };

	  /**
	   * Bind with the given `options`.
	   *
	   * Options:
	   *
	   *    - `click` bind to click events [true]
	   *    - `popstate` bind to popstate [true]
	   *    - `dispatch` perform initial dispatch [true]
	   *
	   * @param {Object} options
	   * @api public
	   */

	  page.start = function(options) {
	    options = options || {};
	    if (running) return;
	    running = true;
	    if (false === options.dispatch) dispatch = false;
	    if (false === options.decodeURLComponents) decodeURLComponents = false;
	    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);
	    if (false !== options.click) {
	      document.addEventListener(clickEvent, onclick, false);
	    }
	    if (true === options.hashbang) hashbang = true;
	    if (!dispatch) return;
	    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;
	    page.replace(url, null, true, dispatch);
	  };

	  /**
	   * Unbind click and popstate event handlers.
	   *
	   * @api public
	   */

	  page.stop = function() {
	    if (!running) return;
	    page.current = '';
	    page.len = 0;
	    running = false;
	    document.removeEventListener(clickEvent, onclick, false);
	    window.removeEventListener('popstate', onpopstate, false);
	  };

	  /**
	   * Show `path` with optional `state` object.
	   *
	   * @param {String} path
	   * @param {Object} state
	   * @param {Boolean} dispatch
	   * @return {Context}
	   * @api public
	   */

	  page.show = function(path, state, dispatch, push) {
	    var ctx = new Context(path, state);
	    page.current = ctx.path;
	    if (false !== dispatch) page.dispatch(ctx);
	    if (false !== ctx.handled && false !== push) ctx.pushState();
	    return ctx;
	  };

	  /**
	   * Goes back in the history
	   * Back should always let the current route push state and then go back.
	   *
	   * @param {String} path - fallback path to go back if no more history exists, if undefined defaults to page.base
	   * @param {Object} [state]
	   * @api public
	   */

	  page.back = function(path, state) {
	    if (page.len > 0) {
	      // this may need more testing to see if all browsers
	      // wait for the next tick to go back in history
	      history.back();
	      page.len--;
	    } else if (path) {
	      setTimeout(function() {
	        page.show(path, state);
	      });
	    }else{
	      setTimeout(function() {
	        page.show(base, state);
	      });
	    }
	  };


	  /**
	   * Register route to redirect from one path to other
	   * or just redirect to another route
	   *
	   * @param {String} from - if param 'to' is undefined redirects to 'from'
	   * @param {String} [to]
	   * @api public
	   */
	  page.redirect = function(from, to) {
	    // Define route from a path to another
	    if ('string' === typeof from && 'string' === typeof to) {
	      page(from, function(e) {
	        setTimeout(function() {
	          page.replace(to);
	        }, 0);
	      });
	    }

	    // Wait for the push state and replace it with another
	    if ('string' === typeof from && 'undefined' === typeof to) {
	      setTimeout(function() {
	        page.replace(from);
	      }, 0);
	    }
	  };

	  /**
	   * Replace `path` with optional `state` object.
	   *
	   * @param {String} path
	   * @param {Object} state
	   * @return {Context}
	   * @api public
	   */


	  page.replace = function(path, state, init, dispatch) {
	    var ctx = new Context(path, state);
	    page.current = ctx.path;
	    ctx.init = init;
	    ctx.save(); // save before dispatching, which may redirect
	    if (false !== dispatch) page.dispatch(ctx);
	    return ctx;
	  };

	  /**
	   * Dispatch the given `ctx`.
	   *
	   * @param {Object} ctx
	   * @api private
	   */

	  page.dispatch = function(ctx) {
	    var prev = prevContext,
	      i = 0,
	      j = 0;

	    prevContext = ctx;

	    function nextExit() {
	      var fn = page.exits[j++];
	      if (!fn) return nextEnter();
	      fn(prev, nextExit);
	    }

	    function nextEnter() {
	      var fn = page.callbacks[i++];

	      if (ctx.path !== page.current) {
	        ctx.handled = false;
	        return;
	      }
	      if (!fn) return unhandled(ctx);
	      fn(ctx, nextEnter);
	    }

	    if (prev) {
	      nextExit();
	    } else {
	      nextEnter();
	    }
	  };

	  /**
	   * Unhandled `ctx`. When it's not the initial
	   * popstate then redirect. If you wish to handle
	   * 404s on your own use `page('*', callback)`.
	   *
	   * @param {Context} ctx
	   * @api private
	   */

	  function unhandled(ctx) {
	    if (ctx.handled) return;
	    var current;

	    if (hashbang) {
	      current = base + location.hash.replace('#!', '');
	    } else {
	      current = location.pathname + location.search;
	    }

	    if (current === ctx.canonicalPath) return;
	    page.stop();
	    ctx.handled = false;
	    location.href = ctx.canonicalPath;
	  }

	  /**
	   * Register an exit route on `path` with
	   * callback `fn()`, which will be called
	   * on the previous context when a new
	   * page is visited.
	   */
	  page.exit = function(path, fn) {
	    if (typeof path === 'function') {
	      return page.exit('*', path);
	    }

	    var route = new Route(path);
	    for (var i = 1; i < arguments.length; ++i) {
	      page.exits.push(route.middleware(arguments[i]));
	    }
	  };

	  /**
	   * Remove URL encoding from the given `str`.
	   * Accommodates whitespace in both x-www-form-urlencoded
	   * and regular percent-encoded form.
	   *
	   * @param {str} URL component to decode
	   */
	  function decodeURLEncodedURIComponent(val) {
	    if (typeof val !== 'string') { return val; }
	    return decodeURLComponents ? decodeURIComponent(val.replace(/\+/g, ' ')) : val;
	  }

	  /**
	   * Initialize a new "request" `Context`
	   * with the given `path` and optional initial `state`.
	   *
	   * @param {String} path
	   * @param {Object} state
	   * @api public
	   */

	  function Context(path, state) {
	    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;
	    var i = path.indexOf('?');

	    this.canonicalPath = path;
	    this.path = path.replace(base, '') || '/';
	    if (hashbang) this.path = this.path.replace('#!', '') || '/';

	    this.title = document.title;
	    this.state = state || {};
	    this.state.path = path;
	    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';
	    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);
	    this.params = {};

	    // fragment
	    this.hash = '';
	    if (!hashbang) {
	      if (!~this.path.indexOf('#')) return;
	      var parts = this.path.split('#');
	      this.path = parts[0];
	      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';
	      this.querystring = this.querystring.split('#')[0];
	    }
	  }

	  /**
	   * Expose `Context`.
	   */

	  page.Context = Context;

	  /**
	   * Push state.
	   *
	   * @api private
	   */

	  Context.prototype.pushState = function() {
	    page.len++;
	    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
	  };

	  /**
	   * Save the context state.
	   *
	   * @api public
	   */

	  Context.prototype.save = function() {
	    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
	  };

	  /**
	   * Initialize `Route` with the given HTTP `path`,
	   * and an array of `callbacks` and `options`.
	   *
	   * Options:
	   *
	   *   - `sensitive`    enable case-sensitive routes
	   *   - `strict`       enable strict matching for trailing slashes
	   *
	   * @param {String} path
	   * @param {Object} options.
	   * @api private
	   */

	  function Route(path, options) {
	    options = options || {};
	    this.path = (path === '*') ? '(.*)' : path;
	    this.method = 'GET';
	    this.regexp = pathtoRegexp(this.path,
	      this.keys = [],
	      options.sensitive,
	      options.strict);
	  }

	  /**
	   * Expose `Route`.
	   */

	  page.Route = Route;

	  /**
	   * Return route middleware with
	   * the given callback `fn()`.
	   *
	   * @param {Function} fn
	   * @return {Function}
	   * @api public
	   */

	  Route.prototype.middleware = function(fn) {
	    var self = this;
	    return function(ctx, next) {
	      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);
	      next();
	    };
	  };

	  /**
	   * Check if this route matches `path`, if so
	   * populate `params`.
	   *
	   * @param {String} path
	   * @param {Object} params
	   * @return {Boolean}
	   * @api private
	   */

	  Route.prototype.match = function(path, params) {
	    var keys = this.keys,
	      qsIndex = path.indexOf('?'),
	      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,
	      m = this.regexp.exec(decodeURIComponent(pathname));

	    if (!m) return false;

	    for (var i = 1, len = m.length; i < len; ++i) {
	      var key = keys[i - 1];
	      var val = decodeURLEncodedURIComponent(m[i]);
	      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {
	        params[key.name] = val;
	      }
	    }

	    return true;
	  };


	  /**
	   * Handle "populate" events.
	   */

	  var onpopstate = (function () {
	    var loaded = false;
	    if ('undefined' === typeof window) {
	      return;
	    }
	    if (document.readyState === 'complete') {
	      loaded = true;
	    } else {
	      window.addEventListener('load', function() {
	        setTimeout(function() {
	          loaded = true;
	        }, 0);
	      });
	    }
	    return function onpopstate(e) {
	      if (!loaded) return;
	      if (e.state) {
	        var path = e.state.path;
	        page.replace(path, e.state);
	      } else {
	        page.show(location.pathname + location.hash, undefined, undefined, false);
	      }
	    };
	  })();
	  /**
	   * Handle "click" events.
	   */

	  function onclick(e) {

	    if (1 !== which(e)) return;

	    if (e.metaKey || e.ctrlKey || e.shiftKey) return;
	    if (e.defaultPrevented) return;



	    // ensure link
	    var el = e.target;
	    while (el && 'A' !== el.nodeName) el = el.parentNode;
	    if (!el || 'A' !== el.nodeName) return;



	    // Ignore if tag has
	    // 1. "download" attribute
	    // 2. rel="external" attribute
	    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;

	    // ensure non-hash for the same path
	    var link = el.getAttribute('href');
	    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;



	    // Check for mailto: in the href
	    if (link && link.indexOf('mailto:') > -1) return;

	    // check target
	    if (el.target) return;

	    // x-origin
	    if (!sameOrigin(el.href)) return;



	    // rebuild path
	    var path = el.pathname + el.search + (el.hash || '');

	    // strip leading "/[drive letter]:" on NW.js on Windows
	    if (typeof process !== 'undefined' && path.match(/^\/[a-zA-Z]:\//)) {
	      path = path.replace(/^\/[a-zA-Z]:\//, '/');
	    }

	    // same page
	    var orig = path;

	    if (path.indexOf(base) === 0) {
	      path = path.substr(base.length);
	    }

	    if (hashbang) path = path.replace('#!', '');

	    if (base && orig === path) return;

	    e.preventDefault();
	    page.show(orig);
	  }

	  /**
	   * Event button.
	   */

	  function which(e) {
	    e = e || window.event;
	    return null === e.which ? e.button : e.which;
	  }

	  /**
	   * Check if `href` is the same origin.
	   */

	  function sameOrigin(href) {
	    var origin = location.protocol + '//' + location.hostname;
	    if (location.port) origin += ':' + location.port;
	    return (href && (0 === href.indexOf(origin)));
	  }

	  page.sameOrigin = sameOrigin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ForerunnerDB = __webpack_require__(48);
	var net = __webpack_require__(27);
	var mangaEden = __webpack_require__(145);

	var fdb = new ForerunnerDB();
	var db = fdb.db('flyleafco');
	var libraryCollection, cacheCollection;

	var Data = {

	    cache:{},

	    init: function () {
	        this.library.db = db.collection('library');
	        this.cache = db.collection('cache');
	        this.cache.load();

	        libraryCollection = this.library.db;
	        cacheCollection = this.cache;
	        // this.info = fdb.collection('info');
	    },

	    library: {
	        init: function (callback) {

	            var library = this.db;

	            library.load(function (err) {

	                if (err) callback(err, null);
	                else callback(null, {length: library.count()});

	            });
	        }
	    },

	    search: {
	        top: function (callback) {
	            this.run({string: '', sort: 'hits'}, callback);
	        },

	        run: function (options, callback) {
	            var path = '/search/alias/' + options.string;
	            var json = {};

	            if (options) {
	                if (options.end) json.end = options.end;
	                if (options.start) json.start = options.start;
	                if (options.all ) json.end = -1; json.start = -1;
	                if (options.sort) json.sort = options.sort;
	                if (options.genres) {
	                    if (options.genres.good.length > 0) {
	                        json.good = options.genres.good;
	                    }
	                }
	            }

	            if (json) {
	                net.postJson(path, json, function (err, data) {
	                    callback(err, data);
	                });
	            } else {
	                net.getJson(path, function (err, data) {
	                    callback(err, data);
	                });
	            }
	        },

	        getGenres: function (callback) {

	            net.getJson('/search/genres', function (err, data) {

	                if (err) callback(err, null);
	                else callback(null, data);

	            });
	        }
	    },

	    manga: {
	        get: function (id, callback) {

	            if (!id || id === '123') callback(new Error('MangaID Missing'), null);

	            var book = libraryCollection.find({_id: id});
	            if (book.length > 0) {
	                callback(null, book);
	            } else {
	                mangaEden.manga(id, function (err, book) {
	                    book._id = id;
	                    callback(err, book);
	                });
	            }

	        }
	    },

	    chapter: {
	        get: function (id, callback) {

	            if(!id) callback(new Error('ChapterID Missing'), null);

	            mangaEden.chapter(id, function (err, chapter) {
	                callback(err, chapter);
	            });
	        }
	    }
	};


	module.exports = Data;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var Core = __webpack_require__(49),
		CollectionGroup = __webpack_require__(13),
		View = __webpack_require__(31),
		Highchart = __webpack_require__(55),
		Persist = __webpack_require__(72),
		Document = __webpack_require__(30),
		Overview = __webpack_require__(71),
		Grid = __webpack_require__(54),
		Rest = __webpack_require__(75),
		Odm = __webpack_require__(69);

	if (typeof window !== 'undefined') {
		window.ForerunnerDB = Core;
	}

	module.exports = Core;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var Core = __webpack_require__(52),
		ShimIE8 = __webpack_require__(77);

	if (typeof window !== 'undefined') {
		window.ForerunnerDB = Core;
	}
	module.exports = Core;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3);

	/**
	 * Creates an always-sorted multi-key bucket that allows ForerunnerDB to
	 * know the index that a document will occupy in an array with minimal
	 * processing, speeding up things like sorted views.
	 * @param {object} orderBy An order object.
	 * @constructor
	 */
	var ActiveBucket = function (orderBy) {
		var sortKey;

		this._primaryKey = '_id';
		this._keyArr = [];
		this._data = [];
		this._objLookup = {};
		this._count = 0;

		for (sortKey in orderBy) {
			if (orderBy.hasOwnProperty(sortKey)) {
				this._keyArr.push({
					key: sortKey,
					dir: orderBy[sortKey]
				});
			}
		}
	};

	Shared.addModule('ActiveBucket', ActiveBucket);
	Shared.mixin(ActiveBucket.prototype, 'Mixin.Sorting');

	/**
	 * Gets / sets the primary key used by the active bucket.
	 * @returns {String} The current primary key.
	 */
	Shared.synthesize(ActiveBucket.prototype, 'primaryKey');

	/**
	 * Quicksorts a single document into the passed array and
	 * returns the index that the document should occupy.
	 * @param {object} obj The document to calculate index for.
	 * @param {array} arr The array the document index will be
	 * calculated for.
	 * @param {string} item The string key representation of the
	 * document whose index is being calculated.
	 * @param {function} fn The comparison function that is used
	 * to determine if a document is sorted below or above the
	 * document we are calculating the index for.
	 * @returns {number} The index the document should occupy.
	 */
	ActiveBucket.prototype.qs = function (obj, arr, item, fn) {
		// If the array is empty then return index zero
		if (!arr.length) {
			return 0;
		}

		var lastMidwayIndex = -1,
			midwayIndex,
			lookupItem,
			result,
			start = 0,
			end = arr.length - 1;

		// Loop the data until our range overlaps
		while (end >= start) {
			// Calculate the midway point (divide and conquer)
			midwayIndex = Math.floor((start + end) / 2);

			if (lastMidwayIndex === midwayIndex) {
				// No more items to scan
				break;
			}

			// Get the item to compare against
			lookupItem = arr[midwayIndex];

			if (lookupItem !== undefined) {
				// Compare items
				result = fn(this, obj, item, lookupItem);

				if (result > 0) {
					start = midwayIndex + 1;
				}

				if (result < 0) {
					end = midwayIndex - 1;
				}
			}

			lastMidwayIndex = midwayIndex;
		}

		if (result > 0) {
			return midwayIndex + 1;
		} else {
			return midwayIndex;
		}

	};

	/**
	 * Calculates the sort position of an item against another item.
	 * @param {object} sorter An object or instance that contains
	 * sortAsc and sortDesc methods.
	 * @param {object} obj The document to compare.
	 * @param {string} a The first key to compare.
	 * @param {string} b The second key to compare.
	 * @returns {number} Either 1 for sort a after b or -1 to sort
	 * a before b.
	 * @private
	 */
	ActiveBucket.prototype._sortFunc = function (sorter, obj, a, b) {
		var aVals = a.split('.:.'),
			bVals = b.split('.:.'),
			arr = sorter._keyArr,
			count = arr.length,
			index,
			sortType,
			castType;

		for (index = 0; index < count; index++) {
			sortType = arr[index];
			castType = typeof obj[sortType.key];

			if (castType === 'number') {
				aVals[index] = Number(aVals[index]);
				bVals[index] = Number(bVals[index]);
			}

			// Check for non-equal items
			if (aVals[index] !== bVals[index]) {
				// Return the sorted items
				if (sortType.dir === 1) {
					return sorter.sortAsc(aVals[index], bVals[index]);
				}

				if (sortType.dir === -1) {
					return sorter.sortDesc(aVals[index], bVals[index]);
				}
			}
		}
	};

	/**
	 * Inserts a document into the active bucket.
	 * @param {object} obj The document to insert.
	 * @returns {number} The index the document now occupies.
	 */
	ActiveBucket.prototype.insert = function (obj) {
		var key,
			keyIndex;

		key = this.documentKey(obj);
		keyIndex = this._data.indexOf(key);

		if (keyIndex === -1) {
			// Insert key
			keyIndex = this.qs(obj, this._data, key, this._sortFunc);

			this._data.splice(keyIndex, 0, key);
		} else {
			this._data.splice(keyIndex, 0, key);
		}

		this._objLookup[obj[this._primaryKey]] = key;

		this._count++;
		return keyIndex;
	};

	/**
	 * Removes a document from the active bucket.
	 * @param {object} obj The document to remove.
	 * @returns {boolean} True if the document was removed
	 * successfully or false if it wasn't found in the active
	 * bucket.
	 */
	ActiveBucket.prototype.remove = function (obj) {
		var key,
			keyIndex;

		key = this._objLookup[obj[this._primaryKey]];

		if (key) {
			keyIndex = this._data.indexOf(key);

			if (keyIndex > -1) {
				this._data.splice(keyIndex, 1);
				delete this._objLookup[obj[this._primaryKey]];

				this._count--;
				return true;
			} else {
				return false;
			}
		}

		return false;
	};

	/**
	 * Get the index that the passed document currently occupies
	 * or the index it will occupy if added to the active bucket.
	 * @param {object} obj The document to get the index for.
	 * @returns {number} The index.
	 */
	ActiveBucket.prototype.index = function (obj) {
		var key,
			keyIndex;

		key = this.documentKey(obj);
		keyIndex = this._data.indexOf(key);

		if (keyIndex === -1) {
			// Get key index
			keyIndex = this.qs(obj, this._data, key, this._sortFunc);
		}

		return keyIndex;
	};

	/**
	 * The key that represents the passed document.
	 * @param {object} obj The document to get the key for.
	 * @returns {string} The document key.
	 */
	ActiveBucket.prototype.documentKey = function (obj) {
		var key = '',
			arr = this._keyArr,
			count = arr.length,
			index,
			sortType;

		for (index = 0; index < count; index++) {
			sortType = arr[index];
			if (key) {
				key += '.:.';
			}

			key += obj[sortType.key];
		}

		// Add the unique identifier on the end of the key
		key += '.:.' + obj[this._primaryKey];

		return key;
	};

	/**
	 * Get the number of documents currently indexed in the active
	 * bucket instance.
	 * @returns {number} The number of documents.
	 */
	ActiveBucket.prototype.count = function () {
		return this._count;
	};

	Shared.finishModule('ActiveBucket');
	module.exports = ActiveBucket;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3),
		Path = __webpack_require__(14);

	var BinaryTree = function (data, compareFunc, hashFunc) {
		this.init.apply(this, arguments);
	};

	BinaryTree.prototype.init = function (data, index, compareFunc, hashFunc) {
		this._store = [];
		this._keys = [];

		if (index !== undefined) { this.index(index); }
		if (compareFunc !== undefined) { this.compareFunc(compareFunc); }
		if (hashFunc !== undefined) { this.hashFunc(hashFunc); }
		if (data !== undefined) { this.data(data); }
	};

	Shared.addModule('BinaryTree', BinaryTree);
	Shared.mixin(BinaryTree.prototype, 'Mixin.ChainReactor');
	Shared.mixin(BinaryTree.prototype, 'Mixin.Sorting');
	Shared.mixin(BinaryTree.prototype, 'Mixin.Common');

	Shared.synthesize(BinaryTree.prototype, 'compareFunc');
	Shared.synthesize(BinaryTree.prototype, 'hashFunc');
	Shared.synthesize(BinaryTree.prototype, 'indexDir');
	Shared.synthesize(BinaryTree.prototype, 'keys');
	Shared.synthesize(BinaryTree.prototype, 'index', function (index) {
		if (index !== undefined) {
			// Convert the index object to an array of key val objects
			this.keys(this.extractKeys(index));
		}

		return this.$super.call(this, index);
	});

	BinaryTree.prototype.extractKeys = function (obj) {
		var i,
			keys = [];

		for (i in obj) {
			if (obj.hasOwnProperty(i)) {
				keys.push({
					key: i,
					val: obj[i]
				});
			}
		}

		return keys;
	};

	BinaryTree.prototype.data = function (val) {
		if (val !== undefined) {
			this._data = val;

			if (this._hashFunc) { this._hash = this._hashFunc(val); }
			return this;
		}

		return this._data;
	};

	/**
	 * Pushes an item to the binary tree node's store array.
	 * @param {*} val The item to add to the store.
	 * @returns {*}
	 */
	BinaryTree.prototype.push = function (val) {
		if (val !== undefined) {
			this._store.push(val);
			return this;
		}

		return false;
	};

	/**
	 * Pulls an item from the binary tree node's store array.
	 * @param {*} val The item to remove from the store.
	 * @returns {*}
	 */
	BinaryTree.prototype.pull = function (val) {
		if (val !== undefined) {
			var index = this._store.indexOf(val);

			if (index > -1) {
				this._store.splice(index, 1);
				return this;
			}
		}

		return false;
	};

	/**
	 * Default compare method. Can be overridden.
	 * @param a
	 * @param b
	 * @returns {number}
	 * @private
	 */
	BinaryTree.prototype._compareFunc = function (a, b) {
		// Loop the index array
		var i,
			indexData,
			result = 0;

		for (i = 0; i < this._keys.length; i++) {
			indexData = this._keys[i];

			if (indexData.val === 1) {
				result = this.sortAsc(a[indexData.key], b[indexData.key]);
			} else if (indexData.val === -1) {
				result = this.sortDesc(a[indexData.key], b[indexData.key]);
			}

			if (result !== 0) {
				return result;
			}
		}

		return result;
	};

	/**
	 * Default hash function. Can be overridden.
	 * @param obj
	 * @private
	 */
	BinaryTree.prototype._hashFunc = function (obj) {
		/*var i,
			indexData,
			hash = '';

		for (i = 0; i < this._keys.length; i++) {
			indexData = this._keys[i];

			if (hash) { hash += '_'; }
			hash += obj[indexData.key];
		}

		return hash;*/

		return obj[this._keys[0].key];
	};

	BinaryTree.prototype.insert = function (data) {
		var result,
			inserted,
			failed,
			i;

		if (data instanceof Array) {
			// Insert array of data
			inserted = [];
			failed = [];

			for (i = 0; i < data.length; i++) {
				if (this.insert(data[i])) {
					inserted.push(data[i]);
				} else {
					failed.push(data[i]);
				}
			}

			return {
				inserted: inserted,
				failed: failed
			};
		}

		if (!this._data) {
			// Insert into this node (overwrite) as there is no data
			this.data(data);
			//this.push(data);
			return true;
		}

		result = this._compareFunc(this._data, data);

		if (result === 0) {
			this.push(data);

			// Less than this node
			if (this._left) {
				// Propagate down the left branch
				this._left.insert(data);
			} else {
				// Assign to left branch
				this._left = new BinaryTree(data, this._index, this._compareFunc, this._hashFunc);
			}

			return true;
		}

		if (result === -1) {
			// Greater than this node
			if (this._right) {
				// Propagate down the right branch
				this._right.insert(data);
			} else {
				// Assign to right branch
				this._right = new BinaryTree(data, this._index, this._compareFunc, this._hashFunc);
			}

			return true;
		}

		if (result === 1) {
			// Less than this node
			if (this._left) {
				// Propagate down the left branch
				this._left.insert(data);
			} else {
				// Assign to left branch
				this._left = new BinaryTree(data, this._index, this._compareFunc, this._hashFunc);
			}

			return true;
		}

		return false;
	};

	BinaryTree.prototype.lookup = function (data, resultArr) {
		var result = this._compareFunc(this._data, data);

		resultArr = resultArr || [];

		if (result === 0) {
			if (this._left) { this._left.lookup(data, resultArr); }
			resultArr.push(this._data);
			if (this._right) { this._right.lookup(data, resultArr); }
		}

		if (result === -1) {
			if (this._right) { this._right.lookup(data, resultArr); }
		}

		if (result === 1) {
			if (this._left) { this._left.lookup(data, resultArr); }
		}

		return resultArr;
	};

	BinaryTree.prototype.inOrder = function (type, resultArr) {
		resultArr = resultArr || [];

		if (this._left) {
			this._left.inOrder(type, resultArr);
		}

		switch (type) {
			case 'hash':
				resultArr.push(this._hash);
				break;

			case 'data':
				resultArr.push(this._data);
				break;

			default:
				resultArr.push({
					key: this._data,
					arr: this._store
				});
				break;
		}

		if (this._right) {
			this._right.inOrder(type, resultArr);
		}

		return resultArr;
	};

	/*BinaryTree.prototype.find = function (type, search, resultArr) {
		resultArr = resultArr || [];

		if (this._left) {
			this._left.find(type, search, resultArr);
		}

		// Check if this node's data is greater or less than the from value
		var fromResult = this.sortAsc(this._data[key], from),
				toResult = this.sortAsc(this._data[key], to);

		if ((fromResult === 0 || fromResult === 1) && (toResult === 0 || toResult === -1)) {
			// This data node is greater than or equal to the from value,
			// and less than or equal to the to value so include it
			switch (type) {
				case 'hash':
					resultArr.push(this._hash);
					break;

				case 'data':
					resultArr.push(this._data);
					break;

				default:
					resultArr.push({
						key: this._data,
						arr: this._store
					});
					break;
			}
		}

		if (this._right) {
			this._right.find(type, search, resultArr);
		}

		return resultArr;
	};*/

	/**
	 *
	 * @param {String} type
	 * @param {String} key The data key / path to range search against.
	 * @param {Number} from Range search from this value (inclusive)
	 * @param {Number} to Range search to this value (inclusive)
	 * @param {Array=} resultArr Leave undefined when calling (internal use),
	 * passes the result array between recursive calls to be returned when
	 * the recursion chain completes.
	 * @param {Path=} pathResolver Leave undefined when calling (internal use),
	 * caches the path resolver instance for performance.
	 * @returns {Array} Array of matching document objects
	 */
	BinaryTree.prototype.findRange = function (type, key, from, to, resultArr, pathResolver) {
		resultArr = resultArr || [];
		pathResolver = pathResolver || new Path(key);

		if (this._left) {
			this._left.findRange(type, key, from, to, resultArr, pathResolver);
		}

		// Check if this node's data is greater or less than the from value
		var pathVal = pathResolver.value(this._data),
			fromResult = this.sortAsc(pathVal, from),
			toResult = this.sortAsc(pathVal, to);

		if ((fromResult === 0 || fromResult === 1) && (toResult === 0 || toResult === -1)) {
			// This data node is greater than or equal to the from value,
			// and less than or equal to the to value so include it
			switch (type) {
				case 'hash':
					resultArr.push(this._hash);
					break;

				case 'data':
					resultArr.push(this._data);
					break;

				default:
					resultArr.push({
						key: this._data,
						arr: this._store
					});
					break;
			}
		}

		if (this._right) {
			this._right.findRange(type, key, from, to, resultArr, pathResolver);
		}

		return resultArr;
	};

	/*BinaryTree.prototype.findRegExp = function (type, key, pattern, resultArr) {
		resultArr = resultArr || [];

		if (this._left) {
			this._left.findRegExp(type, key, pattern, resultArr);
		}

		// Check if this node's data is greater or less than the from value
		var fromResult = this.sortAsc(this._data[key], from),
				toResult = this.sortAsc(this._data[key], to);

		if ((fromResult === 0 || fromResult === 1) && (toResult === 0 || toResult === -1)) {
			// This data node is greater than or equal to the from value,
			// and less than or equal to the to value so include it
			switch (type) {
				case 'hash':
					resultArr.push(this._hash);
					break;

				case 'data':
					resultArr.push(this._data);
					break;

				default:
					resultArr.push({
						key: this._data,
						arr: this._store
					});
					break;
			}
		}

		if (this._right) {
			this._right.findRegExp(type, key, pattern, resultArr);
		}

		return resultArr;
	};*/

	BinaryTree.prototype.match = function (query, options) {
		// Check if the passed query has data in the keys our index
		// operates on and if so, is the query sort matching our order
		var pathSolver = new Path(),
			indexKeyArr,
			queryArr,
			matchedKeys = [],
			matchedKeyCount = 0,
			i;

		indexKeyArr = pathSolver.parseArr(this._index, {
			verbose: true
		});

		queryArr = pathSolver.parseArr(query, {
			ignore:/\$/,
			verbose: true
		});

		// Loop the query array and check the order of keys against the
		// index key array to see if this index can be used
		for (i = 0; i < indexKeyArr.length; i++) {
			if (queryArr[i] === indexKeyArr[i]) {
				matchedKeyCount++;
				matchedKeys.push(queryArr[i]);
			}
		}

		return {
			matchedKeys: matchedKeys,
			totalKeyCount: queryArr.length,
			score: matchedKeyCount
		};

		//return pathSolver.countObjectPaths(this._keys, query);
	};

	Shared.finishModule('BinaryTree');
	module.exports = BinaryTree;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 License

	 Copyright (c) 2015 Irrelon Software Limited
	 http://www.irrelon.com
	 http://www.forerunnerdb.com

	 Please visit the license page to see latest license information:
	 http://www.forerunnerdb.com/licensing.html
	 */
	"use strict";

	var Shared,
		Db,
		Metrics,
		Overload,
		_instances = [];

	Shared = __webpack_require__(3);
	Overload = __webpack_require__(6);

	/**
	 * Creates a new ForerunnerDB instance. Core instances handle the lifecycle of
	 * multiple database instances.
	 * @constructor
	 */
	var Core = function (name) {
		this.init.apply(this, arguments);
	};

	Core.prototype.init = function (name) {
		this._db = {};
		this._debug = {};
		this._name = name || 'ForerunnerDB';

		_instances.push(this);
	};

	/**
	 * Returns the number of instantiated ForerunnerDB objects.
	 * @returns {Number} The number of instantiated instances.
	 */
	Core.prototype.instantiatedCount = function () {
		return _instances.length;
	};

	/**
	 * Get all instances as an array or a single ForerunnerDB instance
	 * by it's array index.
	 * @param {Number=} index Optional index of instance to get.
	 * @returns {Array|Object} Array of instances or a single instance.
	 */
	Core.prototype.instances = function (index) {
		if (index !== undefined) {
			return _instances[index];
		}

		return _instances;
	};

	/**
	 * Get all instances as an array of instance names or a single ForerunnerDB
	 * instance by it's name.
	 * @param {String=} name Optional name of instance to get.
	 * @returns {Array|Object} Array of instance names or a single instance.
	 */
	Core.prototype.namedInstances = function (name) {
		var i,
			instArr;

		if (name !== undefined) {
			for (i = 0; i < _instances.length; i++) {
				if (_instances[i].name === name) {
					return _instances[i];
				}
			}

			return undefined;
		}

		instArr = [];

		for (i = 0; i < _instances.length; i++) {
			instArr.push(_instances[i].name);
		}

		return instArr;
	};

	Core.prototype.moduleLoaded = new Overload({
		/**
		 * Checks if a module has been loaded into the database.
		 * @func moduleLoaded
		 * @memberof Core
		 * @param {String} moduleName The name of the module to check for.
		 * @returns {Boolean} True if the module is loaded, false if not.
		 */
		'string': function (moduleName) {
			if (moduleName !== undefined) {
				moduleName = moduleName.replace(/ /g, '');

				var modules = moduleName.split(','),
					index;

				for (index = 0; index < modules.length; index++) {
					if (!Shared.modules[modules[index]]) {
						return false;
					}
				}

				return true;
			}

			return false;
		},

		/**
		 * Checks if a module is loaded and if so calls the passed
		 * callback method.
		 * @func moduleLoaded
		 * @memberof Core
		 * @param {String} moduleName The name of the module to check for.
		 * @param {Function} callback The callback method to call if module is loaded.
		 */
		'string, function': function (moduleName, callback) {
			if (moduleName !== undefined) {
				moduleName = moduleName.replace(/ /g, '');

				var modules = moduleName.split(','),
					index;

				for (index = 0; index < modules.length; index++) {
					if (!Shared.modules[modules[index]]) {
						return false;
					}
				}

				if (callback) { callback(); }
			}
		},

		/**
		 * Checks if an array of named modules are loaded and if so
		 * calls the passed callback method.
		 * @func moduleLoaded
		 * @memberof Core
		 * @param {Array} moduleName The array of module names to check for.
		 * @param {Function} callback The callback method to call if modules are loaded.
		 */
		'array, function': function (moduleNameArr, callback) {
			var moduleName,
				i;

			for (i = 0; i < moduleNameArr.length; i++) {
				moduleName = moduleNameArr[i];

				if (moduleName !== undefined) {
					moduleName = moduleName.replace(/ /g, '');

					var modules = moduleName.split(','),
						index;

					for (index = 0; index < modules.length; index++) {
						if (!Shared.modules[modules[index]]) {
							return false;
						}
					}
				}
			}

			if (callback) { callback(); }
		},

		/**
		 * Checks if a module is loaded and if so calls the passed
		 * success method, otherwise calls the failure method.
		 * @func moduleLoaded
		 * @memberof Core
		 * @param {String} moduleName The name of the module to check for.
		 * @param {Function} success The callback method to call if module is loaded.
		 * @param {Function} failure The callback method to call if module not loaded.
		 */
		'string, function, function': function (moduleName, success, failure) {
			if (moduleName !== undefined) {
				moduleName = moduleName.replace(/ /g, '');

				var modules = moduleName.split(','),
					index;

				for (index = 0; index < modules.length; index++) {
					if (!Shared.modules[modules[index]]) {
						failure();
						return false;
					}
				}

				success();
			}
		}
	});

	/**
	 * Checks version against the string passed and if it matches (or partially matches)
	 * then the callback is called.
	 * @param {String} val The version to check against.
	 * @param {Function} callback The callback to call if match is true.
	 * @returns {Boolean}
	 */
	Core.prototype.version = function (val, callback) {
		if (val !== undefined) {
			if (Shared.version.indexOf(val) === 0) {
				if (callback) { callback(); }
				return true;
			}

			return false;
		}

		return Shared.version;
	};

	// Expose moduleLoaded() method to non-instantiated object ForerunnerDB
	Core.moduleLoaded = Core.prototype.moduleLoaded;

	// Expose version() method to non-instantiated object ForerunnerDB
	Core.version = Core.prototype.version;

	// Expose instances() method to non-instantiated object ForerunnerDB
	Core.instances = Core.prototype.instances;

	// Expose instantiatedCount() method to non-instantiated object ForerunnerDB
	Core.instantiatedCount = Core.prototype.instantiatedCount;

	// Provide public access to the Shared object
	Core.shared = Shared;
	Core.prototype.shared = Shared;

	Shared.addModule('Core', Core);
	Shared.mixin(Core.prototype, 'Mixin.Common');
	Shared.mixin(Core.prototype, 'Mixin.Constants');

	Db = __webpack_require__(53);
	Metrics = __webpack_require__(16);

	/**
	 * Gets / sets the name of the instance. This is primarily used for
	 * name-spacing persistent storage.
	 * @param {String=} val The name of the instance to set.
	 * @returns {*}
	 */
	Shared.synthesize(Core.prototype, 'name');

	/**
	 * Gets / sets mongodb emulation mode.
	 * @param {Boolean=} val True to enable, false to disable.
	 * @returns {*}
	 */
	Shared.synthesize(Core.prototype, 'mongoEmulation');

	// Set a flag to determine environment
	Core.prototype._isServer = false;

	/**
	 * Returns true if ForerunnerDB is running on a client browser.
	 * @returns {boolean}
	 */
	Core.prototype.isClient = function () {
		return !this._isServer;
	};

	/**
	 * Returns true if ForerunnerDB is running on a server.
	 * @returns {boolean}
	 */
	Core.prototype.isServer = function () {
		return this._isServer;
	};

	/**
	 * Checks if the database is running on a client (browser) or
	 * a server (node.js).
	 * @returns {Boolean} Returns true if running on a browser.
	 */
	Core.prototype.isClient = function () {
		return !this._isServer;
	};

	/**
	 * Checks if the database is running on a client (browser) or
	 * a server (node.js).
	 * @returns {Boolean} Returns true if running on a server.
	 */
	Core.prototype.isServer = function () {
		return this._isServer;
	};

	/**
	 * Added to provide an error message for users who have not seen
	 * the new instantiation breaking change warning and try to get
	 * a collection directly from the core instance.
	 */
	Core.prototype.collection = function () {
		throw("ForerunnerDB's instantiation has changed since version 1.3.36 to support multiple database instances. Please see the readme.md file for the minor change you have to make to get your project back up and running, or see the issue related to this change at https://github.com/Irrelon/ForerunnerDB/issues/44");
	};

	module.exports = Core;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared,
		Core,
		Collection,
		Metrics,
		Crc,
		Overload;

	Shared = __webpack_require__(3);
	Overload = __webpack_require__(6);

	/**
	 * Creates a new ForerunnerDB database instance.
	 * @constructor
	 */
	var Db = function (name, core) {
		this.init.apply(this, arguments);
	};

	Db.prototype.init = function (name, core) {
		this.core(core);
		this._primaryKey = '_id';
		this._name = name;
		this._collection = {};
		this._debug = {};
	};

	Shared.addModule('Db', Db);

	Db.prototype.moduleLoaded = new Overload({
		/**
		 * Checks if a module has been loaded into the database.
		 * @func moduleLoaded
		 * @memberof Db
		 * @param {String} moduleName The name of the module to check for.
		 * @returns {Boolean} True if the module is loaded, false if not.
		 */
		'string': function (moduleName) {
			if (moduleName !== undefined) {
				moduleName = moduleName.replace(/ /g, '');

				var modules = moduleName.split(','),
					index;

				for (index = 0; index < modules.length; index++) {
					if (!Shared.modules[modules[index]]) {
						return false;
					}
				}

				return true;
			}

			return false;
		},

		/**
		 * Checks if a module is loaded and if so calls the passed
		 * callback method.
		 * @func moduleLoaded
		 * @memberof Db
		 * @param {String} moduleName The name of the module to check for.
		 * @param {Function} callback The callback method to call if module is loaded.
		 */
		'string, function': function (moduleName, callback) {
			if (moduleName !== undefined) {
				moduleName = moduleName.replace(/ /g, '');

				var modules = moduleName.split(','),
					index;

				for (index = 0; index < modules.length; index++) {
					if (!Shared.modules[modules[index]]) {
						return false;
					}
				}

				if (callback) { callback(); }
			}
		},

		/**
		 * Checks if a module is loaded and if so calls the passed
		 * success method, otherwise calls the failure method.
		 * @func moduleLoaded
		 * @memberof Db
		 * @param {String} moduleName The name of the module to check for.
		 * @param {Function} success The callback method to call if module is loaded.
		 * @param {Function} failure The callback method to call if module not loaded.
		 */
		'string, function, function': function (moduleName, success, failure) {
			if (moduleName !== undefined) {
				moduleName = moduleName.replace(/ /g, '');

				var modules = moduleName.split(','),
					index;

				for (index = 0; index < modules.length; index++) {
					if (!Shared.modules[modules[index]]) {
						failure();
						return false;
					}
				}

				success();
			}
		}
	});

	/**
	 * Checks version against the string passed and if it matches (or partially matches)
	 * then the callback is called.
	 * @param {String} val The version to check against.
	 * @param {Function} callback The callback to call if match is true.
	 * @returns {Boolean}
	 */
	Db.prototype.version = function (val, callback) {
		if (val !== undefined) {
			if (Shared.version.indexOf(val) === 0) {
				if (callback) { callback(); }
				return true;
			}

			return false;
		}

		return Shared.version;
	};

	// Expose moduleLoaded method to non-instantiated object ForerunnerDB
	Db.moduleLoaded = Db.prototype.moduleLoaded;

	// Expose version method to non-instantiated object ForerunnerDB
	Db.version = Db.prototype.version;

	// Provide public access to the Shared object
	Db.shared = Shared;
	Db.prototype.shared = Shared;

	Shared.addModule('Db', Db);
	Shared.mixin(Db.prototype, 'Mixin.Common');
	Shared.mixin(Db.prototype, 'Mixin.ChainReactor');
	Shared.mixin(Db.prototype, 'Mixin.Constants');
	Shared.mixin(Db.prototype, 'Mixin.Tags');

	Core = Shared.modules.Core;
	Collection = __webpack_require__(5);
	Metrics = __webpack_require__(16);
	Crc = __webpack_require__(29);

	Db.prototype._isServer = false;

	/**
	 * Gets / sets the core object this database belongs to.
	 */
	Shared.synthesize(Db.prototype, 'core');

	/**
	 * Gets / sets the default primary key for new collections.
	 * @param {String=} val The name of the primary key to set.
	 * @returns {*}
	 */
	Shared.synthesize(Db.prototype, 'primaryKey');

	/**
	 * Gets / sets the current state.
	 * @param {String=} val The name of the state to set.
	 * @returns {*}
	 */
	Shared.synthesize(Db.prototype, 'state');

	/**
	 * Gets / sets the name of the database.
	 * @param {String=} val The name of the database to set.
	 * @returns {*}
	 */
	Shared.synthesize(Db.prototype, 'name');

	/**
	 * Gets / sets mongodb emulation mode.
	 * @param {Boolean=} val True to enable, false to disable.
	 * @returns {*}
	 */
	Shared.synthesize(Db.prototype, 'mongoEmulation');

	/**
	 * Returns true if ForerunnerDB is running on a client browser.
	 * @returns {boolean}
	 */
	Db.prototype.isClient = function () {
		return !this._isServer;
	};

	/**
	 * Returns true if ForerunnerDB is running on a server.
	 * @returns {boolean}
	 */
	Db.prototype.isServer = function () {
		return this._isServer;
	};

	/**
	 * Returns a checksum of a string.
	 * @param {String} string The string to checksum.
	 * @return {String} The checksum generated.
	 */
	Db.prototype.crc = Crc;

	/**
	 * Checks if the database is running on a client (browser) or
	 * a server (node.js).
	 * @returns {Boolean} Returns true if running on a browser.
	 */
	Db.prototype.isClient = function () {
		return !this._isServer;
	};

	/**
	 * Checks if the database is running on a client (browser) or
	 * a server (node.js).
	 * @returns {Boolean} Returns true if running on a server.
	 */
	Db.prototype.isServer = function () {
		return this._isServer;
	};

	/**
	 * Converts a normal javascript array of objects into a DB collection.
	 * @param {Array} arr An array of objects.
	 * @returns {Collection} A new collection instance with the data set to the
	 * array passed.
	 */
	Db.prototype.arrayToCollection = function (arr) {
		return new Collection().setData(arr);
	};

	/**
	 * Registers an event listener against an event name.
	 * @param {String} event The name of the event to listen for.
	 * @param {Function} listener The listener method to call when
	 * the event is fired.
	 * @returns {*}
	 */
	Db.prototype.on = function(event, listener) {
		this._listeners = this._listeners || {};
		this._listeners[event] = this._listeners[event] || [];
		this._listeners[event].push(listener);

		return this;
	};

	/**
	 * De-registers an event listener from an event name.
	 * @param {String} event The name of the event to stop listening for.
	 * @param {Function} listener The listener method passed to on() when
	 * registering the event listener.
	 * @returns {*}
	 */
	Db.prototype.off = function(event, listener) {
		if (event in this._listeners) {
			var arr = this._listeners[event],
				index = arr.indexOf(listener);

			if (index > -1) {
				arr.splice(index, 1);
			}
		}

		return this;
	};

	/**
	 * Emits an event by name with the given data.
	 * @param {String} event The name of the event to emit.
	 * @param {*=} data The data to emit with the event.
	 * @returns {*}
	 */
	Db.prototype.emit = function(event, data) {
		this._listeners = this._listeners || {};

		if (event in this._listeners) {
			var arr = this._listeners[event],
				arrCount = arr.length,
				arrIndex;

			for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
				arr[arrIndex].apply(this, Array.prototype.slice.call(arguments, 1));
			}
		}

		return this;
	};

	Db.prototype.peek = function (search) {
		var i,
				coll,
				arr = [],
				typeOfSearch = typeof search;

		// Loop collections
		for (i in this._collection) {
			if (this._collection.hasOwnProperty(i)) {
				coll = this._collection[i];

				if (typeOfSearch === 'string') {
					arr = arr.concat(coll.peek(search));
				} else {
					arr = arr.concat(coll.find(search));
				}
			}
		}

		return arr;
	};

	/**
	 * Find all documents across all collections in the database that match the passed
	 * string or search object.
	 * @param search String or search object.
	 * @returns {Array}
	 */
	Db.prototype.peek = function (search) {
		var i,
			coll,
			arr = [],
			typeOfSearch = typeof search;

		// Loop collections
		for (i in this._collection) {
			if (this._collection.hasOwnProperty(i)) {
				coll = this._collection[i];

				if (typeOfSearch === 'string') {
					arr = arr.concat(coll.peek(search));
				} else {
					arr = arr.concat(coll.find(search));
				}
			}
		}

		return arr;
	};

	/**
	 * Find all documents across all collections in the database that match the passed
	 * string or search object and return them in an object where each key is the name
	 * of the collection that the document was matched in.
	 * @param search String or search object.
	 * @returns {object}
	 */
	Db.prototype.peekCat = function (search) {
		var i,
			coll,
			cat = {},
			arr,
			typeOfSearch = typeof search;

		// Loop collections
		for (i in this._collection) {
			if (this._collection.hasOwnProperty(i)) {
				coll = this._collection[i];

				if (typeOfSearch === 'string') {
					arr = coll.peek(search);

					if (arr && arr.length) {
						cat[coll.name()] = arr;
					}
				} else {
					arr = coll.find(search);

					if (arr && arr.length) {
						cat[coll.name()] = arr;
					}
				}
			}
		}

		return cat;
	};

	Db.prototype.drop = new Overload({
		/**
		 * Drops the database.
		 * @func drop
		 * @memberof Db
		 */
		'': function () {
			if (!this.isDropped()) {
				var arr = this.collections(),
					arrCount = arr.length,
					arrIndex;

				this._state = 'dropped';

				for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
					this.collection(arr[arrIndex].name).drop();
					delete this._collection[arr[arrIndex].name];
				}

				this.emit('drop', this);

				delete this._core._db[this._name];
			}

			return true;
		},

		/**
		 * Drops the database with optional callback method.
		 * @func drop
		 * @memberof Db
		 * @param {Function} callback Optional callback method.
		 */
		'function': function (callback) {
			if (!this.isDropped()) {
				var arr = this.collections(),
					arrCount = arr.length,
					arrIndex,
					finishCount = 0,
					afterDrop = function () {
						finishCount++;

						if (finishCount === arrCount) {
							if (callback) { callback();	}
						}
					};

				this._state = 'dropped';

				for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
					this.collection(arr[arrIndex].name).drop(afterDrop);

					delete this._collection[arr[arrIndex].name];
				}

				this.emit('drop', this);

				delete this._core._db[this._name];
			}

			return true;
		},

		/**
		 * Drops the database with optional persistent storage drop. Persistent
		 * storage is dropped by default if no preference is provided.
		 * @func drop
		 * @memberof Db
		 * @param {Boolean} removePersist Drop persistent storage for this database.
		 */
		'boolean': function (removePersist) {
			if (!this.isDropped()) {
				var arr = this.collections(),
					arrCount = arr.length,
					arrIndex;

				this._state = 'dropped';

				for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
					this.collection(arr[arrIndex].name).drop(removePersist);
					delete this._collection[arr[arrIndex].name];
				}

				this.emit('drop', this);

				delete this._core._db[this._name];
			}

			return true;
		},

		/**
		 * Drops the database and optionally controls dropping persistent storage
		 * and callback method.
		 * @func drop
		 * @memberof Db
		 * @param {Boolean} removePersist Drop persistent storage for this database.
		 * @param {Function} callback Optional callback method.
		 */
		'boolean, function': function (removePersist, callback) {
			if (!this.isDropped()) {
				var arr = this.collections(),
					arrCount = arr.length,
					arrIndex,
					finishCount = 0,
					afterDrop = function () {
						finishCount++;

						if (finishCount === arrCount) {
							if (callback) { callback();	}
						}
					};

				this._state = 'dropped';

				for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
					this.collection(arr[arrIndex].name).drop(removePersist, afterDrop);
					delete this._collection[arr[arrIndex].name];
				}

				this.emit('drop', this);

				delete this._core._db[this._name];
			}

			return true;
		}
	});

	/**
	 * Gets a database instance by name.
	 * @memberof Core
	 * @param {String=} name Optional name of the database. If none is provided
	 * a random name is assigned.
	 * @returns {Db}
	 */
	Core.prototype.db = function (name) {
		// Handle being passed an instance
		if (name instanceof Db) {
			return name;
		}

		if (!name) {
			name = this.objectId();
		}

		this._db[name] = this._db[name] || new Db(name, this);

		this._db[name].mongoEmulation(this.mongoEmulation());

		return this._db[name];
	};

	/**
	 * Returns an array of databases that ForerunnerDB currently has.
	 * @memberof Core
	 * @param {String|RegExp=} search The optional search string or regular expression to use
	 * to match collection names against.
	 * @returns {Array} An array of objects containing details of each database
	 * that ForerunnerDB is currently managing and it's child entities.
	 */
	Core.prototype.databases = function (search) {
		var arr = [],
			tmpObj,
			addDb,
			i;

		if (search) {
			if (!(search instanceof RegExp)) {
				// Turn the search into a regular expression
				search = new RegExp(search);
			}
		}

		for (i in this._db) {
			if (this._db.hasOwnProperty(i)) {
				addDb = true;

				if (search) {
					if (!search.exec(i)) {
						addDb = false;
					}
				}

				if (addDb) {
					tmpObj = {
						name: i,
						children: []
					};

					if (this.shared.moduleExists('Collection')) {
						tmpObj.children.push({
							module: 'collection',
							moduleName: 'Collections',
							count: this._db[i].collections().length
						});
					}

					if (this.shared.moduleExists('CollectionGroup')) {
						tmpObj.children.push({
							module: 'collectionGroup',
							moduleName: 'Collection Groups',
							count: this._db[i].collectionGroups().length
						});
					}

					if (this.shared.moduleExists('Document')) {
						tmpObj.children.push({
							module: 'document',
							moduleName: 'Documents',
							count: this._db[i].documents().length
						});
					}

					if (this.shared.moduleExists('Grid')) {
						tmpObj.children.push({
							module: 'grid',
							moduleName: 'Grids',
							count: this._db[i].grids().length
						});
					}

					if (this.shared.moduleExists('Overview')) {
						tmpObj.children.push({
							module: 'overview',
							moduleName: 'Overviews',
							count: this._db[i].overviews().length
						});
					}

					if (this.shared.moduleExists('View')) {
						tmpObj.children.push({
							module: 'view',
							moduleName: 'Views',
							count: this._db[i].views().length
						});
					}

					arr.push(tmpObj);
				}
			}
		}

		arr.sort(function (a, b) {
			return a.name.localeCompare(b.name);
		});

		return arr;
	};

	Shared.finishModule('Db');
	module.exports = Db;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// Import external names locally
	var Shared,
		Db,
		Collection,
		CollectionGroup,
		View,
		CollectionInit,
		DbInit,
		ReactorIO;

	//Shared = ForerunnerDB.shared;
	Shared = __webpack_require__(3);

	/**
	 * Creates a new grid instance.
	 * @name Grid
	 * @class Grid
	 * @param {String} selector jQuery selector.
	 * @param {String} template The template selector.
	 * @param {Object=} options The options object to apply to the grid.
	 * @constructor
	 */
	var Grid = function (selector, template, options) {
		this.init.apply(this, arguments);
	};

	Grid.prototype.init = function (selector, template, options) {
		var self = this;

		this._selector = selector;
		this._template = template;
		this._options = options || {};
		this._debug = {};
		this._id = this.objectId();

		this._collectionDroppedWrap = function () {
			self._collectionDropped.apply(self, arguments);
		};
	};

	Shared.addModule('Grid', Grid);
	Shared.mixin(Grid.prototype, 'Mixin.Common');
	Shared.mixin(Grid.prototype, 'Mixin.ChainReactor');
	Shared.mixin(Grid.prototype, 'Mixin.Constants');
	Shared.mixin(Grid.prototype, 'Mixin.Triggers');
	Shared.mixin(Grid.prototype, 'Mixin.Events');
	Shared.mixin(Grid.prototype, 'Mixin.Tags');

	Collection = __webpack_require__(5);
	CollectionGroup = __webpack_require__(13);
	View = __webpack_require__(31);
	ReactorIO = __webpack_require__(17);
	CollectionInit = Collection.prototype.init;
	Db = Shared.modules.Db;
	DbInit = Db.prototype.init;

	/**
	 * Gets / sets the current state.
	 * @func state
	 * @memberof Grid
	 * @param {String=} val The name of the state to set.
	 * @returns {Grid}
	 */
	Shared.synthesize(Grid.prototype, 'state');

	/**
	 * Gets / sets the current name.
	 * @func name
	 * @memberof Grid
	 * @param {String=} val The name to set.
	 * @returns {Grid}
	 */
	Shared.synthesize(Grid.prototype, 'name');

	/**
	 * Executes an insert against the grid's underlying data-source.
	 * @func insert
	 * @memberof Grid
	 */
	Grid.prototype.insert = function () {
		this._from.insert.apply(this._from, arguments);
	};

	/**
	 * Executes an update against the grid's underlying data-source.
	 * @func update
	 * @memberof Grid
	 */
	Grid.prototype.update = function () {
		this._from.update.apply(this._from, arguments);
	};

	/**
	 * Executes an updateById against the grid's underlying data-source.
	 * @func updateById
	 * @memberof Grid
	 */
	Grid.prototype.updateById = function () {
		this._from.updateById.apply(this._from, arguments);
	};

	/**
	 * Executes a remove against the grid's underlying data-source.
	 * @func remove
	 * @memberof Grid
	 */
	Grid.prototype.remove = function () {
		this._from.remove.apply(this._from, arguments);
	};

	/**
	 * Sets the collection from which the grid will assemble its data.
	 * @func from
	 * @memberof Grid
	 * @param {Collection} collection The collection to use to assemble grid data.
	 * @returns {Grid}
	 */
	Grid.prototype.from = function (collection) {
		//var self = this;

		if (collection !== undefined) {
			// Check if we have an existing from
			if (this._from) {
				// Remove the listener to the drop event
				this._from.off('drop', this._collectionDroppedWrap);
				this._from._removeGrid(this);
			}

			if (typeof(collection) === 'string') {
				collection = this._db.collection(collection);
			}

			this._from = collection;
			this._from.on('drop', this._collectionDroppedWrap);
			this.refresh();
		}

		return this;
	};

	/**
	 * Gets / sets the db instance this class instance belongs to.
	 * @func db
	 * @memberof Grid
	 * @param {Db=} db The db instance.
	 * @returns {*}
	 */
	Shared.synthesize(Grid.prototype, 'db', function (db) {
		if (db) {
			// Apply the same debug settings
			this.debug(db.debug());
		}

		return this.$super.apply(this, arguments);
	});

	Grid.prototype._collectionDropped = function (collection) {
		if (collection) {
			// Collection was dropped, remove from grid
			delete this._from;
		}
	};

	/**
	 * Drops a grid and all it's stored data from the database.
	 * @func drop
	 * @memberof Grid
	 * @returns {boolean} True on success, false on failure.
	 */
	Grid.prototype.drop = function (callback) {
		if (!this.isDropped()) {
			if (this._from) {
				// Remove data-binding
				this._from.unlink(this._selector, this.template());

				// Kill listeners and references
				this._from.off('drop', this._collectionDroppedWrap);
				this._from._removeGrid(this);

				if (this.debug() || (this._db && this._db.debug())) {
					console.log(this.logIdentifier() + ' Dropping grid ' + this._selector);
				}

				this._state = 'dropped';

				if (this._db && this._selector) {
					delete this._db._grid[this._selector];
				}

				this.emit('drop', this);

				if (callback) { callback(false, true); }

				delete this._selector;
				delete this._template;
				delete this._from;
				delete this._db;

				return true;
			}
		} else {
			return true;
		}

		return false;
	};

	/**
	 * Gets / sets the grid's HTML template to use when rendering.
	 * @func template
	 * @memberof Grid
	 * @param {Selector} template The template's jQuery selector.
	 * @returns {*}
	 */
	Grid.prototype.template = function (template) {
		if (template !== undefined) {
			this._template = template;
			return this;
		}

		return this._template;
	};

	Grid.prototype._sortGridClick = function (e) {
		var elem = window.jQuery(e.currentTarget),
			sortColText = elem.attr('data-grid-sort') || '',
			sortColDir = parseInt((elem.attr('data-grid-dir') || "-1"), 10) === -1 ? 1 : -1,
			sortCols = sortColText.split(','),
			sortObj = {},
			i;

		// Remove all grid sort tags from the grid
		window.jQuery(this._selector).find('[data-grid-dir]').removeAttr('data-grid-dir');

		// Flip the sort direction
		elem.attr('data-grid-dir', sortColDir);

		for (i = 0; i < sortCols.length; i++) {
			sortObj[sortCols] = sortColDir;
		}

		Shared.mixin(sortObj, this._options.$orderBy);

		this._from.orderBy(sortObj);
		this.emit('sort', sortObj);
	};

	/**
	 * Refreshes the grid data such as ordering etc.
	 * @func refresh
	 * @memberof Grid
	 */
	Grid.prototype.refresh = function () {
		if (this._from) {
			if (this._from.link) {
				var self = this,
					elem = window.jQuery(this._selector),
					sortClickListener = function () {
						self._sortGridClick.apply(self, arguments);
					};

				// Clear the container
				elem.html('');

				if (self._from.orderBy) {
					// Remove listeners
					elem.off('click', '[data-grid-sort]', sortClickListener);
				}

				if (self._from.query) {
					// Remove listeners
					elem.off('click', '[data-grid-filter]', sortClickListener );
				}

				// Set wrap name if none is provided
				self._options.$wrap = self._options.$wrap || 'gridRow';

				// Auto-bind the data to the grid template
				self._from.link(self._selector, self.template(), self._options);

				// Check if the data source (collection or view) has an
				// orderBy method (usually only views) and if so activate
				// the sorting system
				if (self._from.orderBy) {
					// Listen for sort requests
					elem.on('click', '[data-grid-sort]', sortClickListener);
				}

				if (self._from.query) {
					// Listen for filter requests
					var queryObj = {};

					elem.find('[data-grid-filter]').each(function (index, filterElem) {
						filterElem = window.jQuery(filterElem);

						var filterField = filterElem.attr('data-grid-filter'),
							filterVarType = filterElem.attr('data-grid-vartype'),
							filterSort = {},
							title = filterElem.html(),
							dropDownButton,
							dropDownMenu,
							template,
							filterQuery,
							filterView = self._db.view('tmpGridFilter_' + self._id + '_' + filterField);

						filterSort[filterField] = 1;

						filterQuery = {
							$distinct: filterSort
						};

						filterView
							.query(filterQuery)
							.orderBy(filterSort)
							.from(self._from._from);

						template = [
							'<div class="dropdown" id="' + self._id + '_' + filterField + '">',
								'<button class="btn btn-default dropdown-toggle" type="button" id="' + self._id + '_' + filterField + '_dropdownButton" data-toggle="dropdown" aria-expanded="true">',
									title + ' <span class="caret"></span>',
								'</button>',
							'</div>'
						];

						dropDownButton = window.jQuery(template.join(''));
						dropDownMenu = window.jQuery('<ul class="dropdown-menu" role="menu" id="' + self._id + '_' + filterField + '_dropdownMenu"></ul>');

						dropDownButton.append(dropDownMenu);

						filterElem.html(dropDownButton);

						// Data-link the underlying data to the grid filter drop-down
						filterView.link(dropDownMenu, {
							template: [
								'<li role="presentation" class="input-group" style="width: 240px; padding-left: 10px; padding-right: 10px; padding-top: 5px;">',
									'<input type="search" class="form-control gridFilterSearch" placeholder="Search...">',
									'<span class="input-group-btn">',
										'<button class="btn btn-default gridFilterClearSearch" type="button"><span class="glyphicon glyphicon-remove-circle glyphicons glyphicons-remove"></span></button>',
									'</span>',
								'</li>',
								'<li role="presentation" class="divider"></li>',
								'<li role="presentation" data-val="$all">',
									'<a role="menuitem" tabindex="-1">',
										'<input type="checkbox" checked>&nbsp;All',
									'</a>',
								'</li>',
								'<li role="presentation" class="divider"></li>',
								'{^{for options}}',
									'<li role="presentation" data-link="data-val{:' + filterField + '}">',
										'<a role="menuitem" tabindex="-1">',
											'<input type="checkbox">&nbsp;{^{:' + filterField + '}}',
										'</a>',
									'</li>',
								'{{/for}}'
							].join('')
						}, {
							$wrap: 'options'
						});

						elem.on('keyup', '#' + self._id + '_' + filterField + '_dropdownMenu .gridFilterSearch', function (e) {
							var elem = window.jQuery(this),
								query = filterView.query(),
								search = elem.val();

							if (search) {
								query[filterField] = new RegExp(search, 'gi');
							} else {
								delete query[filterField];
							}

							filterView.query(query);
						});

						elem.on('click', '#' + self._id + '_' + filterField + '_dropdownMenu .gridFilterClearSearch', function (e) {
							// Clear search text box
							window.jQuery(this).parents('li').find('.gridFilterSearch').val('');

							// Clear view query
							var query = filterView.query();
							delete query[filterField];
							filterView.query(query);
						});

						elem.on('click', '#' + self._id + '_' + filterField + '_dropdownMenu li', function (e) {
							e.stopPropagation();

							var fieldValue,
								elem = $(this),
								checkbox = elem.find('input[type="checkbox"]'),
								checked,
								addMode = true,
								fieldInArr,
								liElem,
								i;

							// If the checkbox is not the one clicked on
							if (!window.jQuery(e.target).is('input')) {
								// Set checkbox to opposite of current value
								checkbox.prop('checked', !checkbox.prop('checked'));
								checked = checkbox.is(':checked');
							} else {
								checkbox.prop('checked', checkbox.prop('checked'));
								checked = checkbox.is(':checked');
							}

							liElem = window.jQuery(this);
							fieldValue = liElem.attr('data-val');

							// Check if the selection is the "all" option
							if (fieldValue === '$all') {
								// Remove the field from the query
								delete queryObj[filterField];

								// Clear all other checkboxes
								liElem.parent().find('li[data-val!="$all"]').find('input[type="checkbox"]').prop('checked', false);
							} else {
								// Clear the "all" checkbox
								liElem.parent().find('[data-val="$all"]').find('input[type="checkbox"]').prop('checked', false);

								// Check if the type needs casting
								switch (filterVarType) {
									case 'integer':
										fieldValue = parseInt(fieldValue, 10);
										break;

									case 'float':
										fieldValue = parseFloat(fieldValue);
										break;

									default:
								}

								// Check if the item exists already
								queryObj[filterField] = queryObj[filterField] || {
									$in: []
								};

								fieldInArr = queryObj[filterField].$in;

								for (i = 0; i < fieldInArr.length; i++) {
									if (fieldInArr[i] === fieldValue) {
										// Item already exists
										if (checked === false) {
											// Remove the item
											fieldInArr.splice(i, 1);
										}
										addMode = false;
										break;
									}
								}

								if (addMode && checked) {
									fieldInArr.push(fieldValue);
								}

								if (!fieldInArr.length) {
									// Remove the field from the query
									delete queryObj[filterField];
								}
							}

							// Set the view query
							self._from.queryData(queryObj);
							if (self._from.pageFirst) {
								self._from.pageFirst();
							}
						});
					});
				}

				self.emit('refresh');
			} else {
				throw('Grid requires the AutoBind module in order to operate!');
			}
		}

		return this;
	};

	/**
	 * Returns the number of documents currently in the grid.
	 * @func count
	 * @memberof Grid
	 * @returns {Number}
	 */
	Grid.prototype.count = function () {
		return this._from.count();
	};

	/**
	 * Creates a grid and assigns the collection as its data source.
	 * @func grid
	 * @memberof Collection
	 * @param {String} selector jQuery selector of grid output target.
	 * @param {String} template The table template to use when rendering the grid.
	 * @param {Object=} options The options object to apply to the grid.
	 * @returns {*}
	 */
	Collection.prototype.grid = View.prototype.grid = function (selector, template, options) {
		if (this._db && this._db._grid ) {
			if (selector !== undefined) {
				if (template !== undefined) {
					if (!this._db._grid[selector]) {
						var grid = new Grid(selector, template, options)
							.db(this._db)
							.from(this);

						this._grid = this._grid || [];
						this._grid.push(grid);

						this._db._grid[selector] = grid;

						return grid;
					} else {
						throw(this.logIdentifier() + ' Cannot create a grid because a grid with this name already exists: ' + selector);
					}
				}

				return this._db._grid[selector];
			}

			return this._db._grid;
		}
	};

	/**
	 * Removes a grid safely from the DOM. Must be called when grid is
	 * no longer required / is being removed from DOM otherwise references
	 * will stick around and cause memory leaks.
	 * @func unGrid
	 * @memberof Collection
	 * @param {String} selector jQuery selector of grid output target.
	 * @param {String} template The table template to use when rendering the grid.
	 * @param {Object=} options The options object to apply to the grid.
	 * @returns {*}
	 */
	Collection.prototype.unGrid = View.prototype.unGrid = function (selector, template, options) {
		var i,
			grid;

		if (this._db && this._db._grid ) {
			if (selector && template) {
				if (this._db._grid[selector]) {
					grid = this._db._grid[selector];
					delete this._db._grid[selector];

					return grid.drop();
				} else {
					throw(this.logIdentifier() + ' Cannot remove grid because a grid with this name does not exist: ' + name);
				}
			} else {
				// No parameters passed, remove all grids from this module
				for (i in this._db._grid) {
					if (this._db._grid.hasOwnProperty(i)) {
						grid = this._db._grid[i];
						delete this._db._grid[i];

						grid.drop();

						if (this.debug()) {
							console.log(this.logIdentifier() + ' Removed grid binding "' + i + '"');
						}
					}
				}

				this._db._grid = {};
			}
		}
	};

	/**
	 * Adds a grid to the internal grid lookup.
	 * @func _addGrid
	 * @memberof Collection
	 * @param {Grid} grid The grid to add.
	 * @returns {Collection}
	 * @private
	 */
	Collection.prototype._addGrid = CollectionGroup.prototype._addGrid = View.prototype._addGrid = function (grid) {
		if (grid !== undefined) {
			this._grid = this._grid || [];
			this._grid.push(grid);
		}

		return this;
	};

	/**
	 * Removes a grid from the internal grid lookup.
	 * @func _removeGrid
	 * @memberof Collection
	 * @param {Grid} grid The grid to remove.
	 * @returns {Collection}
	 * @private
	 */
	Collection.prototype._removeGrid = CollectionGroup.prototype._removeGrid = View.prototype._removeGrid = function (grid) {
		if (grid !== undefined && this._grid) {
			var index = this._grid.indexOf(grid);
			if (index > -1) {
				this._grid.splice(index, 1);
			}
		}

		return this;
	};

	// Extend DB with grids init
	Db.prototype.init = function () {
		this._grid = {};
		DbInit.apply(this, arguments);
	};

	/**
	 * Determine if a grid with the passed name already exists.
	 * @func gridExists
	 * @memberof Db
	 * @param {String} selector The jQuery selector to bind the grid to.
	 * @returns {boolean}
	 */
	Db.prototype.gridExists = function (selector) {
		return Boolean(this._grid[selector]);
	};

	/**
	 * Creates a grid based on the passed arguments.
	 * @func grid
	 * @memberof Db
	 * @param {String} selector The jQuery selector of the grid to retrieve.
	 * @param {String} template The table template to use when rendering the grid.
	 * @param {Object=} options The options object to apply to the grid.
	 * @returns {*}
	 */
	Db.prototype.grid = function (selector, template, options) {
		if (!this._grid[selector]) {
			if (this.debug() || (this._db && this._db.debug())) {
				console.log(this.logIdentifier() + ' Creating grid ' + selector);
			}
		}

		this._grid[selector] = this._grid[selector] || new Grid(selector, template, options).db(this);
		return this._grid[selector];
	};

	/**
	 * Removes a grid based on the passed arguments.
	 * @func unGrid
	 * @memberof Db
	 * @param {String} selector The jQuery selector of the grid to retrieve.
	 * @param {String} template The table template to use when rendering the grid.
	 * @param {Object=} options The options object to apply to the grid.
	 * @returns {*}
	 */
	Db.prototype.unGrid = function (selector, template, options) {
		if (!this._grid[selector]) {
			if (this.debug() || (this._db && this._db.debug())) {
				console.log(this.logIdentifier() + ' Creating grid ' + selector);
			}
		}

		this._grid[selector] = this._grid[selector] || new Grid(selector, template, options).db(this);
		return this._grid[selector];
	};

	/**
	 * Returns an array of grids the DB currently has.
	 * @func grids
	 * @memberof Db
	 * @returns {Array} An array of objects containing details of each grid
	 * the database is currently managing.
	 */
	Db.prototype.grids = function () {
		var arr = [],
			item,
			i;

		for (i in this._grid) {
			if (this._grid.hasOwnProperty(i)) {
				item = this._grid[i];

				arr.push({
					name: i,
					count: item.count(),
					linked: item.isLinked !== undefined ? item.isLinked() : false
				});
			}
		}

		return arr;
	};

	Shared.finishModule('Grid');
	module.exports = Grid;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// Import external names locally
	var Shared,
		Collection,
		CollectionInit,
		Overload;

	Shared = __webpack_require__(3);
	Overload = __webpack_require__(6);

	/**
	 * The constructor.
	 *
	 * @constructor
	 */
	var Highchart = function (collection, options) {
		this.init.apply(this, arguments);
	};

	Highchart.prototype.init = function (collection, options) {
		this._options = options;
		this._selector = window.jQuery(this._options.selector);

		if (!this._selector[0]) {
			throw(this.classIdentifier() + ' "' + collection.name() + '": Chart target element does not exist via selector: ' + this._options.selector);
		}

		this._listeners = {};
		this._collection = collection;

		// Setup the chart
		this._options.series = [];

		// Disable attribution on highcharts
		options.chartOptions = options.chartOptions || {};
		options.chartOptions.credits = false;

		// Set the data for the chart
		var data,
			seriesObj,
			chartData;

		switch (this._options.type) {
			case 'pie':
				// Create chart from data
				this._selector.highcharts(this._options.chartOptions);
				this._chart = this._selector.highcharts();

				// Generate graph data from collection data
				data = this._collection.find();

				seriesObj = {
					allowPointSelect: true,
					cursor: 'pointer',
					dataLabels: {
						enabled: true,
						format: '<b>{point.name}</b>: {y} ({point.percentage:.0f}%)',
						style: {
							color: (window.Highcharts.theme && window.Highcharts.theme.contrastTextColor) || 'black'
						}
					}
				};

				chartData = this.pieDataFromCollectionData(data, this._options.keyField, this._options.valField);

				window.jQuery.extend(seriesObj, this._options.seriesOptions);

				window.jQuery.extend(seriesObj, {
					name: this._options.seriesName,
					data: chartData
				});

				this._chart.addSeries(seriesObj, true, true);
				break;

			case 'line':
			case 'area':
			case 'column':
			case 'bar':
				// Generate graph data from collection data
				chartData = this.seriesDataFromCollectionData(
					this._options.seriesField,
					this._options.keyField,
					this._options.valField,
					this._options.orderBy,
					this._options
				);

				this._options.chartOptions.xAxis = chartData.xAxis;
				this._options.chartOptions.series = chartData.series;

				this._selector.highcharts(this._options.chartOptions);
				this._chart = this._selector.highcharts();
				break;

			default:
				throw(this.classIdentifier() + ' "' + collection.name() + '": Chart type specified is not currently supported by ForerunnerDB: ' + this._options.type);
		}

		// Hook the collection events to auto-update the chart
		this._hookEvents();
	};

	Shared.addModule('Highchart', Highchart);

	Collection = Shared.modules.Collection;
	CollectionInit = Collection.prototype.init;

	Shared.mixin(Highchart.prototype, 'Mixin.Common');
	Shared.mixin(Highchart.prototype, 'Mixin.Events');

	/**
	 * Gets / sets the current state.
	 * @param {String=} val The name of the state to set.
	 * @returns {*}
	 */
	Shared.synthesize(Highchart.prototype, 'state');

	/**
	 * Generate pie-chart series data from the given collection data array.
	 * @param data
	 * @param keyField
	 * @param valField
	 * @returns {Array}
	 */
	Highchart.prototype.pieDataFromCollectionData = function (data, keyField, valField) {
		var graphData = [],
			i;

		for (i = 0; i < data.length; i++) {
			graphData.push([data[i][keyField], data[i][valField]]);
		}

		return graphData;
	};

	/**
	 * Generate line-chart series data from the given collection data array.
	 * @param seriesField
	 * @param keyField
	 * @param valField
	 * @param orderBy
	 */
	Highchart.prototype.seriesDataFromCollectionData = function (seriesField, keyField, valField, orderBy, options) {
		var data = this._collection.distinct(seriesField),
			seriesData = [],
			xAxis = options && options.chartOptions && options.chartOptions.xAxis ? options.chartOptions.xAxis : {
				categories: []
			},
			seriesName,
			query,
			dataSearch,
			seriesValues,
			sData,
			i, k;

		// What we WANT to output:
		/*series: [{
			name: 'Responses',
			data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]
		}]*/

		// Loop keys
		for (i = 0; i < data.length; i++) {
			seriesName = data[i];
			query = {};
			query[seriesField] = seriesName;

			seriesValues = [];
			dataSearch = this._collection.find(query, {
				orderBy: orderBy
			});

			// Loop the keySearch data and grab the value for each item
			for (k = 0; k < dataSearch.length; k++) {
				if (xAxis.categories) {
					xAxis.categories.push(dataSearch[k][keyField]);
					seriesValues.push(dataSearch[k][valField]);
				} else {
					seriesValues.push([dataSearch[k][keyField], dataSearch[k][valField]]);
				}
			}

			sData = {
				name: seriesName,
				data: seriesValues
			};

			if (options.seriesOptions) {
				for (k in options.seriesOptions) {
					if (options.seriesOptions.hasOwnProperty(k)) {
						sData[k] = options.seriesOptions[k];
					}
				}
			}

			seriesData.push(sData);
		}

		return {
			xAxis: xAxis,
			series: seriesData
		};
	};

	/**
	 * Hook the events the chart needs to know about from the internal collection.
	 * @private
	 */
	Highchart.prototype._hookEvents = function () {
		var self = this;

		self._collection.on('change', function () {
			self._changeListener.apply(self, arguments);
		});

		// If the collection is dropped, clean up after ourselves
		self._collection.on('drop', function () {
			self.drop.apply(self);
		});
	};

	/**
	 * Handles changes to the collection data that the chart is reading from and then
	 * updates the data in the chart display.
	 * @private
	 */
	Highchart.prototype._changeListener = function () {
		var self = this;

		// Update the series data on the chart
		if (typeof self._collection !== 'undefined' && self._chart) {
			var data = self._collection.find(),
				i;

			switch (self._options.type) {
				case 'pie':
					self._chart.series[0].setData(
						self.pieDataFromCollectionData(
							data,
							self._options.keyField,
							self._options.valField
						),
						true,
						true
					);
					break;

				case 'bar':
				case 'line':
				case 'area':
				case 'column':
					var seriesData = self.seriesDataFromCollectionData(
						self._options.seriesField,
						self._options.keyField,
						self._options.valField,
						self._options.orderBy,
						self._options
					);

					if (seriesData.xAxis.categories) {
						self._chart.xAxis[0].setCategories(
							seriesData.xAxis.categories
						);
					}

					for (i = 0; i < seriesData.series.length; i++) {
						if (self._chart.series[i]) {
							// Series exists, set it's data
							self._chart.series[i].setData(
								seriesData.series[i].data,
								true,
								true
							);
						} else {
							// Series data does not yet exist, add a new series
							self._chart.addSeries(
								seriesData.series[i],
								true,
								true
							);
						}
					}
					break;

				default:
					break;
			}
		}
	};

	/**
	 * Destroys the chart and all internal references.
	 * @returns {Boolean}
	 */
	Highchart.prototype.drop = function (callback) {
		if (!this.isDropped()) {
			this._state = 'dropped';

			if (this._chart) {
				this._chart.destroy();
			}

			if (this._collection) {
				this._collection.off('change', this._changeListener);
				this._collection.off('drop', this.drop);

				if (this._collection._highcharts) {
					delete this._collection._highcharts[this._options.selector];
				}
			}

			delete this._chart;
			delete this._options;
			delete this._collection;

			this.emit('drop', this);

			if (callback) {
				callback(false, true);
			}

			return true;
		} else {
			return true;
		}
	};

	// Extend collection with highchart init
	Collection.prototype.init = function () {
		this._highcharts = {};
		CollectionInit.apply(this, arguments);
	};

	/**
	 * Creates a pie chart from the collection.
	 * @type {Overload}
	 */
	Collection.prototype.pieChart = new Overload({
		/**
		 * Chart via options object.
		 * @func pieChart
		 * @memberof Highchart
		 * @param {Object} options The options object.
		 * @returns {*}
		 */
		'object': function (options) {
			options.type = 'pie';

			options.chartOptions = options.chartOptions || {};
			options.chartOptions.chart = options.chartOptions.chart || {};
			options.chartOptions.chart.type = 'pie';

			if (!this._highcharts[options.selector]) {
				// Store new chart in charts array
				this._highcharts[options.selector] = new Highchart(this, options);
			}

			return this._highcharts[options.selector];
		},

		/**
		 * Chart via defined params and an options object.
		 * @func pieChart
		 * @memberof Highchart
		 * @param {String|jQuery} selector The element to render the chart to.
		 * @param {String} keyField The field to use as the data key.
		 * @param {String} valField The field to use as the data value.
		 * @param {String} seriesName The name of the series to display on the chart.
		 * @param {Object} options The options object.
		 */
		'*, string, string, string, ...': function (selector, keyField, valField, seriesName, options) {
			options = options || {};

			options.selector = selector;
			options.keyField = keyField;
			options.valField = valField;
			options.seriesName = seriesName;

			// Call the main chart method
			this.pieChart(options);
		}
	});

	/**
	 * Creates a line chart from the collection.
	 * @type {Overload}
	 */
	Collection.prototype.lineChart = new Overload({
		/**
		 * Chart via selector.
		 * @func lineChart
		 * @memberof Highchart
		 * @param {String} selector The chart selector.
		 * @returns {*}
		 */
		'string': function (selector) {
			return this._highcharts[selector];
		},

		/**
		 * Chart via options object.
		 * @func lineChart
		 * @memberof Highchart
		 * @param {Object} options The options object.
		 * @returns {*}
		 */
		'object': function (options) {
			options.type = 'line';

			options.chartOptions = options.chartOptions || {};
			options.chartOptions.chart = options.chartOptions.chart || {};
			options.chartOptions.chart.type = 'line';

			if (!this._highcharts[options.selector]) {
				// Store new chart in charts array
				this._highcharts[options.selector] = new Highchart(this, options);
			}

			return this._highcharts[options.selector];
		},

		/**
		 * Chart via defined params and an options object.
		 * @func lineChart
		 * @memberof Highchart
		 * @param {String|jQuery} selector The element to render the chart to.
		 * @param {String} seriesField The name of the series to plot.
		 * @param {String} keyField The field to use as the data key.
		 * @param {String} valField The field to use as the data value.
		 * @param {Object} options The options object.
		 */
		'*, string, string, string, ...': function (selector, seriesField, keyField, valField, options) {
			options = options || {};

			options.seriesField = seriesField;
			options.selector = selector;
			options.keyField = keyField;
			options.valField = valField;

			// Call the main chart method
			this.lineChart(options);
		}
	});

	/**
	 * Creates an area chart from the collection.
	 * @type {Overload}
	 */
	Collection.prototype.areaChart = new Overload({
		/**
		 * Chart via options object.
		 * @func areaChart
		 * @memberof Highchart
		 * @param {Object} options The options object.
		 * @returns {*}
		 */
		'object': function (options) {
			options.type = 'area';

			options.chartOptions = options.chartOptions || {};
			options.chartOptions.chart = options.chartOptions.chart || {};
			options.chartOptions.chart.type = 'area';

			if (!this._highcharts[options.selector]) {
				// Store new chart in charts array
				this._highcharts[options.selector] = new Highchart(this, options);
			}

			return this._highcharts[options.selector];
		},

		/**
		 * Chart via defined params and an options object.
		 * @func areaChart
		 * @memberof Highchart
		 * @param {String|jQuery} selector The element to render the chart to.
		 * @param {String} seriesField The name of the series to plot.
		 * @param {String} keyField The field to use as the data key.
		 * @param {String} valField The field to use as the data value.
		 * @param {Object} options The options object.
		 */
		'*, string, string, string, ...': function (selector, seriesField, keyField, valField, options) {
			options = options || {};

			options.seriesField = seriesField;
			options.selector = selector;
			options.keyField = keyField;
			options.valField = valField;

			// Call the main chart method
			this.areaChart(options);
		}
	});

	/**
	 * Creates a column chart from the collection.
	 * @type {Overload}
	 */
	Collection.prototype.columnChart = new Overload({
		/**
		 * Chart via options object.
		 * @func columnChart
		 * @memberof Highchart
		 * @param {Object} options The options object.
		 * @returns {*}
		 */
		'object': function (options) {
			options.type = 'column';

			options.chartOptions = options.chartOptions || {};
			options.chartOptions.chart = options.chartOptions.chart || {};
			options.chartOptions.chart.type = 'column';

			if (!this._highcharts[options.selector]) {
				// Store new chart in charts array
				this._highcharts[options.selector] = new Highchart(this, options);
			}

			return this._highcharts[options.selector];
		},

		/**
		 * Chart via defined params and an options object.
		 * @func columnChart
		 * @memberof Highchart
		 * @param {String|jQuery} selector The element to render the chart to.
		 * @param {String} seriesField The name of the series to plot.
		 * @param {String} keyField The field to use as the data key.
		 * @param {String} valField The field to use as the data value.
		 * @param {Object} options The options object.
		 */
		'*, string, string, string, ...': function (selector, seriesField, keyField, valField, options) {
			options = options || {};

			options.seriesField = seriesField;
			options.selector = selector;
			options.keyField = keyField;
			options.valField = valField;

			// Call the main chart method
			this.columnChart(options);
		}
	});

	/**
	 * Creates a bar chart from the collection.
	 * @type {Overload}
	 */
	Collection.prototype.barChart = new Overload({
		/**
		 * Chart via options object.
		 * @func barChart
		 * @memberof Highchart
		 * @param {Object} options The options object.
		 * @returns {*}
		 */
		'object': function (options) {
			options.type = 'bar';

			options.chartOptions = options.chartOptions || {};
			options.chartOptions.chart = options.chartOptions.chart || {};
			options.chartOptions.chart.type = 'bar';

			if (!this._highcharts[options.selector]) {
				// Store new chart in charts array
				this._highcharts[options.selector] = new Highchart(this, options);
			}

			return this._highcharts[options.selector];
		},

		/**
		 * Chart via defined params and an options object.
		 * @func barChart
		 * @memberof Highchart
		 * @param {String|jQuery} selector The element to render the chart to.
		 * @param {String} seriesField The name of the series to plot.
		 * @param {String} keyField The field to use as the data key.
		 * @param {String} valField The field to use as the data value.
		 * @param {Object} options The options object.
		 */
		'*, string, string, string, ...': function (selector, seriesField, keyField, valField, options) {
			options = options || {};

			options.seriesField = seriesField;
			options.selector = selector;
			options.keyField = keyField;
			options.valField = valField;

			// Call the main chart method
			this.barChart(options);
		}
	});

	/**
	 * Creates a stacked bar chart from the collection.
	 * @type {Overload}
	 */
	Collection.prototype.stackedBarChart = new Overload({
		/**
		 * Chart via options object.
		 * @func stackedBarChart
		 * @memberof Highchart
		 * @param {Object} options The options object.
		 * @returns {*}
		 */
		'object': function (options) {
			options.type = 'bar';

			options.chartOptions = options.chartOptions || {};
			options.chartOptions.chart = options.chartOptions.chart || {};
			options.chartOptions.chart.type = 'bar';

			options.plotOptions = options.plotOptions || {};
			options.plotOptions.series = options.plotOptions.series || {};
			options.plotOptions.series.stacking = options.plotOptions.series.stacking || 'normal';

			if (!this._highcharts[options.selector]) {
				// Store new chart in charts array
				this._highcharts[options.selector] = new Highchart(this, options);
			}

			return this._highcharts[options.selector];
		},

		/**
		 * Chart via defined params and an options object.
		 * @func stackedBarChart
		 * @memberof Highchart
		 * @param {String|jQuery} selector The element to render the chart to.
		 * @param {String} seriesField The name of the series to plot.
		 * @param {String} keyField The field to use as the data key.
		 * @param {String} valField The field to use as the data value.
		 * @param {Object} options The options object.
		 */
		'*, string, string, string, ...': function (selector, seriesField, keyField, valField, options) {
			options = options || {};

			options.seriesField = seriesField;
			options.selector = selector;
			options.keyField = keyField;
			options.valField = valField;

			// Call the main chart method
			this.stackedBarChart(options);
		}
	});

	/**
	 * Removes a chart from the page by it's selector.
	 * @memberof Collection
	 * @param {String} selector The chart selector.
	 */
	Collection.prototype.dropChart = function (selector) {
		if (this._highcharts && this._highcharts[selector]) {
			this._highcharts[selector].drop();
		}
	};

	Shared.finishModule('Highchart');
	module.exports = Highchart;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*
	name
	id
	rebuild
	state
	match
	lookup
	*/

	var Shared = __webpack_require__(3),
		Path = __webpack_require__(14),
		BinaryTree = __webpack_require__(51),
		treeInstance = new BinaryTree(),
		btree = function () {};

	treeInstance.inOrder('hash');

	/**
	 * The index class used to instantiate hash map indexes that the database can
	 * use to speed up queries on collections and views.
	 * @constructor
	 */
	var IndexBinaryTree = function () {
		this.init.apply(this, arguments);
	};

	IndexBinaryTree.prototype.init = function (keys, options, collection) {
		this._btree = new (btree.create(2, this.sortAsc))();
		this._size = 0;
		this._id = this._itemKeyHash(keys, keys);

		this.unique(options && options.unique ? options.unique : false);

		if (keys !== undefined) {
			this.keys(keys);
		}

		if (collection !== undefined) {
			this.collection(collection);
		}

		this.name(options && options.name ? options.name : this._id);
	};

	Shared.addModule('IndexBinaryTree', IndexBinaryTree);
	Shared.mixin(IndexBinaryTree.prototype, 'Mixin.ChainReactor');
	Shared.mixin(IndexBinaryTree.prototype, 'Mixin.Sorting');

	IndexBinaryTree.prototype.id = function () {
		return this._id;
	};

	IndexBinaryTree.prototype.state = function () {
		return this._state;
	};

	IndexBinaryTree.prototype.size = function () {
		return this._size;
	};

	Shared.synthesize(IndexBinaryTree.prototype, 'data');
	Shared.synthesize(IndexBinaryTree.prototype, 'name');
	Shared.synthesize(IndexBinaryTree.prototype, 'collection');
	Shared.synthesize(IndexBinaryTree.prototype, 'type');
	Shared.synthesize(IndexBinaryTree.prototype, 'unique');

	IndexBinaryTree.prototype.keys = function (val) {
		if (val !== undefined) {
			this._keys = val;

			// Count the keys
			this._keyCount = (new Path()).parse(this._keys).length;
			return this;
		}

		return this._keys;
	};

	IndexBinaryTree.prototype.rebuild = function () {
		// Do we have a collection?
		if (this._collection) {
			// Get sorted data
			var collection = this._collection.subset({}, {
					$decouple: false,
					$orderBy: this._keys
				}),
				collectionData = collection.find(),
				dataIndex,
				dataCount = collectionData.length;

			// Clear the index data for the index
			this._btree = new (btree.create(2, this.sortAsc))();

			if (this._unique) {
				this._uniqueLookup = {};
			}

			// Loop the collection data
			for (dataIndex = 0; dataIndex < dataCount; dataIndex++) {
				this.insert(collectionData[dataIndex]);
			}
		}

		this._state = {
			name: this._name,
			keys: this._keys,
			indexSize: this._size,
			built: new Date(),
			updated: new Date(),
			ok: true
		};
	};

	IndexBinaryTree.prototype.insert = function (dataItem, options) {
		var uniqueFlag = this._unique,
			uniqueHash,
			dataItemHash = this._itemKeyHash(dataItem, this._keys),
			keyArr;

		if (uniqueFlag) {
			uniqueHash = this._itemHash(dataItem, this._keys);
			this._uniqueLookup[uniqueHash] = dataItem;
		}

		// We store multiple items that match a key inside an array
		// that is then stored against that key in the tree...

		// Check if item exists for this key already
		keyArr = this._btree.get(dataItemHash);

		// Check if the array exists
		if (keyArr === undefined) {
			// Generate an array for this key first
			keyArr = [];

			// Put the new array into the tree under the key
			this._btree.put(dataItemHash, keyArr);
		}

		// Push the item into the array
		keyArr.push(dataItem);

		this._size++;
	};

	IndexBinaryTree.prototype.remove = function (dataItem, options) {
		var uniqueFlag = this._unique,
			uniqueHash,
			dataItemHash = this._itemKeyHash(dataItem, this._keys),
			keyArr,
			itemIndex;

		if (uniqueFlag) {
			uniqueHash = this._itemHash(dataItem, this._keys);
			delete this._uniqueLookup[uniqueHash];
		}

		// Try and get the array for the item hash key
		keyArr = this._btree.get(dataItemHash);

		if (keyArr !== undefined) {
			// The key array exits, remove the item from the key array
			itemIndex = keyArr.indexOf(dataItem);

			if (itemIndex > -1) {
				// Check the length of the array
				if (keyArr.length === 1) {
					// This item is the last in the array, just kill the tree entry
					this._btree.del(dataItemHash);
				} else {
					// Remove the item
					keyArr.splice(itemIndex, 1);
				}

				this._size--;
			}
		}
	};

	IndexBinaryTree.prototype.violation = function (dataItem) {
		// Generate item hash
		var uniqueHash = this._itemHash(dataItem, this._keys);

		// Check if the item breaks the unique constraint
		return Boolean(this._uniqueLookup[uniqueHash]);
	};

	IndexBinaryTree.prototype.hashViolation = function (uniqueHash) {
		// Check if the item breaks the unique constraint
		return Boolean(this._uniqueLookup[uniqueHash]);
	};

	IndexBinaryTree.prototype.lookup = function (query) {
		return this._data[this._itemHash(query, this._keys)] || [];
	};

	IndexBinaryTree.prototype.match = function (query, options) {
		// Check if the passed query has data in the keys our index
		// operates on and if so, is the query sort matching our order
		var pathSolver = new Path();
		var indexKeyArr = pathSolver.parseArr(this._keys),
			queryArr = pathSolver.parseArr(query),
			matchedKeys = [],
			matchedKeyCount = 0,
			i;

		// Loop the query array and check the order of keys against the
		// index key array to see if this index can be used
		for (i = 0; i < indexKeyArr.length; i++) {
			if (queryArr[i] === indexKeyArr[i]) {
				matchedKeyCount++;
				matchedKeys.push(queryArr[i]);
			} else {
				// Query match failed - this is a hash map index so partial key match won't work
				return {
					matchedKeys: [],
					totalKeyCount: queryArr.length,
					score: 0
				};
			}
		}

		return {
			matchedKeys: matchedKeys,
			totalKeyCount: queryArr.length,
			score: matchedKeyCount
		};

		//return pathSolver.countObjectPaths(this._keys, query);
	};

	IndexBinaryTree.prototype._itemHash = function (item, keys) {
		var path = new Path(),
			pathData,
			hash = '',
			k;

		pathData = path.parse(keys);

		for (k = 0; k < pathData.length; k++) {
			if (hash) { hash += '_'; }
			hash += path.value(item, pathData[k].path).join(':');
		}

		return hash;
	};

	IndexBinaryTree.prototype._itemKeyHash = function (item, keys) {
		var path = new Path(),
			pathData,
			hash = '',
			k;

		pathData = path.parse(keys);

		for (k = 0; k < pathData.length; k++) {
			if (hash) { hash += '_'; }
			hash += path.keyValue(item, pathData[k].path);
		}

		return hash;
	};

	IndexBinaryTree.prototype._itemHashArr = function (item, keys) {
		var path = new Path(),
			pathData,
			//hash = '',
			hashArr = [],
			valArr,
			i, k, j;

		pathData = path.parse(keys);

		for (k = 0; k < pathData.length; k++) {
			valArr = path.value(item, pathData[k].path);

			for (i = 0; i < valArr.length; i++) {
				if (k === 0) {
					// Setup the initial hash array
					hashArr.push(valArr[i]);
				} else {
					// Loop the hash array and concat the value to it
					for (j = 0; j < hashArr.length; j++) {
						hashArr[j] = hashArr[j] + '_' + valArr[i];
					}
				}
			}
		}

		return hashArr;
	};

	Shared.finishModule('IndexBinaryTree');
	module.exports = IndexBinaryTree;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3),
		Path = __webpack_require__(14);

	/**
	 * The index class used to instantiate hash map indexes that the database can
	 * use to speed up queries on collections and views.
	 * @constructor
	 */
	var IndexHashMap = function () {
		this.init.apply(this, arguments);
	};

	IndexHashMap.prototype.init = function (keys, options, collection) {
		this._crossRef = {};
		this._size = 0;
		this._id = this._itemKeyHash(keys, keys);

		this.data({});
		this.unique(options && options.unique ? options.unique : false);

		if (keys !== undefined) {
			this.keys(keys);
		}

		if (collection !== undefined) {
			this.collection(collection);
		}

		this.name(options && options.name ? options.name : this._id);
	};

	Shared.addModule('IndexHashMap', IndexHashMap);
	Shared.mixin(IndexHashMap.prototype, 'Mixin.ChainReactor');

	IndexHashMap.prototype.id = function () {
		return this._id;
	};

	IndexHashMap.prototype.state = function () {
		return this._state;
	};

	IndexHashMap.prototype.size = function () {
		return this._size;
	};

	Shared.synthesize(IndexHashMap.prototype, 'data');
	Shared.synthesize(IndexHashMap.prototype, 'name');
	Shared.synthesize(IndexHashMap.prototype, 'collection');
	Shared.synthesize(IndexHashMap.prototype, 'type');
	Shared.synthesize(IndexHashMap.prototype, 'unique');

	IndexHashMap.prototype.keys = function (val) {
		if (val !== undefined) {
			this._keys = val;

			// Count the keys
			this._keyCount = (new Path()).parse(this._keys).length;
			return this;
		}

		return this._keys;
	};

	IndexHashMap.prototype.rebuild = function () {
		// Do we have a collection?
		if (this._collection) {
			// Get sorted data
			var collection = this._collection.subset({}, {
					$decouple: false,
					$orderBy: this._keys
				}),
				collectionData = collection.find(),
				dataIndex,
				dataCount = collectionData.length;

			// Clear the index data for the index
			this._data = {};

			if (this._unique) {
				this._uniqueLookup = {};
			}

			// Loop the collection data
			for (dataIndex = 0; dataIndex < dataCount; dataIndex++) {
				this.insert(collectionData[dataIndex]);
			}
		}

		this._state = {
			name: this._name,
			keys: this._keys,
			indexSize: this._size,
			built: new Date(),
			updated: new Date(),
			ok: true
		};
	};

	IndexHashMap.prototype.insert = function (dataItem, options) {
		var uniqueFlag = this._unique,
			uniqueHash,
			itemHashArr,
			hashIndex;

		if (uniqueFlag) {
			uniqueHash = this._itemHash(dataItem, this._keys);
			this._uniqueLookup[uniqueHash] = dataItem;
		}

		// Generate item hash
		itemHashArr = this._itemHashArr(dataItem, this._keys);

		// Get the path search results and store them
		for (hashIndex = 0; hashIndex < itemHashArr.length; hashIndex++) {
			this.pushToPathValue(itemHashArr[hashIndex], dataItem);
		}
	};

	IndexHashMap.prototype.update = function (dataItem, options) {
		// TODO: Write updates to work
		// 1: Get uniqueHash for the dataItem primary key value (may need to generate a store for this)
		// 2: Remove the uniqueHash as it currently stands
		// 3: Generate a new uniqueHash for dataItem
		// 4: Insert the new uniqueHash
	};

	IndexHashMap.prototype.remove = function (dataItem, options) {
		var uniqueFlag = this._unique,
			uniqueHash,
			itemHashArr,
			hashIndex;

		if (uniqueFlag) {
			uniqueHash = this._itemHash(dataItem, this._keys);
			delete this._uniqueLookup[uniqueHash];
		}

		// Generate item hash
		itemHashArr = this._itemHashArr(dataItem, this._keys);

		// Get the path search results and store them
		for (hashIndex = 0; hashIndex < itemHashArr.length; hashIndex++) {
			this.pullFromPathValue(itemHashArr[hashIndex], dataItem);
		}
	};

	IndexHashMap.prototype.violation = function (dataItem) {
		// Generate item hash
		var uniqueHash = this._itemHash(dataItem, this._keys);

		// Check if the item breaks the unique constraint
		return Boolean(this._uniqueLookup[uniqueHash]);
	};

	IndexHashMap.prototype.hashViolation = function (uniqueHash) {
		// Check if the item breaks the unique constraint
		return Boolean(this._uniqueLookup[uniqueHash]);
	};

	IndexHashMap.prototype.pushToPathValue = function (hash, obj) {
		var pathValArr = this._data[hash] = this._data[hash] || [];

		// Make sure we have not already indexed this object at this path/value
		if (pathValArr.indexOf(obj) === -1) {
			// Index the object
			pathValArr.push(obj);

			// Record the reference to this object in our index size
			this._size++;

			// Cross-reference this association for later lookup
			this.pushToCrossRef(obj, pathValArr);
		}
	};

	IndexHashMap.prototype.pullFromPathValue = function (hash, obj) {
		var pathValArr = this._data[hash],
			indexOfObject;

		// Make sure we have already indexed this object at this path/value
		indexOfObject = pathValArr.indexOf(obj);

		if (indexOfObject > -1) {
			// Un-index the object
			pathValArr.splice(indexOfObject, 1);

			// Record the reference to this object in our index size
			this._size--;

			// Remove object cross-reference
			this.pullFromCrossRef(obj, pathValArr);
		}

		// Check if we should remove the path value array
		if (!pathValArr.length) {
			// Remove the array
			delete this._data[hash];
		}
	};

	IndexHashMap.prototype.pull = function (obj) {
		// Get all places the object has been used and remove them
		var id = obj[this._collection.primaryKey()],
			crossRefArr = this._crossRef[id],
			arrIndex,
			arrCount = crossRefArr.length,
			arrItem;

		for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
			arrItem = crossRefArr[arrIndex];

			// Remove item from this index lookup array
			this._pullFromArray(arrItem, obj);
		}

		// Record the reference to this object in our index size
		this._size--;

		// Now remove the cross-reference entry for this object
		delete this._crossRef[id];
	};

	IndexHashMap.prototype._pullFromArray = function (arr, obj) {
		var arrCount = arr.length;

		while (arrCount--) {
			if (arr[arrCount] === obj) {
				arr.splice(arrCount, 1);
			}
		}
	};

	IndexHashMap.prototype.pushToCrossRef = function (obj, pathValArr) {
		var id = obj[this._collection.primaryKey()],
			crObj;

		this._crossRef[id] = this._crossRef[id] || [];

		// Check if the cross-reference to the pathVal array already exists
		crObj = this._crossRef[id];

		if (crObj.indexOf(pathValArr) === -1) {
			// Add the cross-reference
			crObj.push(pathValArr);
		}
	};

	IndexHashMap.prototype.pullFromCrossRef = function (obj, pathValArr) {
		var id = obj[this._collection.primaryKey()];

		delete this._crossRef[id];
	};

	IndexHashMap.prototype.lookup = function (query) {
		return this._data[this._itemHash(query, this._keys)] || [];
	};

	IndexHashMap.prototype.match = function (query, options) {
		// Check if the passed query has data in the keys our index
		// operates on and if so, is the query sort matching our order
		var pathSolver = new Path();
		var indexKeyArr = pathSolver.parseArr(this._keys),
			queryArr = pathSolver.parseArr(query),
			matchedKeys = [],
			matchedKeyCount = 0,
			i;

		// Loop the query array and check the order of keys against the
		// index key array to see if this index can be used
		for (i = 0; i < indexKeyArr.length; i++) {
			if (queryArr[i] === indexKeyArr[i]) {
				matchedKeyCount++;
				matchedKeys.push(queryArr[i]);
			} else {
				// Query match failed - this is a hash map index so partial key match won't work
				return {
					matchedKeys: [],
					totalKeyCount: queryArr.length,
					score: 0
				};
			}
		}

		return {
			matchedKeys: matchedKeys,
			totalKeyCount: queryArr.length,
			score: matchedKeyCount
		};

		//return pathSolver.countObjectPaths(this._keys, query);
	};

	IndexHashMap.prototype._itemHash = function (item, keys) {
		var path = new Path(),
			pathData,
			hash = '',
			k;

		pathData = path.parse(keys);

		for (k = 0; k < pathData.length; k++) {
			if (hash) { hash += '_'; }
			hash += path.value(item, pathData[k].path).join(':');
		}

		return hash;
	};

	IndexHashMap.prototype._itemKeyHash = function (item, keys) {
		var path = new Path(),
			pathData,
			hash = '',
			k;

		pathData = path.parse(keys);

		for (k = 0; k < pathData.length; k++) {
			if (hash) { hash += '_'; }
			hash += path.keyValue(item, pathData[k].path);
		}

		return hash;
	};

	IndexHashMap.prototype._itemHashArr = function (item, keys) {
		var path = new Path(),
			pathData,
			//hash = '',
			hashArr = [],
			valArr,
			i, k, j;

		pathData = path.parse(keys);

		for (k = 0; k < pathData.length; k++) {
			valArr = path.value(item, pathData[k].path);

			for (i = 0; i < valArr.length; i++) {
				if (k === 0) {
					// Setup the initial hash array
					hashArr.push(valArr[i]);
				} else {
					// Loop the hash array and concat the value to it
					for (j = 0; j < hashArr.length; j++) {
						hashArr[j] = hashArr[j] + '_' + valArr[i];
					}
				}
			}
		}

		return hashArr;
	};

	Shared.finishModule('IndexHashMap');
	module.exports = IndexHashMap;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3);

	/**
	 * The key value store class used when storing basic in-memory KV data,
	 * and can be queried for quick retrieval. Mostly used for collection
	 * primary key indexes and lookups.
	 * @param {String=} name Optional KV store name.
	 * @constructor
	 */
	var KeyValueStore = function (name) {
		this.init.apply(this, arguments);
	};

	KeyValueStore.prototype.init = function (name) {
		this._name = name;
		this._data = {};
		this._primaryKey = '_id';
	};

	Shared.addModule('KeyValueStore', KeyValueStore);
	Shared.mixin(KeyValueStore.prototype, 'Mixin.ChainReactor');

	/**
	 * Get / set the name of the key/value store.
	 * @param {String} val The name to set.
	 * @returns {*}
	 */
	Shared.synthesize(KeyValueStore.prototype, 'name');

	/**
	 * Get / set the primary key.
	 * @param {String} key The key to set.
	 * @returns {*}
	 */
	KeyValueStore.prototype.primaryKey = function (key) {
		if (key !== undefined) {
			this._primaryKey = key;
			return this;
		}

		return this._primaryKey;
	};

	/**
	 * Removes all data from the store.
	 * @returns {*}
	 */
	KeyValueStore.prototype.truncate = function () {
		this._data = {};
		return this;
	};

	/**
	 * Sets data against a key in the store.
	 * @param {String} key The key to set data for.
	 * @param {*} value The value to assign to the key.
	 * @returns {*}
	 */
	KeyValueStore.prototype.set = function (key, value) {
		this._data[key] = value ? value : true;
		return this;
	};

	/**
	 * Gets data stored for the passed key.
	 * @param {String} key The key to get data for.
	 * @returns {*}
	 */
	KeyValueStore.prototype.get = function (key) {
		return this._data[key];
	};

	/**
	 * Get / set the primary key.
	 * @param {*} obj A lookup query, can be a string key, an array of string keys,
	 * an object with further query clauses or a regular expression that should be
	 * run against all keys.
	 * @returns {*}
	 */
	KeyValueStore.prototype.lookup = function (obj) {
		var pKeyVal = obj[this._primaryKey],
			arrIndex,
			arrCount,
			lookupItem,
			result;

		if (pKeyVal instanceof Array) {
			// An array of primary keys, find all matches
			arrCount = pKeyVal.length;
			result = [];

			for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
				lookupItem = this._data[pKeyVal[arrIndex]];

				if (lookupItem) {
					result.push(lookupItem);
				}
			}

			return result;
		} else if (pKeyVal instanceof RegExp) {
			// Create new data
			result = [];

			for (arrIndex in this._data) {
				if (this._data.hasOwnProperty(arrIndex)) {
					if (pKeyVal.test(arrIndex)) {
						result.push(this._data[arrIndex]);
					}
				}
			}

			return result;
		} else if (typeof pKeyVal === 'object') {
			// The primary key clause is an object, now we have to do some
			// more extensive searching
			if (pKeyVal.$ne) {
				// Create new data
				result = [];

				for (arrIndex in this._data) {
					if (this._data.hasOwnProperty(arrIndex)) {
						if (arrIndex !== pKeyVal.$ne) {
							result.push(this._data[arrIndex]);
						}
					}
				}

				return result;
			}

			if (pKeyVal.$in && (pKeyVal.$in instanceof Array)) {
				// Create new data
				result = [];

				for (arrIndex in this._data) {
					if (this._data.hasOwnProperty(arrIndex)) {
						if (pKeyVal.$in.indexOf(arrIndex) > -1) {
							result.push(this._data[arrIndex]);
						}
					}
				}

				return result;
			}

			if (pKeyVal.$nin && (pKeyVal.$nin instanceof Array)) {
				// Create new data
				result = [];

				for (arrIndex in this._data) {
					if (this._data.hasOwnProperty(arrIndex)) {
						if (pKeyVal.$nin.indexOf(arrIndex) === -1) {
							result.push(this._data[arrIndex]);
						}
					}
				}

				return result;
			}

			if (pKeyVal.$or && (pKeyVal.$or instanceof Array)) {
				// Create new data
				result = [];

				for (arrIndex = 0; arrIndex < pKeyVal.$or.length; arrIndex++) {
					result = result.concat(this.lookup(pKeyVal.$or[arrIndex]));
				}

				return result;
			}
		} else {
			// Key is a basic lookup from string
			lookupItem = this._data[pKeyVal];

			if (lookupItem !== undefined) {
				return [lookupItem];
			} else {
				return [];
			}
		}
	};

	/**
	 * Removes data for the given key from the store.
	 * @param {String} key The key to un-set.
	 * @returns {*}
	 */
	KeyValueStore.prototype.unSet = function (key) {
		delete this._data[key];
		return this;
	};

	/**
	 * Sets data for the give key in the store only where the given key
	 * does not already have a value in the store.
	 * @param {String} key The key to set data for.
	 * @param {*} value The value to assign to the key.
	 * @returns {Boolean} True if data was set or false if data already
	 * exists for the key.
	 */
	KeyValueStore.prototype.uniqueSet = function (key, value) {
		if (this._data[key] === undefined) {
			this._data[key] = value;
			return true;
		}

		return false;
	};

	Shared.finishModule('KeyValueStore');
	module.exports = KeyValueStore;

/***/ },
/* 59 */
/***/ function(module, exports) {

	"use strict";

	var CRUD = {
		preSetData: function () {
			
		},
		
		postSetData: function () {
			
		}
	};

	module.exports = CRUD;

/***/ },
/* 60 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * The chain reactor mixin, provides methods to the target object that allow chain
	 * reaction events to propagate to the target and be handled, processed and passed
	 * on down the chain.
	 * @mixin
	 */
	var ChainReactor = {
		/**
		 *
		 * @param obj
		 */
		chain: function (obj) {
			if (this.debug && this.debug()) {
				if (obj._reactorIn && obj._reactorOut) {
					console.log(obj._reactorIn.logIdentifier() + ' Adding target "' + obj._reactorOut.instanceIdentifier() + '" to the chain reactor target list');
				} else {
					console.log(this.logIdentifier() + ' Adding target "' + obj.instanceIdentifier() + '" to the chain reactor target list');
				}
			}

			this._chain = this._chain || [];
			var index = this._chain.indexOf(obj);

			if (index === -1) {
				this._chain.push(obj);
			}
		},

		unChain: function (obj) {
			if (this.debug && this.debug()) {
				if (obj._reactorIn && obj._reactorOut) {
					console.log(obj._reactorIn.logIdentifier() + ' Removing target "' + obj._reactorOut.instanceIdentifier() + '" from the chain reactor target list');
				} else {
					console.log(this.logIdentifier() + ' Removing target "' + obj.instanceIdentifier() + '" from the chain reactor target list');
				}
			}

			if (this._chain) {
				var index = this._chain.indexOf(obj);

				if (index > -1) {
					this._chain.splice(index, 1);
				}
			}
		},

		chainSend: function (type, data, options) {
			if (this._chain) {
				var arr = this._chain,
					arrItem,
					count = arr.length,
					index;

				for (index = 0; index < count; index++) {
					arrItem = arr[index];

					if (!arrItem._state || (arrItem._state && !arrItem.isDropped())) {
						if (this.debug && this.debug()) {
							if (arrItem._reactorIn && arrItem._reactorOut) {
								console.log(arrItem._reactorIn.logIdentifier() + ' Sending data down the chain reactor pipe to "' + arrItem._reactorOut.instanceIdentifier() + '"');
							} else {
								console.log(this.logIdentifier() + ' Sending data down the chain reactor pipe to "' + arrItem.instanceIdentifier() + '"');
							}
						}

						arrItem.chainReceive(this, type, data, options);
					} else {
						console.log('Reactor Data:', type, data, options);
						console.log('Reactor Node:', arrItem);
						throw('Chain reactor attempting to send data to target reactor node that is in a dropped state!');
					}

				}
			}
		},

		chainReceive: function (sender, type, data, options) {
			var chainPacket = {
				sender: sender,
				type: type,
				data: data,
				options: options
			};

			if (this.debug && this.debug()) {
				console.log(this.logIdentifier() + 'Received data from parent reactor node');
			}

			// Fire our internal handler
			if (!this._chainHandler || (this._chainHandler && !this._chainHandler(chainPacket))) {
				// Propagate the message down the chain
				this.chainSend(chainPacket.type, chainPacket.data, chainPacket.options);
			}
		}
	};

	module.exports = ChainReactor;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var idCounter = 0,
		Overload = __webpack_require__(6),
		Serialiser = __webpack_require__(76),
		Common,
		serialiser = new Serialiser();

	/**
	 * Provides commonly used methods to most classes in ForerunnerDB.
	 * @mixin
	 */
	Common = {
		// Expose the serialiser object so it can be extended with new data handlers.
		serialiser: serialiser,

		/**
		 * Gets / sets data in the item store. The store can be used to set and
		 * retrieve data against a key. Useful for adding arbitrary key/value data
		 * to a collection / view etc and retrieving it later.
		 * @param {String|*} key The key under which to store the passed value or
		 * retrieve the existing stored value.
		 * @param {*=} val Optional value. If passed will overwrite the existing value
		 * stored against the specified key if one currently exists.
		 * @returns {*}
		 */
		store: function (key, val) {
			if (key !== undefined) {
				if (val !== undefined) {
					// Store the data
					this._store = this._store || {};
					this._store[key] = val;

					return this;
				}

				if (this._store) {
					return this._store[key];
				}
			}

			return undefined;
		},

		/**
		 * Removes a previously stored key/value pair from the item store, set previously
		 * by using the store() method.
		 * @param {String|*} key The key of the key/value pair to remove;
		 * @returns {Common} Returns this for chaining.
		 */
		unStore: function (key) {
			if (key !== undefined) {
				delete this._store[key];
			}

			return this;
		},

		/**
		 * Returns a non-referenced version of the passed object / array.
		 * @param {Object} data The object or array to return as a non-referenced version.
		 * @param {Number=} copies Optional number of copies to produce. If specified, the return
		 * value will be an array of decoupled objects, each distinct from the other.
		 * @returns {*}
		 */	
		decouple: function (data, copies) {
			if (data !== undefined) {
				if (!copies) {
					return this.jParse(this.jStringify(data));
				} else {
					var i,
						json = this.jStringify(data),
						copyArr = [];

					for (i = 0; i < copies; i++) {
						copyArr.push(this.jParse(json));
					}

					return copyArr;
				}
			}

			return undefined;
		},

		/**
		 * Parses and returns data from stringified version.
		 * @param {String} data The stringified version of data to parse.
		 * @returns {Object} The parsed JSON object from the data.
		 */
		jParse: function (data) {
			return serialiser.parse(data);
			//return JSON.parse(data);
		},

		/**
		 * Converts a JSON object into a stringified version.
		 * @param {Object} data The data to stringify.
		 * @returns {String} The stringified data.
		 */
		jStringify: function (data) {
			return serialiser.stringify(data);
			//return JSON.stringify(data);
		},
		
		/**
		 * Generates a new 16-character hexadecimal unique ID or
		 * generates a new 16-character hexadecimal ID based on
		 * the passed string. Will always generate the same ID
		 * for the same string.
		 * @param {String=} str A string to generate the ID from.
		 * @return {String}
		 */
		objectId: function (str) {
			var id,
				pow = Math.pow(10, 17);

			if (!str) {
				idCounter++;

				id = (idCounter + (
					Math.random() * pow +
					Math.random() * pow +
					Math.random() * pow +
					Math.random() * pow
				)).toString(16);
			} else {
				var val = 0,
					count = str.length,
					i;

				for (i = 0; i < count; i++) {
					val += str.charCodeAt(i) * pow;
				}

				id = val.toString(16);
			}

			return id;
		},

		/**
		 * Gets / sets debug flag that can enable debug message output to the
		 * console if required.
		 * @param {Boolean} val The value to set debug flag to.
		 * @return {Boolean} True if enabled, false otherwise.
		 */
		/**
		 * Sets debug flag for a particular type that can enable debug message
		 * output to the console if required.
		 * @param {String} type The name of the debug type to set flag for.
		 * @param {Boolean} val The value to set debug flag to.
		 * @return {Boolean} True if enabled, false otherwise.
		 */
		debug: new Overload([
			function () {
				return this._debug && this._debug.all;
			},

			function (val) {
				if (val !== undefined) {
					if (typeof val === 'boolean') {
						this._debug = this._debug || {};
						this._debug.all = val;
						this.chainSend('debug', this._debug);
						return this;
					} else {
						return (this._debug && this._debug[val]) || (this._db && this._db._debug && this._db._debug[val]) || (this._debug && this._debug.all);
					}
				}

				return this._debug && this._debug.all;
			},

			function (type, val) {
				if (type !== undefined) {
					if (val !== undefined) {
						this._debug = this._debug || {};
						this._debug[type] = val;
						this.chainSend('debug', this._debug);
						return this;
					}

					return (this._debug && this._debug[val]) || (this._db && this._db._debug && this._db._debug[type]);
				}

				return this._debug && this._debug.all;
			}
		]),

		/**
		 * Returns a string describing the class this instance is derived from.
		 * @returns {string}
		 */
		classIdentifier: function () {
			return 'ForerunnerDB.' + this.className;
		},

		/**
		 * Returns a string describing the instance by it's class name and instance
		 * object name.
		 * @returns {String} The instance identifier.
		 */
		instanceIdentifier: function () {
			return '[' + this.className + ']' + this.name();
		},

		/**
		 * Returns a string used to denote a console log against this instance,
		 * consisting of the class identifier and instance identifier.
		 * @returns {string} The log identifier.
		 */
		logIdentifier: function () {
			return this.classIdentifier() + ': ' + this.instanceIdentifier();
		},

		/**
		 * Converts a query object with MongoDB dot notation syntax
		 * to Forerunner's object notation syntax.
		 * @param {Object} obj The object to convert.
		 */
		convertToFdb: function (obj) {
			var varName,
				splitArr,
				objCopy,
				i;

			for (i in obj) {
				if (obj.hasOwnProperty(i)) {
					objCopy = obj;

					if (i.indexOf('.') > -1) {
						// Replace .$ with a placeholder before splitting by . char
						i = i.replace('.$', '[|$|]');
						splitArr = i.split('.');

						while ((varName = splitArr.shift())) {
							// Replace placeholder back to original .$
							varName = varName.replace('[|$|]', '.$');

							if (splitArr.length) {
								objCopy[varName] = {};
							} else {
								objCopy[varName] = obj[i];
							}

							objCopy = objCopy[varName];
						}

						delete obj[i];
					}
				}
			}
		},

		/**
		 * Checks if the state is dropped.
		 * @returns {boolean} True when dropped, false otherwise.
		 */
		isDropped: function () {
			return this._state === 'dropped';
		}
	};

	module.exports = Common;

/***/ },
/* 62 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Provides some database constants.
	 * @mixin
	 */
	var Constants = {
		TYPE_INSERT: 0,
		TYPE_UPDATE: 1,
		TYPE_REMOVE: 2,

		PHASE_BEFORE: 0,
		PHASE_AFTER: 1
	};

	module.exports = Constants;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Overload = __webpack_require__(6);

	/**
	 * Provides event emitter functionality including the methods: on, off, once, emit, deferEmit.
	 * @mixin
	 */
	var Events = {
		on: new Overload({
			/**
			 * Attach an event listener to the passed event.
			 * @param {String} event The name of the event to listen for.
			 * @param {Function} listener The method to call when the event is fired.
			 */
			'string, function': function (event, listener) {
				this._listeners = this._listeners || {};
				this._listeners[event] = this._listeners[event] || {};
				this._listeners[event]['*'] = this._listeners[event]['*'] || [];
				this._listeners[event]['*'].push(listener);

				return this;
			},

			/**
			 * Attach an event listener to the passed event only if the passed
			 * id matches the document id for the event being fired.
			 * @param {String} event The name of the event to listen for.
			 * @param {*} id The document id to match against.
			 * @param {Function} listener The method to call when the event is fired.
			 */
			'string, *, function': function (event, id, listener) {
				this._listeners = this._listeners || {};
				this._listeners[event] = this._listeners[event] || {};
				this._listeners[event][id] = this._listeners[event][id] || [];
				this._listeners[event][id].push(listener);

				return this;
			}
		}),

		once: new Overload({
			'string, function': function (eventName, callback) {
				var self = this,
					internalCallback = function () {
						self.off(eventName, internalCallback);
						callback.apply(self, arguments);
					};

				return this.on(eventName, internalCallback);
			},
			
			'string, *, function': function (eventName, id, callback) {
				var self = this,
					internalCallback = function () {
						self.off(eventName, id, internalCallback);
						callback.apply(self, arguments);
					};

				return this.on(eventName, id, internalCallback);
			}
		}),

		off: new Overload({
			'string': function (event) {
				if (this._listeners && this._listeners[event] && event in this._listeners) {
					delete this._listeners[event];
				}

				return this;
			},

			'string, function': function (event, listener) {
				var arr,
					index;

				if (typeof(listener) === 'string') {
					if (this._listeners && this._listeners[event] && this._listeners[event][listener]) {
						delete this._listeners[event][listener];
					}
				} else {
					if (this._listeners && event in this._listeners) {
						arr = this._listeners[event]['*'];
						index = arr.indexOf(listener);

						if (index > -1) {
							arr.splice(index, 1);
						}
					}
				}

				return this;
			},

			'string, *, function': function (event, id, listener) {
				if (this._listeners && event in this._listeners && id in this.listeners[event]) {
					var arr = this._listeners[event][id],
						index = arr.indexOf(listener);

					if (index > -1) {
						arr.splice(index, 1);
					}
				}
			},

			'string, *': function (event, id) {
				if (this._listeners && event in this._listeners && id in this._listeners[event]) {
					// Kill all listeners for this event id
					delete this._listeners[event][id];
				}
			}
		}),

		emit: function (event, data) {
			this._listeners = this._listeners || {};

			if (event in this._listeners) {
				var arrIndex,
					arrCount,
					tmpFunc,
					arr,
					listenerIdArr,
					listenerIdCount,
					listenerIdIndex;

				// Handle global emit
				if (this._listeners[event]['*']) {
					arr = this._listeners[event]['*'];
					arrCount = arr.length;

					for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
						// Check we have a function to execute
						tmpFunc = arr[arrIndex];

						if (typeof tmpFunc === 'function') {
							tmpFunc.apply(this, Array.prototype.slice.call(arguments, 1));
						}
					}
				}

				// Handle individual emit
				if (data instanceof Array) {
					// Check if the array is an array of objects in the collection
					if (data[0] && data[0][this._primaryKey]) {
						// Loop the array and check for listeners against the primary key
						listenerIdArr = this._listeners[event];
						arrCount = data.length;

						for (arrIndex = 0; arrIndex < arrCount; arrIndex++) {
							if (listenerIdArr[data[arrIndex][this._primaryKey]]) {
								// Emit for this id
								listenerIdCount = listenerIdArr[data[arrIndex][this._primaryKey]].length;
								for (listenerIdIndex = 0; listenerIdIndex < listenerIdCount; listenerIdIndex++) {
									tmpFunc = listenerIdArr[data[arrIndex][this._primaryKey]][listenerIdIndex];

									if (typeof tmpFunc === 'function') {
										listenerIdArr[data[arrIndex][this._primaryKey]][listenerIdIndex].apply(this, Array.prototype.slice.call(arguments, 1));
									}
								}
							}
						}
					}
				}
			}

			return this;
		},

		/**
		 * Queues an event to be fired. This has automatic de-bouncing so that any
		 * events of the same type that occur within 100 milliseconds of a previous
		 * one will all be wrapped into a single emit rather than emitting tons of
		 * events for lots of chained inserts etc. Only the data from the last
		 * de-bounced event will be emitted.
		 * @param {String} eventName The name of the event to emit.
		 * @param {*=} data Optional data to emit with the event.
		 */
		deferEmit: function (eventName, data) {
			var self = this,
				args;

			if (!this._noEmitDefer && (!this._db || (this._db && !this._db._noEmitDefer))) {
				args = arguments;

				// Check for an existing timeout
				this._deferTimeout = this._deferTimeout || {};
				if (this._deferTimeout[eventName]) {
					clearTimeout(this._deferTimeout[eventName]);
				}

				// Set a timeout
				this._deferTimeout[eventName] = setTimeout(function () {
					if (self.debug()) {
						console.log(self.logIdentifier() + ' Emitting ' + args[0]);
					}

					self.emit.apply(self, args);
				}, 1);
			} else {
				this.emit.apply(this, arguments);
			}

			return this;
		}
	};

	module.exports = Events;

/***/ },
/* 64 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Provides object matching algorithm methods.
	 * @mixin
	 */
	var Matching = {
		/**
		 * Internal method that checks a document against a test object.
		 * @param {*} source The source object or value to test against.
		 * @param {*} test The test object or value to test with.
		 * @param {Object} queryOptions The options the query was passed with.
		 * @param {String=} opToApply The special operation to apply to the test such
		 * as 'and' or an 'or' operator.
		 * @param {Object=} options An object containing options to apply to the
		 * operation such as limiting the fields returned etc.
		 * @returns {Boolean} True if the test was positive, false on negative.
		 * @private
		 */
		_match: function (source, test, queryOptions, opToApply, options) {
			// TODO: This method is quite long, break into smaller pieces
			var operation,
				applyOp = opToApply,
				recurseVal,
				tmpIndex,
				sourceType = typeof source,
				testType = typeof test,
				matchedAll = true,
				opResult,
				substringCache,
				i;

			options = options || {};
			queryOptions = queryOptions || {};

			// Check if options currently holds a root query object
			if (!options.$rootQuery) {
				// Root query not assigned, hold the root query
				options.$rootQuery = test;
			}

			options.$rootData = options.$rootData || {};

			// Check if the comparison data are both strings or numbers
			if ((sourceType === 'string' || sourceType === 'number') && (testType === 'string' || testType === 'number')) {
				// The source and test data are flat types that do not require recursive searches,
				// so just compare them and return the result
				if (sourceType === 'number') {
					// Number comparison
					if (source !== test) {
						matchedAll = false;
					}
				} else {
					// String comparison
					// TODO: We can probably use a queryOptions.$locale as a second parameter here
					// TODO: to satisfy https://github.com/Irrelon/ForerunnerDB/issues/35
					if (source.localeCompare(test)) {
						matchedAll = false;
					}
				}
			} else {
				for (i in test) {
					if (test.hasOwnProperty(i)) {
						// Reset operation flag
						operation = false;

						substringCache = i.substr(0, 2);

						// Check if the property is a comment (ignorable)
						if (substringCache === '//') {
							// Skip this property
							continue;
						}

						// Check if the property starts with a dollar (function)
						if (substringCache.indexOf('$') === 0) {
							// Ask the _matchOp method to handle the operation
							opResult = this._matchOp(i, source, test[i], queryOptions, options);

							// Check the result of the matchOp operation
							// If the result is -1 then no operation took place, otherwise the result
							// will be a boolean denoting a match (true) or no match (false)
							if (opResult > -1) {
								if (opResult) {
									if (opToApply === 'or') {
										return true;
									}
								} else {
									// Set the matchedAll flag to the result of the operation
									// because the operation did not return true
									matchedAll = opResult;
								}

								// Record that an operation was handled
								operation = true;
							}
						}

						// Check for regex
						if (!operation && test[i] instanceof RegExp) {
							operation = true;

							if (sourceType === 'object' && source[i] !== undefined && test[i].test(source[i])) {
								if (opToApply === 'or') {
									return true;
								}
							} else {
								matchedAll = false;
							}
						}

						if (!operation) {
							// Check if our query is an object
							if (typeof(test[i]) === 'object') {
								// Because test[i] is an object, source must also be an object

								// Check if our source data we are checking the test query against
								// is an object or an array
								if (source[i] !== undefined) {
									if (source[i] instanceof Array && !(test[i] instanceof Array)) {
										// The source data is an array, so check each item until a
										// match is found
										recurseVal = false;
										for (tmpIndex = 0; tmpIndex < source[i].length; tmpIndex++) {
											recurseVal = this._match(source[i][tmpIndex], test[i], queryOptions, applyOp, options);

											if (recurseVal) {
												// One of the array items matched the query so we can
												// include this item in the results, so break now
												break;
											}
										}

										if (recurseVal) {
											if (opToApply === 'or') {
												return true;
											}
										} else {
											matchedAll = false;
										}
									} else if (!(source[i] instanceof Array) && test[i] instanceof Array) {
										// The test key data is an array and the source key data is not so check
										// each item in the test key data to see if the source item matches one
										// of them. This is effectively an $in search.
										recurseVal = false;

										for (tmpIndex = 0; tmpIndex < test[i].length; tmpIndex++) {
											recurseVal = this._match(source[i], test[i][tmpIndex], queryOptions, applyOp, options);

											if (recurseVal) {
												// One of the array items matched the query so we can
												// include this item in the results, so break now
												break;
											}
										}

										if (recurseVal) {
											if (opToApply === 'or') {
												return true;
											}
										} else {
											matchedAll = false;
										}
									} else if (typeof(source) === 'object') {
										// Recurse down the object tree
										recurseVal = this._match(source[i], test[i], queryOptions, applyOp, options);

										if (recurseVal) {
											if (opToApply === 'or') {
												return true;
											}
										} else {
											matchedAll = false;
										}
									} else {
										recurseVal = this._match(undefined, test[i], queryOptions, applyOp, options);

										if (recurseVal) {
											if (opToApply === 'or') {
												return true;
											}
										} else {
											matchedAll = false;
										}
									}
								} else {
									// First check if the test match is an $exists
									if (test[i] && test[i].$exists !== undefined) {
										// Push the item through another match recurse
										recurseVal = this._match(undefined, test[i], queryOptions, applyOp, options);

										if (recurseVal) {
											if (opToApply === 'or') {
												return true;
											}
										} else {
											matchedAll = false;
										}
									} else {
										matchedAll = false;
									}
								}
							} else {
								// Check if the prop matches our test value
								if (source && source[i] === test[i]) {
									if (opToApply === 'or') {
										return true;
									}
								} else if (source && source[i] && source[i] instanceof Array && test[i] && typeof(test[i]) !== "object") {
									// We are looking for a value inside an array

									// The source data is an array, so check each item until a
									// match is found
									recurseVal = false;
									for (tmpIndex = 0; tmpIndex < source[i].length; tmpIndex++) {
										recurseVal = this._match(source[i][tmpIndex], test[i], queryOptions, applyOp, options);

										if (recurseVal) {
											// One of the array items matched the query so we can
											// include this item in the results, so break now
											break;
										}
									}

									if (recurseVal) {
										if (opToApply === 'or') {
											return true;
										}
									} else {
										matchedAll = false;
									}
								} else {
									matchedAll = false;
								}
							}
						}

						if (opToApply === 'and' && !matchedAll) {
							return false;
						}
					}
				}
			}

			return matchedAll;
		},

		/**
		 * Internal method, performs a matching process against a query operator such as $gt or $nin.
		 * @param {String} key The property name in the test that matches the operator to perform
		 * matching against.
		 * @param {*} source The source data to match the query against.
		 * @param {*} test The query to match the source against.
		 * @param {Object} queryOptions The options the query was passed with.
		 * @param {Object=} options An options object.
		 * @returns {*}
		 * @private
		 */
		_matchOp: function (key, source, test, queryOptions, options) {
			// Check for commands
			switch (key) {
				case '$gt':
					// Greater than
					return source > test;

				case '$gte':
					// Greater than or equal
					return source >= test;

				case '$lt':
					// Less than
					return source < test;

				case '$lte':
					// Less than or equal
					return source <= test;

				case '$exists':
					// Property exists
					return (source === undefined) !== test;

				case '$eq': // Equals
					return source == test; // jshint ignore:line

				case '$eeq': // Equals equals
					return source === test;

				case '$ne': // Not equals
					return source != test; // jshint ignore:line

				case '$nee': // Not equals equals
					return source !== test;

				case '$or':
					// Match true on ANY check to pass
					for (var orIndex = 0; orIndex < test.length; orIndex++) {
						if (this._match(source, test[orIndex], queryOptions, 'and', options)) {
							return true;
						}
					}

					return false;

				case '$and':
					// Match true on ALL checks to pass
					for (var andIndex = 0; andIndex < test.length; andIndex++) {
						if (!this._match(source, test[andIndex], queryOptions, 'and', options)) {
							return false;
						}
					}

					return true;

				case '$in': // In
					// Check that the in test is an array
					if (test instanceof Array) {
						var inArr = test,
							inArrCount = inArr.length,
							inArrIndex;

						for (inArrIndex = 0; inArrIndex < inArrCount; inArrIndex++) {
							if (inArr[inArrIndex] instanceof RegExp && inArr[inArrIndex].test(source)) {
								return true;
							} else if (inArr[inArrIndex] === source) {
								return true;
							}
						}

						return false;
					} else {
						throw(this.logIdentifier() + ' Cannot use an $in operator on a non-array key: ' + key);
					}
					break;

				case '$nin': // Not in
					// Check that the not-in test is an array
					if (test instanceof Array) {
						var notInArr = test,
							notInArrCount = notInArr.length,
							notInArrIndex;

						for (notInArrIndex = 0; notInArrIndex < notInArrCount; notInArrIndex++) {
							if (notInArr[notInArrIndex] === source) {
								return false;
							}
						}

						return true;
					} else {
						throw(this.logIdentifier() + ' Cannot use a $nin operator on a non-array key: ' + key);
					}
					break;

				case '$distinct':
					// Ensure options holds a distinct lookup
					options.$rootData['//distinctLookup'] = options.$rootData['//distinctLookup'] || {};

					for (var distinctProp in test) {
						if (test.hasOwnProperty(distinctProp)) {
							options.$rootData['//distinctLookup'][distinctProp] = options.$rootData['//distinctLookup'][distinctProp] || {};
							// Check if the options distinct lookup has this field's value
							if (options.$rootData['//distinctLookup'][distinctProp][source[distinctProp]]) {
								// Value is already in use
								return false;
							} else {
								// Set the value in the lookup
								options.$rootData['//distinctLookup'][distinctProp][source[distinctProp]] = true;

								// Allow the item in the results
								return true;
							}
						}
					}
					break;

				case '$count':
					var countKey,
						countArr,
						countVal;

					// Iterate the count object's keys
					for (countKey in test) {
						if (test.hasOwnProperty(countKey)) {
							// Check the property exists and is an array. If the property being counted is not
							// an array (or doesn't exist) then use a value of zero in any further count logic
							countArr = source[countKey];
							if (typeof countArr === 'object' && countArr instanceof Array) {
								countVal = countArr.length;
							} else {
								countVal = 0;
							}

							// Now recurse down the query chain further to satisfy the query for this key (countKey)
							if (!this._match(countVal, test[countKey], queryOptions, 'and', options)) {
								return false;
							}
						}
					}

					// Allow the item in the results
					return true;
			}

			return -1;
		}
	};

	module.exports = Matching;

/***/ },
/* 65 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Provides sorting methods.
	 * @mixin
	 */
	var Sorting = {
		/**
		 * Sorts the passed value a against the passed value b ascending.
		 * @param {*} a The first value to compare.
		 * @param {*} b The second value to compare.
		 * @returns {*} 1 if a is sorted after b, -1 if a is sorted before b.
		 */
		sortAsc: function (a, b) {
			if (typeof(a) === 'string' && typeof(b) === 'string') {
				return a.localeCompare(b);
			} else {
				if (a > b) {
					return 1;
				} else if (a < b) {
					return -1;
				}
			}

			return 0;
		},

		/**
		 * Sorts the passed value a against the passed value b descending.
		 * @param {*} a The first value to compare.
		 * @param {*} b The second value to compare.
		 * @returns {*} 1 if a is sorted after b, -1 if a is sorted before b.
		 */
		sortDesc: function (a, b) {
			if (typeof(a) === 'string' && typeof(b) === 'string') {
				return b.localeCompare(a);
			} else {
				if (a > b) {
					return -1;
				} else if (a < b) {
					return 1;
				}
			}

			return 0;
		}
	};

	module.exports = Sorting;

/***/ },
/* 66 */
/***/ function(module, exports) {

	"use strict";

	var Tags,
		tagMap = {};

	/**
	 * Provides class instance tagging and tag operation methods.
	 * @mixin
	 */
	Tags = {
		/**
		 * Tags a class instance for later lookup.
		 * @param {String} name The tag to add.
		 * @returns {boolean}
		 */
		tagAdd: function (name) {
			var i,
				self = this,
				mapArr = tagMap[name] = tagMap[name] || [];

			for (i = 0; i < mapArr.length; i++) {
				if (mapArr[i] === self) {
					return true;
				}
			}

			mapArr.push(self);

			// Hook the drop event for this so we can react
			if (self.on) {
				self.on('drop', function () {
					// We've been dropped so remove ourselves from the tag map
					self.tagRemove(name);
				});
			}

			return true;
		},

		/**
		 * Removes a tag from a class instance.
		 * @param {String} name The tag to remove.
		 * @returns {boolean}
		 */
		tagRemove: function (name) {
			var i,
				mapArr = tagMap[name];

			if (mapArr) {
				for (i = 0; i < mapArr.length; i++) {
					if (mapArr[i] === this) {
						mapArr.splice(i, 1);
						return true;
					}
				}
			}

			return false;
		},

		/**
		 * Gets an array of all instances tagged with the passed tag name.
		 * @param {String} name The tag to lookup.
		 * @returns {Array} The array of instances that have the passed tag.
		 */
		tagLookup: function (name) {
			return tagMap[name] || [];
		},

		/**
		 * Drops all instances that are tagged with the passed tag name.
		 * @param {String} name The tag to lookup.
		 * @param {Function} callback Callback once dropping has completed
		 * for all instances that match the passed tag name.
		 * @returns {boolean}
		 */
		tagDrop: function (name, callback) {
			var arr = this.tagLookup(name),
				dropCb,
				dropCount,
				i;

			dropCb = function () {
				dropCount--;

				if (callback && dropCount === 0) {
					callback(false);
				}
			};

			if (arr.length) {
				dropCount = arr.length;

				// Loop the array and drop all items
				for (i = arr.length - 1; i >= 0; i--) {
					arr[i].drop(dropCb);
				}
			}

			return true;
		}
	};

	module.exports = Tags;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Overload = __webpack_require__(6);

	/**
	 * Provides trigger functionality methods.
	 * @mixin
	 */
	var Triggers = {
		/**
		 * Add a trigger by id.
		 * @param {String} id The id of the trigger. This must be unique to the type and
		 * phase of the trigger. Only one trigger may be added with this id per type and
		 * phase.
		 * @param {Number} type The type of operation to apply the trigger to. See
		 * Mixin.Constants for constants to use.
		 * @param {Number} phase The phase of an operation to fire the trigger on. See
		 * Mixin.Constants for constants to use.
		 * @param {Function} method The method to call when the trigger is fired.
		 * @returns {boolean} True if the trigger was added successfully, false if not.
		 */
		addTrigger: function (id, type, phase, method) {
			var self = this,
				triggerIndex;

			// Check if the trigger already exists
			triggerIndex = self._triggerIndexOf(id, type, phase);

			if (triggerIndex === -1) {
				// The trigger does not exist, create it
				self._trigger = self._trigger || {};
				self._trigger[type] = self._trigger[type] || {};
				self._trigger[type][phase] = self._trigger[type][phase] || [];

				self._trigger[type][phase].push({
					id: id,
					method: method,
					enabled: true
				});

				return true;
			}

			return false;
		},

		/**
		 *
		 * @param {String} id The id of the trigger to remove.
		 * @param {Number} type The type of operation to remove the trigger from. See
		 * Mixin.Constants for constants to use.
		 * @param {Number} phase The phase of the operation to remove the trigger from.
		 * See Mixin.Constants for constants to use.
		 * @returns {boolean} True if removed successfully, false if not.
		 */
		removeTrigger: function (id, type, phase) {
			var self = this,
				triggerIndex;

			// Check if the trigger already exists
			triggerIndex = self._triggerIndexOf(id, type, phase);

			if (triggerIndex > -1) {
				// The trigger exists, remove it
				self._trigger[type][phase].splice(triggerIndex, 1);
			}

			return false;
		},

		enableTrigger: new Overload({
			'string': function (id) {
				// Alter all triggers of this type
				var self = this,
					types = self._trigger,
					phases,
					triggers,
					result = false,
					i, k, j;

				if (types) {
					for (j in types) {
						if (types.hasOwnProperty(j)) {
							phases = types[j];

							if (phases) {
								for (i in phases) {
									if (phases.hasOwnProperty(i)) {
										triggers = phases[i];

										// Loop triggers and set enabled flag
										for (k = 0; k < triggers.length; k++) {
											if (triggers[k].id === id) {
												triggers[k].enabled = true;
												result = true;
											}
										}
									}
								}
							}
						}
					}
				}

				return result;
			},

			'number': function (type) {
				// Alter all triggers of this type
				var self = this,
					phases = self._trigger[type],
					triggers,
					result = false,
					i, k;

				if (phases) {
					for (i in phases) {
						if (phases.hasOwnProperty(i)) {
							triggers = phases[i];

							// Loop triggers and set to enabled
							for (k = 0; k < triggers.length; k++) {
								triggers[k].enabled = true;
								result = true;
							}
						}
					}
				}

				return result;
			},

			'number, number': function (type, phase) {
				// Alter all triggers of this type and phase
				var self = this,
					phases = self._trigger[type],
					triggers,
					result = false,
					k;

				if (phases) {
					triggers = phases[phase];

					if (triggers) {
						// Loop triggers and set to enabled
						for (k = 0; k < triggers.length; k++) {
							triggers[k].enabled = true;
							result = true;
						}
					}
				}

				return result;
			},

			'string, number, number': function (id, type, phase) {
				// Check if the trigger already exists
				var self = this,
					triggerIndex = self._triggerIndexOf(id, type, phase);

				if (triggerIndex > -1) {
					// Update the trigger
					self._trigger[type][phase][triggerIndex].enabled = true;

					return true;
				}

				return false;
			}
		}),

		disableTrigger: new Overload({
			'string': function (id) {
				// Alter all triggers of this type
				var self = this,
					types = self._trigger,
					phases,
					triggers,
					result = false,
					i, k, j;

				if (types) {
					for (j in types) {
						if (types.hasOwnProperty(j)) {
							phases = types[j];

							if (phases) {
								for (i in phases) {
									if (phases.hasOwnProperty(i)) {
										triggers = phases[i];

										// Loop triggers and set enabled flag
										for (k = 0; k < triggers.length; k++) {
											if (triggers[k].id === id) {
												triggers[k].enabled = false;
												result = true;
											}
										}
									}
								}
							}
						}
					}
				}

				return result;
			},

			'number': function (type) {
				// Alter all triggers of this type
				var self = this,
					phases = self._trigger[type],
					triggers,
					result = false,
					i, k;

				if (phases) {
					for (i in phases) {
						if (phases.hasOwnProperty(i)) {
							triggers = phases[i];

							// Loop triggers and set to disabled
							for (k = 0; k < triggers.length; k++) {
								triggers[k].enabled = false;
								result = true;
							}
						}
					}
				}

				return result;
			},

			'number, number': function (type, phase) {
				// Alter all triggers of this type and phase
				var self = this,
					phases = self._trigger[type],
					triggers,
					result = false,
					k;

				if (phases) {
					triggers = phases[phase];

					if (triggers) {
						// Loop triggers and set to disabled
						for (k = 0; k < triggers.length; k++) {
							triggers[k].enabled = false;
							result = true;
						}
					}
				}

				return result;
			},

			'string, number, number': function (id, type, phase) {
				// Check if the trigger already exists
				var self = this,
					triggerIndex = self._triggerIndexOf(id, type, phase);

				if (triggerIndex > -1) {
					// Update the trigger
					self._trigger[type][phase][triggerIndex].enabled = false;

					return true;
				}

				return false;
			}
		}),

		/**
		 * Checks if a trigger will fire based on the type and phase provided.
		 * @param {Number} type The type of operation. See Mixin.Constants for
		 * constants to use.
		 * @param {Number} phase The phase of the operation. See Mixin.Constants
		 * for constants to use.
		 * @returns {Boolean} True if the trigger will fire, false otherwise.
		 */
		willTrigger: function (type, phase) {
			if (this._trigger && this._trigger[type] && this._trigger[type][phase] && this._trigger[type][phase].length) {
				// Check if a trigger in this array is enabled
				var arr = this._trigger[type][phase],
					i;

				for (i = 0; i < arr.length; i++) {
					if (arr[i].enabled) {
						return true;
					}
				}
			}

			return false;
		},

		/**
		 * Processes trigger actions based on the operation, type and phase.
		 * @param {Object} operation Operation data to pass to the trigger.
		 * @param {Number} type The type of operation. See Mixin.Constants for
		 * constants to use.
		 * @param {Number} phase The phase of the operation. See Mixin.Constants
		 * for constants to use.
		 * @param {Object} oldDoc The document snapshot before operations are
		 * carried out against the data.
		 * @param {Object} newDoc The document snapshot after operations are
		 * carried out against the data.
		 * @returns {boolean}
		 */
		processTrigger: function (operation, type, phase, oldDoc, newDoc) {
			var self = this,
				triggerArr,
				triggerIndex,
				triggerCount,
				triggerItem,
				response;

			if (self._trigger && self._trigger[type] && self._trigger[type][phase]) {
				triggerArr = self._trigger[type][phase];
				triggerCount = triggerArr.length;

				for (triggerIndex = 0; triggerIndex < triggerCount; triggerIndex++) {
					triggerItem = triggerArr[triggerIndex];

					// Check if the trigger is enabled
					if (triggerItem.enabled) {
						if (this.debug()) {
							var typeName,
								phaseName;

							switch (type) {
								case this.TYPE_INSERT:
									typeName = 'insert';
									break;

								case this.TYPE_UPDATE:
									typeName = 'update';
									break;

								case this.TYPE_REMOVE:
									typeName = 'remove';
									break;

								default:
									typeName = '';
									break;
							}

							switch (phase) {
								case this.PHASE_BEFORE:
									phaseName = 'before';
									break;

								case this.PHASE_AFTER:
									phaseName = 'after';
									break;

								default:
									phaseName = '';
									break;
							}

							//console.log('Triggers: Processing trigger "' + id + '" for ' + typeName + ' in phase "' + phaseName + '"');
						}

						// Run the trigger's method and store the response
						response = triggerItem.method.call(self, operation, oldDoc, newDoc);

						// Check the response for a non-expected result (anything other than
						// undefined, true or false is considered a throwable error)
						if (response === false) {
							// The trigger wants us to cancel operations
							return false;
						}

						if (response !== undefined && response !== true && response !== false) {
							// Trigger responded with error, throw the error
							throw('ForerunnerDB.Mixin.Triggers: Trigger error: ' + response);
						}
					}
				}

				// Triggers all ran without issue, return a success (true)
				return true;
			}
		},

		/**
		 * Returns the index of a trigger by id based on type and phase.
		 * @param {String} id The id of the trigger to find the index of.
		 * @param {Number} type The type of operation. See Mixin.Constants for
		 * constants to use.
		 * @param {Number} phase The phase of the operation. See Mixin.Constants
		 * for constants to use.
		 * @returns {number}
		 * @private
		 */
		_triggerIndexOf: function (id, type, phase) {
			var self = this,
				triggerArr,
				triggerCount,
				triggerIndex;

			if (self._trigger && self._trigger[type] && self._trigger[type][phase]) {
				triggerArr = self._trigger[type][phase];
				triggerCount = triggerArr.length;

				for (triggerIndex = 0; triggerIndex < triggerCount; triggerIndex++) {
					if (triggerArr[triggerIndex].id === id) {
						return triggerIndex;
					}
				}
			}

			return -1;
		}
	};

	module.exports = Triggers;

/***/ },
/* 68 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Provides methods to handle object update operations.
	 * @mixin
	 */
	var Updating = {
		/**
		 * Updates a property on an object.
		 * @param {Object} doc The object whose property is to be updated.
		 * @param {String} prop The property to update.
		 * @param {*} val The new value of the property.
		 * @private
		 */
		_updateProperty: function (doc, prop, val) {
			doc[prop] = val;

			if (this.debug()) {
				console.log(this.logIdentifier() + ' Setting non-data-bound document property "' + prop + '"');
			}
		},

		/**
		 * Increments a value for a property on a document by the passed number.
		 * @param {Object} doc The document to modify.
		 * @param {String} prop The property to modify.
		 * @param {Number} val The amount to increment by.
		 * @private
		 */
		_updateIncrement: function (doc, prop, val) {
			doc[prop] += val;
		},

		/**
		 * Changes the index of an item in the passed array.
		 * @param {Array} arr The array to modify.
		 * @param {Number} indexFrom The index to move the item from.
		 * @param {Number} indexTo The index to move the item to.
		 * @private
		 */
		_updateSpliceMove: function (arr, indexFrom, indexTo) {
			arr.splice(indexTo, 0, arr.splice(indexFrom, 1)[0]);

			if (this.debug()) {
				console.log(this.logIdentifier() + ' Moving non-data-bound document array index from "' + indexFrom + '" to "' + indexTo + '"');
			}
		},

		/**
		 * Inserts an item into the passed array at the specified index.
		 * @param {Array} arr The array to insert into.
		 * @param {Number} index The index to insert at.
		 * @param {Object} doc The document to insert.
		 * @private
		 */
		_updateSplicePush: function (arr, index, doc) {
			if (arr.length > index) {
				arr.splice(index, 0, doc);
			} else {
				arr.push(doc);
			}
		},

		/**
		 * Inserts an item at the end of an array.
		 * @param {Array} arr The array to insert the item into.
		 * @param {Object} doc The document to insert.
		 * @private
		 */
		_updatePush: function (arr, doc) {
			arr.push(doc);
		},

		/**
		 * Removes an item from the passed array.
		 * @param {Array} arr The array to modify.
		 * @param {Number} index The index of the item in the array to remove.
		 * @private
		 */
		_updatePull: function (arr, index) {
			arr.splice(index, 1);
		},

		/**
		 * Multiplies a value for a property on a document by the passed number.
		 * @param {Object} doc The document to modify.
		 * @param {String} prop The property to modify.
		 * @param {Number} val The amount to multiply by.
		 * @private
		 */
		_updateMultiply: function (doc, prop, val) {
			doc[prop] *= val;
		},

		/**
		 * Renames a property on a document to the passed property.
		 * @param {Object} doc The document to modify.
		 * @param {String} prop The property to rename.
		 * @param {Number} val The new property name.
		 * @private
		 */
		_updateRename: function (doc, prop, val) {
			doc[val] = doc[prop];
			delete doc[prop];
		},

		/**
		 * Sets a property on a document to the passed value.
		 * @param {Object} doc The document to modify.
		 * @param {String} prop The property to delete.
		 * @param {*} val The new property value.
		 * @private
		 */
		_updateOverwrite: function (doc, prop, val) {
			doc[prop] = val;
		},

		/**
		 * Deletes a property on a document.
		 * @param {Object} doc The document to modify.
		 * @param {String} prop The property to delete.
		 * @private
		 */
		_updateUnset: function (doc, prop) {
			delete doc[prop];
		},

		/**
		 * Removes all properties from an object without destroying
		 * the object instance, thereby maintaining data-bound linking.
		 * @param {Object} doc The parent object to modify.
		 * @param {String} prop The name of the child object to clear.
		 * @private
		 */
		_updateClear: function (doc, prop) {
			var obj = doc[prop],
				i;

			if (obj && typeof obj === 'object') {
				for (i in obj) {
					if (obj.hasOwnProperty(i)) {
						this._updateUnset(obj, i);
					}
				}
			}
		},

		/**
		 * Pops an item or items from the array stack.
		 * @param {Object} doc The document to modify.
		 * @param {Number} val If set to a positive integer, will pop the number specified
		 * from the stack, if set to a negative integer will shift the number specified
		 * from the stack.
		 * @return {Boolean}
		 * @private
		 */
		_updatePop: function (doc, val) {
			var updated = false,
				i;

			if (doc.length > 0) {
				if (val > 0) {
					for (i = 0; i < val; i++) {
						doc.pop();
					}
					updated = true;
				} else if (val < 0) {
					for (i = 0; i > val; i--) {
						doc.shift();
					}
					updated = true;
				}
			}

			return updated;
		}
	};

	module.exports = Updating;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// Import external names locally
	var Shared,
		Collection;

	Shared = __webpack_require__(3);

	var Odm = function () {
		this.init.apply(this, arguments);
	};

	Odm.prototype.init = function (from, name) {
		var self = this;

		self.name(name);

		self._collectionDroppedWrap = function () {
			self._collectionDropped.apply(self, arguments);
		};

		self.from(from);
	};

	Shared.addModule('Odm', Odm);
	Shared.mixin(Odm.prototype, 'Mixin.Common');
	Shared.mixin(Odm.prototype, 'Mixin.ChainReactor');
	Shared.mixin(Odm.prototype, 'Mixin.Constants');
	Shared.mixin(Odm.prototype, 'Mixin.Events');

	Collection = __webpack_require__(5);

	Shared.synthesize(Odm.prototype, 'name');
	Shared.synthesize(Odm.prototype, 'state');
	Shared.synthesize(Odm.prototype, 'parent');
	Shared.synthesize(Odm.prototype, 'query');
	Shared.synthesize(Odm.prototype, 'from', function (val) {
		if (val !== undefined) {
			val.chain(this);
			val.on('drop', this._collectionDroppedWrap);
		}

		return this.$super(val);
	});

	Odm.prototype._collectionDropped = function (collection) {
		this.drop();
	};

	Odm.prototype._chainHandler = function (chainPacket) {
		switch (chainPacket.type) {
			case 'setData':
			case 'insert':
			case 'update':
			case 'remove':
				//this._refresh();
				break;

			default:
				break;
		}
	};

	Odm.prototype.drop = function () {
		if (!this.isDropped()) {
			this.state('dropped');

			this.emit('drop', this);

			if (this._from) {
				delete this._from._odm;
			}

			delete this._name;
		}

		return true;
	};

	/**
	 * Queries the current object and returns a result that can
	 * also be queried in the same way.
	 * @param {String} prop The property to delve into.
	 * @param {Object=} query Optional query that limits the returned documents.
	 * @returns {Odm}
	 */
	Odm.prototype.$ = function (prop, query) {
		var data,
			tmpQuery,
			tmpColl,
			tmpOdm;

		if (prop === this._from.primaryKey()) {
			// Query is against a specific PK id
			tmpQuery = {};
			tmpQuery[prop] = query;

			data = this._from.find(tmpQuery, {$decouple: false});
			tmpColl = new Collection();

			tmpColl.setData(data, {$decouple: false});
			tmpColl._linked = this._from._linked;
		} else {
			// Query is against an array of sub-documents
			tmpColl = new Collection();
			data = this._from.find({}, {$decouple: false});

			if (data[0] && data[0][prop]) {
				// Set the temp collection data to the array property
				tmpColl.setData(data[0][prop], {$decouple: false});

				// Check if we need to filter this array further
				if (query) {
					data = tmpColl.find(query, {$decouple: false});
					tmpColl.setData(data, {$decouple: false});
				}
			}

			tmpColl._linked = this._from._linked;
		}

		tmpOdm = new Odm(tmpColl);

		tmpOdm.parent(this);
		tmpOdm.query(query);

		return tmpOdm;
	};

	/**
	 * Gets / sets a property on the current ODM document.
	 * @param {String} prop The name of the property.
	 * @param {*} val Optional value to set.
	 * @returns {*}
	 */
	Odm.prototype.prop = function (prop, val) {
		var tmpQuery;

		if (prop !== undefined) {
			if (val !== undefined) {
				tmpQuery = {};
				tmpQuery[prop] = val;

				return this._from.update({}, tmpQuery);
			}

			if (this._from._data[0]) {
				return this._from._data[0][prop];
			}
		}

		return undefined;
	};

	/**
	 * Get the ODM instance for this collection.
	 * @returns {Odm}
	 */
	Collection.prototype.odm = function (name) {
		if (!this._odm) {
			this._odm = new Odm(this, name);
		}

		return this._odm;
	};

	Shared.finishModule('Odm');
	module.exports = Odm;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3),
		Path = __webpack_require__(14);

	/**
	 * The operation class, used to store details about an operation being
	 * performed by the database.
	 * @param {String} name The name of the operation.
	 * @constructor
	 */
	var Operation = function (name) {
		this.pathSolver = new Path();
		this.counter = 0;
		this.init.apply(this, arguments);
	};

	Operation.prototype.init = function (name) {
		this._data = {
			operation: name, // The name of the operation executed such as "find", "update" etc
			index: {
				potential: [], // Indexes that could have potentially been used
				used: false // The index that was picked to use
			},
			steps: [], // The steps taken to generate the query results,
			time: {
				startMs: 0,
				stopMs: 0,
				totalMs: 0,
				process: {}
			},
			flag: {}, // An object with flags that denote certain execution paths
			log: [] // Any extra data that might be useful such as warnings or helpful hints
		};
	};

	Shared.addModule('Operation', Operation);
	Shared.mixin(Operation.prototype, 'Mixin.ChainReactor');

	/**
	 * Starts the operation timer.
	 */
	Operation.prototype.start = function () {
		this._data.time.startMs = new Date().getTime();
	};

	/**
	 * Adds an item to the operation log.
	 * @param {String} event The item to log.
	 * @returns {*}
	 */
	Operation.prototype.log = function (event) {
		if (event) {
			var lastLogTime = this._log.length > 0 ? this._data.log[this._data.log.length - 1].time : 0,
				logObj = {
					event: event,
					time: new Date().getTime(),
					delta: 0
				};

			this._data.log.push(logObj);

			if (lastLogTime) {
				logObj.delta = logObj.time - lastLogTime;
			}

			return this;
		}

		return this._data.log;
	};

	/**
	 * Called when starting and ending a timed operation, used to time
	 * internal calls within an operation's execution.
	 * @param {String} section An operation name.
	 * @returns {*}
	 */
	Operation.prototype.time = function (section) {
		if (section !== undefined) {
			var process = this._data.time.process,
				processObj = process[section] = process[section] || {};

			if (!processObj.startMs) {
				// Timer started
				processObj.startMs = new Date().getTime();
				processObj.stepObj = {
					name: section
				};

				this._data.steps.push(processObj.stepObj);
			} else {
				processObj.stopMs = new Date().getTime();
				processObj.totalMs = processObj.stopMs - processObj.startMs;
				processObj.stepObj.totalMs = processObj.totalMs;
				delete processObj.stepObj;
			}

			return this;
		}

		return this._data.time;
	};

	/**
	 * Used to set key/value flags during operation execution.
	 * @param {String} key
	 * @param {String} val
	 * @returns {*}
	 */
	Operation.prototype.flag = function (key, val) {
		if (key !== undefined && val !== undefined) {
			this._data.flag[key] = val;
		} else if (key !== undefined) {
			return this._data.flag[key];
		} else {
			return this._data.flag;
		}
	};

	Operation.prototype.data = function (path, val, noTime) {
		if (val !== undefined) {
			// Assign value to object path
			this.pathSolver.set(this._data, path, val);

			return this;
		}

		return this.pathSolver.get(this._data, path);
	};

	Operation.prototype.pushData = function (path, val, noTime) {
		// Assign value to object path
		this.pathSolver.push(this._data, path, val);
	};

	/**
	 * Stops the operation timer.
	 */
	Operation.prototype.stop = function () {
		this._data.time.stopMs = new Date().getTime();
		this._data.time.totalMs = this._data.time.stopMs - this._data.time.startMs;
	};

	Shared.finishModule('Operation');
	module.exports = Operation;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// Import external names locally
	var Shared,
		Db,
		Collection,
		DbDocument;

	Shared = __webpack_require__(3);

	var Overview = function () {
		this.init.apply(this, arguments);
	};

	Overview.prototype.init = function (name) {
		var self = this;

		this._name = name;
		this._data = new DbDocument('__FDB__dc_data_' + this._name);
		this._collData = new Collection();
		this._sources = [];

		this._sourceDroppedWrap = function () {
			self._sourceDropped.apply(self, arguments);
		};
	};

	Shared.addModule('Overview', Overview);
	Shared.mixin(Overview.prototype, 'Mixin.Common');
	Shared.mixin(Overview.prototype, 'Mixin.ChainReactor');
	Shared.mixin(Overview.prototype, 'Mixin.Constants');
	Shared.mixin(Overview.prototype, 'Mixin.Triggers');
	Shared.mixin(Overview.prototype, 'Mixin.Events');
	Shared.mixin(Overview.prototype, 'Mixin.Tags');

	Collection = __webpack_require__(5);
	DbDocument = __webpack_require__(30);
	Db = Shared.modules.Db;

	/**
	 * Gets / sets the current state.
	 * @param {String=} val The name of the state to set.
	 * @returns {*}
	 */
	Shared.synthesize(Overview.prototype, 'state');

	Shared.synthesize(Overview.prototype, 'db');
	Shared.synthesize(Overview.prototype, 'name');
	Shared.synthesize(Overview.prototype, 'query', function (val) {
		var ret = this.$super(val);

		if (val !== undefined) {
			this._refresh();
		}

		return ret;
	});
	Shared.synthesize(Overview.prototype, 'queryOptions', function (val) {
		var ret = this.$super(val);

		if (val !== undefined) {
			this._refresh();
		}

		return ret;
	});
	Shared.synthesize(Overview.prototype, 'reduce', function (val) {
		var ret = this.$super(val);

		if (val !== undefined) {
			this._refresh();
		}

		return ret;
	});

	Overview.prototype.from = function (source) {
		if (source !== undefined) {
			if (typeof(source) === 'string') {
				source = this._db.collection(source);
			}

			this._setFrom(source);
			return this;
		}

		return this._sources;
	};

	Overview.prototype.find = function () {
		return this._collData.find.apply(this._collData, arguments);
	};

	/**
	 * Executes and returns the response from the current reduce method
	 * assigned to the overview.
	 * @returns {*}
	 */
	Overview.prototype.exec = function () {
		var reduceFunc = this.reduce();

		return reduceFunc ? reduceFunc.apply(this) : undefined;
	};

	Overview.prototype.count = function () {
		return this._collData.count.apply(this._collData, arguments);
	};

	Overview.prototype._setFrom = function (source) {
		// Remove all source references
		while (this._sources.length) {
			this._removeSource(this._sources[0]);
		}

		this._addSource(source);

		return this;
	};

	Overview.prototype._addSource = function (source) {
		if (source && source.className === 'View') {
			// The source is a view so IO to the internal data collection
			// instead of the view proper
			source = source.privateData();
			if (this.debug()) {
				console.log(this.logIdentifier() + ' Using internal private data "' + source.instanceIdentifier() + '" for IO graph linking');
			}
		}

		if (this._sources.indexOf(source) === -1) {
			this._sources.push(source);
			source.chain(this);

			source.on('drop', this._sourceDroppedWrap);

			this._refresh();
		}
		return this;
	};

	Overview.prototype._removeSource = function (source) {
		if (source && source.className === 'View') {
			// The source is a view so IO to the internal data collection
			// instead of the view proper
			source = source.privateData();
			if (this.debug()) {
				console.log(this.logIdentifier() + ' Using internal private data "' + source.instanceIdentifier() + '" for IO graph linking');
			}
		}

		var sourceIndex = this._sources.indexOf(source);

		if (sourceIndex > -1) {
			this._sources.splice(source, 1);
			source.unChain(this);

			source.off('drop', this._sourceDroppedWrap);

			this._refresh();
		}

		return this;
	};

	Overview.prototype._sourceDropped = function (source) {
		if (source) {
			// Source was dropped, remove from overview
			this._removeSource(source);
		}
	};

	Overview.prototype._refresh = function () {
		if (!this.isDropped()) {
			if (this._sources && this._sources[0]) {
				this._collData.primaryKey(this._sources[0].primaryKey());
				var tempArr = [],
					i;

				for (i = 0; i < this._sources.length; i++) {
					tempArr = tempArr.concat(this._sources[i].find(this._query, this._queryOptions));
				}

				this._collData.setData(tempArr);
			}

			// Now execute the reduce method
			if (this._reduce) {
				var reducedData = this._reduce.apply(this);

				// Update the document with the newly returned data
				this._data.setData(reducedData);
			}
		}
	};

	Overview.prototype._chainHandler = function (chainPacket) {
		switch (chainPacket.type) {
			case 'setData':
			case 'insert':
			case 'update':
			case 'remove':
				this._refresh();
				break;

			default:
				break;
		}
	};

	/**
	 * Gets the module's internal data collection.
	 * @returns {Collection}
	 */
	Overview.prototype.data = function () {
		return this._data;
	};

	Overview.prototype.drop = function (callback) {
		if (!this.isDropped()) {
			this._state = 'dropped';

			delete this._data;
			delete this._collData;

			// Remove all source references
			while (this._sources.length) {
				this._removeSource(this._sources[0]);
			}

			delete this._sources;

			if (this._db && this._name) {
				delete this._db._overview[this._name];
			}

			delete this._name;

			this.emit('drop', this);

			if (callback) { callback(false, true); }
		}

		return true;
	};

	Db.prototype.overview = function (overviewName) {
		if (overviewName) {
			// Handle being passed an instance
			if (overviewName instanceof Overview) {
				return overviewName;
			}

			this._overview = this._overview || {};
			this._overview[overviewName] = this._overview[overviewName] || new Overview(overviewName).db(this);
			return this._overview[overviewName];
		} else {
			// Return an object of collection data
			return this._overview || {};
		}
	};

	/**
	 * Returns an array of overviews the DB currently has.
	 * @returns {Array} An array of objects containing details of each overview
	 * the database is currently managing.
	 */
	Db.prototype.overviews = function () {
		var arr = [],
			item,
			i;

		for (i in this._overview) {
			if (this._overview.hasOwnProperty(i)) {
				item = this._overview[i];

				arr.push({
					name: i,
					count: item.count(),
					linked: item.isLinked !== undefined ? item.isLinked() : false
				});
			}
		}

		return arr;
	};

	Shared.finishModule('Overview');
	module.exports = Overview;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// Import external names locally
	var Shared = __webpack_require__(3),
		async = __webpack_require__(78),
		localforage = __webpack_require__(103),
		FdbCompress = __webpack_require__(73),// jshint ignore:line
		FdbCrypto = __webpack_require__(74),// jshint ignore:line
		Db,
		Collection,
		CollectionDrop,
		CollectionGroup,
		CollectionInit,
		DbInit,
		DbDrop,
		Persist,
		Overload;//,
		//DataVersion = '2.0';

	/**
	 * The persistent storage class handles loading and saving data to browser
	 * storage.
	 * @constructor
	 */
	Persist = function () {
		this.init.apply(this, arguments);
	};

	/**
	 * The local forage library.
	 */
	Persist.prototype.localforage = localforage;

	/**
	 * The init method that can be overridden or extended.
	 * @param {Db} db The ForerunnerDB database instance.
	 */
	Persist.prototype.init = function (db) {
		var self = this;

		this._encodeSteps = [
			function () { return self._encode.apply(self, arguments); }
		];
		this._decodeSteps = [
			function () { return self._decode.apply(self, arguments); }
		];

		// Check environment
		if (db.isClient()) {
			if (window.Storage !== undefined) {
				this.mode('localforage');

				localforage.config({
					driver: [
						localforage.INDEXEDDB,
						localforage.WEBSQL,
						localforage.LOCALSTORAGE
					],
					name: String(db.core().name()),
					storeName: 'FDB'
				});
			}
		}
	};

	Shared.addModule('Persist', Persist);
	Shared.mixin(Persist.prototype, 'Mixin.ChainReactor');
	Shared.mixin(Persist.prototype, 'Mixin.Common');

	Db = Shared.modules.Db;
	Collection = __webpack_require__(5);
	CollectionDrop = Collection.prototype.drop;
	CollectionGroup = __webpack_require__(13);
	CollectionInit = Collection.prototype.init;
	DbInit = Db.prototype.init;
	DbDrop = Db.prototype.drop;
	Overload = Shared.overload;

	/**
	 * Gets / sets the persistent storage mode (the library used
	 * to persist data to the browser - defaults to localForage).
	 * @param {String} type The library to use for storage. Defaults
	 * to localForage.
	 * @returns {*}
	 */
	Persist.prototype.mode = function (type) {
		if (type !== undefined) {
			this._mode = type;
			return this;
		}

		return this._mode;
	};

	/**
	 * Gets / sets the driver used when persisting data.
	 * @param {String} val Specify the driver type (LOCALSTORAGE,
	 * WEBSQL or INDEXEDDB)
	 * @returns {*}
	 */
	Persist.prototype.driver = function (val) {
		if (val !== undefined) {
			switch (val.toUpperCase()) {
				case 'LOCALSTORAGE':
					localforage.setDriver(localforage.LOCALSTORAGE);
					break;

				case 'WEBSQL':
					localforage.setDriver(localforage.WEBSQL);
					break;

				case 'INDEXEDDB':
					localforage.setDriver(localforage.INDEXEDDB);
					break;

				default:
					throw('ForerunnerDB.Persist: The persistence driver you have specified is not found. Please use either IndexedDB, WebSQL or LocalStorage!');
			}

			return this;
		}

		return localforage.driver();
	};

	/**
	 * Starts a decode waterfall process.
	 * @param {*} val The data to be decoded.
	 * @param {Function} finished The callback to pass final data to.
	 */
	Persist.prototype.decode = function (val, finished) {
		async.waterfall([function (callback) {
			if (callback) { callback(false, val, {}); }
		}].concat(this._decodeSteps), finished);
	};

	/**
	 * Starts an encode waterfall process.
	 * @param {*} val The data to be encoded.
	 * @param {Function} finished The callback to pass final data to.
	 */
	Persist.prototype.encode = function (val, finished) {
		async.waterfall([function (callback) {
			if (callback) { callback(false, val, {}); }
		}].concat(this._encodeSteps), finished);
	};

	Shared.synthesize(Persist.prototype, 'encodeSteps');
	Shared.synthesize(Persist.prototype, 'decodeSteps');

	/**
	 * Adds an encode/decode step to the persistent storage system so
	 * that you can add custom functionality.
	 * @param {Function} encode The encode method called with the data from the
	 * previous encode step. When your method is complete it MUST call the
	 * callback method. If you provide anything other than false to the err
	 * parameter the encoder will fail and throw an error.
	 * @param {Function} decode The decode method called with the data from the
	 * previous decode step. When your method is complete it MUST call the
	 * callback method. If you provide anything other than false to the err
	 * parameter the decoder will fail and throw an error.
	 * @param {Number=} index Optional index to add the encoder step to. This
	 * allows you to place a step before or after other existing steps. If not
	 * provided your step is placed last in the list of steps. For instance if
	 * you are providing an encryption step it makes sense to place this last
	 * since all previous steps will then have their data encrypted by your
	 * final step.
	 */
	Persist.prototype.addStep = new Overload({
		'object': function (obj) {
			this.$main.call(this, function objEncode () { obj.encode.apply(obj, arguments); }, function objDecode () { obj.decode.apply(obj, arguments); }, 0);
		},

		'function, function': function (encode, decode) {
			this.$main.call(this, encode, decode, 0);
		},

		'function, function, number': function (encode, decode, index) {
			this.$main.call(this, encode, decode, index);
		},

		$main: function (encode, decode, index) {
			if (index === 0 || index === undefined) {
				this._encodeSteps.push(encode);
				this._decodeSteps.unshift(decode);
			} else {
				// Place encoder step at index then work out correct
				// index to place decoder step
				this._encodeSteps.splice(index, 0, encode);
				this._decodeSteps.splice(this._decodeSteps.length - index, 0, decode);
			}
		}
	});

	Persist.prototype.unwrap = function (dataStr) {
		var parts = dataStr.split('::fdb::'),
			data;

		switch (parts[0]) {
			case 'json':
				data = this.jParse(parts[1]);
				break;

			case 'raw':
				data = parts[1];
				break;

			default:
				break;
		}
	};

	/**
	 * Takes encoded data and decodes it for use as JS native objects and arrays.
	 * @param {String} val The currently encoded string data.
	 * @param {Object} meta Meta data object that can be used to pass back useful
	 * supplementary data.
	 * @param {Function} finished The callback method to call when decoding is
	 * completed.
	 * @private
	 */
	Persist.prototype._decode = function (val, meta, finished) {
		var parts,
			data;

		if (val) {
			parts = val.split('::fdb::');

			switch (parts[0]) {
				case 'json':
					data = this.jParse(parts[1]);
					break;

				case 'raw':
					data = parts[1];
					break;

				default:
					break;
			}

			if (data) {
				meta.foundData = true;
				meta.rowCount = data.length;
			} else {
				meta.foundData = false;
			}

			if (finished) {
				finished(false, data, meta);
			}
		} else {
			meta.foundData = false;
			meta.rowCount = 0;

			if (finished) {
				finished(false, val, meta);
			}
		}
	};

	/**
	 * Takes native JS data and encodes it for for storage as a string.
	 * @param {Object} val The current un-encoded data.
	 * @param {Object} meta Meta data object that can be used to pass back useful
	 * supplementary data.
	 * @param {Function} finished The callback method to call when encoding is
	 * completed.
	 * @private
	 */
	Persist.prototype._encode = function (val, meta, finished) {
		var data = val;

		if (typeof val === 'object') {
			val = 'json::fdb::' + this.jStringify(val);
		} else {
			val = 'raw::fdb::' + val;
		}

		if (data) {
			meta.foundData = true;
			meta.rowCount = data.length;
		} else {
			meta.foundData = false;
		}

		if (finished) {
			finished(false, val, meta);
		}
	};

	/**
	 * Encodes passed data and then stores it in the browser's persistent
	 * storage layer.
	 * @param {String} key The key to store the data under in the persistent
	 * storage.
	 * @param {Object} data The data to store under the key.
	 * @param {Function=} callback The method to call when the save process
	 * has completed.
	 */
	Persist.prototype.save = function (key, data, callback) {
		switch (this.mode()) {
			case 'localforage':
				this.encode(data, function (err, data, tableStats) {
					localforage.setItem(key, data).then(function (data) {
						if (callback) { callback(false, data, tableStats); }
					}, function (err) {
						if (callback) { callback(err); }
					});
				});
				break;

			default:
				if (callback) { callback('No data handler.'); }
				break;
		}
	};

	/**
	 * Loads and decodes data from the passed key.
	 * @param {String} key The key to retrieve data from in the persistent
	 * storage.
	 * @param {Function=} callback The method to call when the load process
	 * has completed.
	 */
	Persist.prototype.load = function (key, callback) {
		var self = this;

		switch (this.mode()) {
			case 'localforage':
				localforage.getItem(key).then(function (val) {
					self.decode(val, callback);
				}, function (err) {
					if (callback) { callback(err); }
				});
				break;

			default:
				if (callback) { callback('No data handler or unrecognised data type.');	}
				break;
		}
	};

	/**
	 * Deletes data in persistent storage stored under the passed key.
	 * @param {String} key The key to drop data for in the storage.
	 * @param {Function=} callback The method to call when the data is dropped.
	 */
	Persist.prototype.drop = function (key, callback) {
		switch (this.mode()) {
			case 'localforage':
				localforage.removeItem(key).then(function () {
					if (callback) { callback(false); }
				}, function (err) {
					if (callback) { callback(err); }
				});
				break;

			default:
				if (callback) { callback('No data handler or unrecognised data type.'); }
				break;
		}

	};

	// Extend the Collection prototype with persist methods
	Collection.prototype.drop = new Overload({
		/**
		 * Drop collection and persistent storage.
		 */
		'': function () {
			if (!this.isDropped()) {
				this.drop(true);
			}
		},

		/**
		 * Drop collection and persistent storage with callback.
		 * @param {Function} callback Callback method.
		 */
		'function': function (callback) {
			if (!this.isDropped()) {
				this.drop(true, callback);
			}
		},

		/**
		 * Drop collection and optionally drop persistent storage.
		 * @param {Boolean} removePersistent True to drop persistent storage, false to keep it.
		 */
		'boolean': function (removePersistent) {
			if (!this.isDropped()) {
				// Remove persistent storage
				if (removePersistent) {
					if (this._name) {
						if (this._db) {
							// Drop the collection data from storage
							this._db.persist.drop(this._db._name + '-' + this._name);
							this._db.persist.drop(this._db._name + '-' + this._name + '-metaData');
						}
					} else {
						throw('ForerunnerDB.Persist: Cannot drop a collection\'s persistent storage when no name assigned to collection!');
					}
				}

				// Call the original method
				CollectionDrop.call(this);
			}
		},

		/**
		 * Drop collections and optionally drop persistent storage with callback.
		 * @param {Boolean} removePersistent True to drop persistent storage, false to keep it.
		 * @param {Function} callback Callback method.
		 */
		'boolean, function': function (removePersistent, callback) {
			var self = this;

			if (!this.isDropped()) {
				// Remove persistent storage
				if (removePersistent) {
					if (this._name) {
						if (this._db) {
							// Drop the collection data from storage
							this._db.persist.drop(this._db._name + '-' + this._name, function () {
								self._db.persist.drop(self._db._name + '-' + self._name + '-metaData', callback);
							});

							return CollectionDrop.call(this);
						} else {
							if (callback) { callback('Cannot drop a collection\'s persistent storage when the collection is not attached to a database!'); }
						}
					} else {
						if (callback) { callback('Cannot drop a collection\'s persistent storage when no name assigned to collection!'); }
					}
				} else {
					// Call the original method
					return CollectionDrop.call(this, callback);
				}
			}
		}
	});

	/**
	 * Saves an entire collection's data to persistent storage.
	 * @param {Function=} callback The method to call when the save function
	 * has completed.
	 */
	Collection.prototype.save = function (callback) {
		var self = this,
			processSave;

		if (self._name) {
			if (self._db) {
				processSave = function () {
					// Save the collection data
					self._db.persist.save(self._db._name + '-' + self._name, self._data, function (err, data, tableStats) {
						if (!err) {
							self._db.persist.save(self._db._name + '-' + self._name + '-metaData', self.metaData(), function (err, data, metaStats) {
								if (callback) { callback(err, data, tableStats, metaStats); }
							});
						} else {
							if (callback) { callback(err); }
						}
					});
				};

				// Check for processing queues
				if (self.isProcessingQueue()) {
					// Hook queue complete to process save
					self.on('queuesComplete', function () {
						processSave();
					});
				} else {
					// Process save immediately
					processSave();
				}
			} else {
				if (callback) { callback('Cannot save a collection that is not attached to a database!'); }
			}
		} else {
			if (callback) { callback('Cannot save a collection with no assigned name!'); }
		}
	};

	/**
	 * Loads an entire collection's data from persistent storage.
	 * @param {Function=} callback The method to call when the load function
	 * has completed.
	 */
	Collection.prototype.load = function (callback) {
		var self = this;

		if (self._name) {
			if (self._db) {
				// Load the collection data
				self._db.persist.load(self._db._name + '-' + self._name, function (err, data, tableStats) {
					if (!err) {
						if (data) {
							// Remove all previous data
							self.remove({});
							self.insert(data);
							//self.setData(data);
						}

						// Now load the collection's metadata
						self._db.persist.load(self._db._name + '-' + self._name + '-metaData', function (err, data, metaStats) {
							if (!err) {
								if (data) {
									self.metaData(data);
								}
							}

							if (callback) { callback(err, tableStats, metaStats); }
						});
					} else {
						if (callback) { callback(err); }
					}
				});
			} else {
				if (callback) { callback('Cannot load a collection that is not attached to a database!'); }
			}
		} else {
			if (callback) { callback('Cannot load a collection with no assigned name!'); }
		}
	};

	// Override the DB init to instantiate the plugin
	Db.prototype.init = function () {
		DbInit.apply(this, arguments);
		this.persist = new Persist(this);
	};

	/**
	 * Loads an entire database's data from persistent storage.
	 * @param {Function=} callback The method to call when the load function
	 * has completed.
	 */
	Db.prototype.load = function (callback) {
		// Loop the collections in the database
		var obj = this._collection,
			keys = obj.keys(),
			keyCount = keys.length,
			loadCallback,
			index;

		loadCallback = function (err) {
			if (!err) {
				keyCount--;

				if (keyCount === 0) {
					if (callback) { callback(false); }
				}
			} else {
				if (callback) { callback(err); }
			}
		};

		for (index in obj) {
			if (obj.hasOwnProperty(index)) {
				// Call the collection load method
				obj[index].load(loadCallback);
			}
		}
	};

	/**
	 * Saves an entire database's data to persistent storage.
	 * @param {Function=} callback The method to call when the save function
	 * has completed.
	 */
	Db.prototype.save = function (callback) {
		// Loop the collections in the database
		var obj = this._collection,
			keys = obj.keys(),
			keyCount = keys.length,
			saveCallback,
			index;

		saveCallback = function (err) {
			if (!err) {
				keyCount--;

				if (keyCount === 0) {
					if (callback) { callback(false); }
				}
			} else {
				if (callback) { callback(err); }
			}
		};

		for (index in obj) {
			if (obj.hasOwnProperty(index)) {
				// Call the collection save method
				obj[index].save(saveCallback);
			}
		}
	};

	Shared.finishModule('Persist');
	module.exports = Persist;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3),
		pako = __webpack_require__(104);

	var Plugin = function () {
		this.init.apply(this, arguments);
	};

	Plugin.prototype.init = function (options) {

	};

	Shared.mixin(Plugin.prototype, 'Mixin.Common');

	Plugin.prototype.encode = function (val, meta, finished) {
		var wrapper = {
				data: val,
				type: 'fdbCompress',
				enabled: false
			},
			before,
			after,
			compressedVal;

		// Compress the data
		before = val.length;
		compressedVal = pako.deflate(val, {to: 'string'});
		after = compressedVal.length;

		// If the compressed version is smaller than the original, use it!
		if (after < before) {
			wrapper.data = compressedVal;
			wrapper.enabled = true;
		}

		meta.compression = {
			enabled: wrapper.enabled,
			compressedBytes: after,
			uncompressedBytes: before,
			effect: Math.round((100 / before) * after) + '%'
		};

		finished(false, this.jStringify(wrapper), meta);
	};

	Plugin.prototype.decode = function (wrapper, meta, finished) {
		var compressionEnabled = false,
			data;

		if (wrapper) {
			wrapper = this.jParse(wrapper);

			// Check if we need to decompress the string
			if (wrapper.enabled) {
				data = pako.inflate(wrapper.data, {to: 'string'});
				compressionEnabled = true;
			} else {
				data = wrapper.data;
				compressionEnabled = false;
			}

			meta.compression = {
				enabled: compressionEnabled
			};

			if (finished) {
				finished(false, data, meta);
			}
		} else {
			if (finished) {
				finished(false, data, meta);
			}
		}
	};

	// Register this plugin with the persistent storage class
	Shared.plugins.FdbCompress = Plugin;

	module.exports = Plugin;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3),
		CryptoJS = __webpack_require__(82);

	var Plugin = function () {
		this.init.apply(this, arguments);
	};

	Plugin.prototype.init = function (options) {
		// Ensure at least a password is passed in options
		if (!options || !options.pass) {
			throw('Cannot initialise persistent storage encryption without a passphrase provided in the passed options object as the "pass" field.');
		}

		this._algo = options.algo || 'AES';
		this._pass = options.pass;
	};

	Shared.mixin(Plugin.prototype, 'Mixin.Common');

	/**
	 * Gets / sets the current pass-phrase being used to encrypt / decrypt
	 * data with the plugin.
	 */
	Shared.synthesize(Plugin.prototype, 'pass');

	Plugin.prototype.stringify = function (cipherParams) {
		// create json object with ciphertext
		var jsonObj = {
			ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64)
		};

		// optionally add iv and salt
		if (cipherParams.iv) {
			jsonObj.iv = cipherParams.iv.toString();
		}
		if (cipherParams.salt) {
			jsonObj.s = cipherParams.salt.toString();
		}

		// stringify json object
		return this.jStringify(jsonObj);
	};

	Plugin.prototype.parse = function (jsonStr) {
		// parse json string
		var jsonObj = this.jParse(jsonStr);

		// extract ciphertext from json object, and create cipher params object
		var cipherParams = CryptoJS.lib.CipherParams.create({
			ciphertext: CryptoJS.enc.Base64.parse(jsonObj.ct)
		});

		// optionally extract iv and salt
		if (jsonObj.iv) {
			cipherParams.iv = CryptoJS.enc.Hex.parse(jsonObj.iv);
		}
		if (jsonObj.s) {
			cipherParams.salt = CryptoJS.enc.Hex.parse(jsonObj.s);
		}

		return cipherParams;
	};

	Plugin.prototype.encode = function (val, meta, finished) {
		var self = this,
			wrapper = {
				type: 'fdbCrypto'
			},
			encryptedVal;

		// Encrypt the data
		encryptedVal = CryptoJS[this._algo].encrypt(val, this._pass, {
			format: {
				stringify: function () { return self.stringify.apply(self, arguments); },
				parse: function () { return self.parse.apply(self, arguments); }
			}
		});

		wrapper.data = encryptedVal.toString();
		wrapper.enabled = true;

		meta.encryption = {
			enabled: wrapper.enabled
		};

		if (finished) {
			finished(false, this.jStringify(wrapper), meta);
		}
	};

	Plugin.prototype.decode = function (wrapper, meta, finished) {
		var self = this,
			data;

		if (wrapper) {
			wrapper = this.jParse(wrapper);

			data = CryptoJS[this._algo].decrypt(wrapper.data, this._pass, {
				format: {
					stringify: function () { return self.stringify.apply(self, arguments); },
					parse: function () { return self.parse.apply(self, arguments); }
				}
			}).toString(CryptoJS.enc.Utf8);

			if (finished) {
				finished(false, data, meta);
			}
		} else {
			if (finished) {
				finished(false, wrapper, meta);
			}
		}
	};

	// Register this plugin with the persistent storage class
	Shared.plugins.FdbCrypto = Plugin;

	module.exports = Plugin;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Shared = __webpack_require__(3),
		RestClient = __webpack_require__(113),
		mime = __webpack_require__(115),
		Db,
		Collection,
		CollectionDrop,
		CollectionGroup,
		CollectionInit,
		DbInit,
		Overload;

	var Rest = function () {
		this.init.apply(this, arguments);
	};

	Rest.prototype.init = function (db) {
		this._endPoint = '';
		this._client = RestClient.wrap(mime);
	};

	/**
	 * Convert a JSON object to url query parameter format.
	 * @param {Object} obj The object to convert.
	 * @returns {String}
	 * @private
	 */
	Rest.prototype._params = function (obj) {
		var parts = [];

		for (var key in obj) {
			if (obj.hasOwnProperty(key)) {
				parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));
			}
		}

		return parts.join('&');
	};

	Rest.prototype.get = function (path, data, callback) {
		var self= this,
			coll;

		path = path !== undefined ? path : "";

		//console.log('Getting: ', this.endPoint() + path + '?' + this._params(data));
		this._client({
			method: 'get',
			path: this.endPoint() + path,
			params: data
		}).then(function (response) {
			if (response.entity && response.entity.error) {
				if (callback) { callback(response.entity.error, response.entity, response); }
			} else {
				// Check if we have a collection
				coll = self.collection();

				if (coll) {
					// Upsert the records into the collection
					coll.upsert(response.entity);
				}

				if (callback) { callback(false, response.entity, response); }
			}
		}, function(response) {
			if (callback) { callback(true, response.entity, response); }
		});
	};

	Rest.prototype.post = function (path, data, callback) {
		this._client({
			method: 'post',
			path: this.endPoint() + path,
			entity: data,
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function (response) {
			if (response.entity && response.entity.error) {
				if (callback) { callback(response.entity.error, response.entity, response); }
			} else {
				if (callback) { callback(false, response.entity, response); }
			}
		}, function(response) {
			if (callback) { callback(true, response); }
		});
	};

	Shared.synthesize(Rest.prototype, 'sessionData');
	Shared.synthesize(Rest.prototype, 'endPoint');
	Shared.synthesize(Rest.prototype, 'collection');

	Shared.addModule('Rest', Rest);
	Shared.mixin(Rest.prototype, 'Mixin.ChainReactor');

	Db = Shared.modules.Db;
	Collection = __webpack_require__(5);
	CollectionDrop = Collection.prototype.drop;
	CollectionGroup = __webpack_require__(13);
	CollectionInit = Collection.prototype.init;
	DbInit = Db.prototype.init;
	Overload = Shared.overload;

	Collection.prototype.init = function () {
		this.rest = new Rest();
		this.rest.collection(this);
		CollectionInit.apply(this, arguments);
	};

	Db.prototype.init = function () {
		this.rest = new Rest();
		DbInit.apply(this, arguments);
	};

	Shared.finishModule('Rest');
	module.exports = Rest;

/***/ },
/* 76 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Provides functionality to encode and decode JavaScript objects to strings
	 * and back again. This differs from JSON.stringify and JSON.parse in that
	 * special objects such as dates can be encoded to strings and back again
	 * so that the reconstituted version of the string still contains a JavaScript
	 * date object.
	 * @constructor
	 */
	var Serialiser = function () {
		this.init.apply(this, arguments);
	};

	Serialiser.prototype.init = function () {
		this._encoder = [];
		this._decoder = {};

		// Register our handlers
		this.registerEncoder('$date', function (data) {
			if (data instanceof Date) {
				return data.toISOString();
			}
		});

		this.registerDecoder('$date', function (data) {
			return new Date(data);
		});
	};

	/**
	 * Register an encoder that can handle encoding for a particular
	 * object type.
	 * @param {String} handles The name of the handler e.g. $date.
	 * @param {Function} method The encoder method.
	 */
	Serialiser.prototype.registerEncoder = function (handles, method) {
		this._encoder.push(function (data) {
			var methodVal = method(data),
					returnObj;

			if (methodVal !== undefined) {
				returnObj = {};
				returnObj[handles] = methodVal;
			}

			return returnObj;
		});
	};

	/**
	 * Register a decoder that can handle decoding for a particular
	 * object type.
	 * @param {String} handles The name of the handler e.g. $date. When an object
	 * has a field matching this handler name then this decode will be invoked
	 * to provide a decoded version of the data that was previously encoded by
	 * it's counterpart encoder method.
	 * @param {Function} method The decoder method.
	 */
	Serialiser.prototype.registerDecoder = function (handles, method) {
		this._decoder[handles] = method;
	};

	/**
	 * Loops the encoders and asks each one if it wants to handle encoding for
	 * the passed data object. If no value is returned (undefined) then the data
	 * will be passed to the next encoder and so on. If a value is returned the
	 * loop will break and the encoded data will be used.
	 * @param {Object} data The data object to handle.
	 * @returns {*} The encoded data.
	 * @private
	 */
	Serialiser.prototype._encode = function (data) {
		// Loop the encoders and if a return value is given by an encoder
		// the loop will exit and return that value.
		var count = this._encoder.length,
			retVal;

		while (count-- && !retVal) {
			retVal = this._encoder[count](data);
		}

		return retVal;
	};


	/**
	 * Converts a previously encoded string back into an object.
	 * @param {String} data The string to convert to an object.
	 * @returns {Object} The reconstituted object.
	 */
	Serialiser.prototype.parse = function (data) {
		return this._parse(JSON.parse(data));
	};

	/**
	 * Handles restoring an object with special data markers back into
	 * it's original format.
	 * @param {Object} data The object to recurse.
	 * @param {Object=} target The target object to restore data to.
	 * @returns {Object} The final restored object.
	 * @private
	 */
	Serialiser.prototype._parse = function (data, target) {
		var i;

		if (typeof data === 'object' && data !== null) {
			if (data instanceof Array) {
				target = target || [];
			} else {
				target = target || {};
			}

			// Iterate through the object's keys and handle
			// special object types and restore them
			for (i in data) {
				if (data.hasOwnProperty(i)) {
					if (i.substr(0, 1) === '$' && this._decoder[i]) {
						// This is a special object type and a handler
						// exists, restore it
						return this._decoder[i](data[i]);
					}

					// Not a special object or no handler, recurse as normal
					target[i] = this._parse(data[i], target[i]);
				}
			}
		} else {
			target = data;
		}

		// The data is a basic type
		return target;
	};

	/**
	 * Converts an object to a encoded string representation.
	 * @param {Object} data The object to encode.
	 */
	Serialiser.prototype.stringify = function (data) {
		return JSON.stringify(this._stringify(data));
	};

	/**
	 * Recurse down an object and encode special objects so they can be
	 * stringified and later restored.
	 * @param {Object} data The object to parse.
	 * @param {Object=} target The target object to store converted data to.
	 * @returns {Object} The converted object.
	 * @private
	 */
	Serialiser.prototype._stringify = function (data, target) {
		var handledData,
			i;

		if (typeof data === 'object' && data !== null) {
			// Handle special object types so they can be encoded with
			// a special marker and later restored by a decoder counterpart
			handledData = this._encode(data);
			if (handledData) {
				// An encoder handled this object type so return it now
				return handledData;
			}

			if (data instanceof Array) {
				target = target || [];
			} else {
				target = target || {};
			}

			// Iterate through the object's keys and serialise
			for (i in data) {
				if (data.hasOwnProperty(i)) {
					target[i] = this._stringify(data[i], target[i]);
				}
			}
		} else {
			target = data;
		}

		// The data is a basic type
		return target;
	};

	module.exports = Serialiser;

/***/ },
/* 77 */
/***/ function(module, exports) {

	/* jshint strict:false */
	if (!Array.prototype.filter) {
		Array.prototype.filter = function(fun/*, thisArg*/) {

			if (this === void 0 || this === null) {
				throw new TypeError();
			}

			var t = Object(this);
			var len = t.length >>> 0; // jshint ignore:line
			if (typeof fun !== 'function') {
				throw new TypeError();
			}

			var res = [];
			var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
			for (var i = 0; i < len; i++) {
				if (i in t) {
					var val = t[i];

					// NOTE: Technically this should Object.defineProperty at
					//       the next index, as push can be affected by
					//       properties on Object.prototype and Array.prototype.
					//       But that method's new, and collisions should be
					//       rare, so use the more-compatible alternative.
					if (fun.call(thisArg, val, i, t)) {
						res.push(val);
					}
				}
			}

			return res;
		};
	}

	if (typeof Object.create !== 'function') {
		Object.create = (function() {
			var Temp = function() {};
			return function (prototype) {
				if (arguments.length > 1) {
					throw Error('Second argument not supported');
				}
				if (typeof prototype !== 'object') {
					throw TypeError('Argument must be an object');
				}
				Temp.prototype = prototype;
				var result = new Temp();
				Temp.prototype = null;
				return result;
			};
		})();
	}

	// Production steps of ECMA-262, Edition 5, 15.4.4.14
	// Reference: http://es5.github.io/#x15.4.4.14e
	if (!Array.prototype.indexOf) {
		Array.prototype.indexOf = function(searchElement, fromIndex) {
			var k;

			// 1. Let O be the result of calling ToObject passing
			//    the this value as the argument.
			if (this === null) {
				throw new TypeError('"this" is null or not defined');
			}

			var O = Object(this);

			// 2. Let lenValue be the result of calling the Get
			//    internal method of O with the argument "length".
			// 3. Let len be ToUint32(lenValue).
			var len = O.length >>> 0; // jshint ignore:line

			// 4. If len is 0, return -1.
			if (len === 0) {
				return -1;
			}

			// 5. If argument fromIndex was passed let n be
			//    ToInteger(fromIndex); else let n be 0.
			var n = +fromIndex || 0;

			if (Math.abs(n) === Infinity) {
				n = 0;
			}

			// 6. If n >= len, return -1.
			if (n >= len) {
				return -1;
			}

			// 7. If n >= 0, then Let k be n.
			// 8. Else, n<0, Let k be len - abs(n).
			//    If k is less than 0, then let k be 0.
			k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

			// 9. Repeat, while k < len
			while (k < len) {
				// a. Let Pk be ToString(k).
				//   This is implicit for LHS operands of the in operator
				// b. Let kPresent be the result of calling the
				//    HasProperty internal method of O with argument Pk.
				//   This step can be combined with c
				// c. If kPresent is true, then
				//    i.  Let elementK be the result of calling the Get
				//        internal method of O with the argument ToString(k).
				//   ii.  Let same be the result of applying the
				//        Strict Equality Comparison Algorithm to
				//        searchElement and elementK.
				//  iii.  If same is true, return k.
				if (k in O && O[k] === searchElement) {
					return k;
				}
				k++;
			}
			return -1;
		};
	}

	module.exports = {};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, setImmediate, process) {/*!
	 * async
	 * https://github.com/caolan/async
	 *
	 * Copyright 2010-2014 Caolan McMahon
	 * Released under the MIT license
	 */
	(function () {

	    var async = {};
	    function noop() {}
	    function identity(v) {
	        return v;
	    }
	    function toBool(v) {
	        return !!v;
	    }
	    function notId(v) {
	        return !v;
	    }

	    // global on the server, window in the browser
	    var previous_async;

	    // Establish the root object, `window` (`self`) in the browser, `global`
	    // on the server, or `this` in some virtual machines. We use `self`
	    // instead of `window` for `WebWorker` support.
	    var root = typeof self === 'object' && self.self === self && self ||
	            typeof global === 'object' && global.global === global && global ||
	            this;

	    if (root != null) {
	        previous_async = root.async;
	    }

	    async.noConflict = function () {
	        root.async = previous_async;
	        return async;
	    };

	    function only_once(fn) {
	        return function() {
	            if (fn === null) throw new Error("Callback was already called.");
	            fn.apply(this, arguments);
	            fn = null;
	        };
	    }

	    function _once(fn) {
	        return function() {
	            if (fn === null) return;
	            fn.apply(this, arguments);
	            fn = null;
	        };
	    }

	    //// cross-browser compatiblity functions ////

	    var _toString = Object.prototype.toString;

	    var _isArray = Array.isArray || function (obj) {
	        return _toString.call(obj) === '[object Array]';
	    };

	    // Ported from underscore.js isObject
	    var _isObject = function(obj) {
	        var type = typeof obj;
	        return type === 'function' || type === 'object' && !!obj;
	    };

	    function _isArrayLike(arr) {
	        return _isArray(arr) || (
	            // has a positive integer length property
	            typeof arr.length === "number" &&
	            arr.length >= 0 &&
	            arr.length % 1 === 0
	        );
	    }

	    function _arrayEach(arr, iterator) {
	        var index = -1,
	            length = arr.length;

	        while (++index < length) {
	            iterator(arr[index], index, arr);
	        }
	    }

	    function _map(arr, iterator) {
	        var index = -1,
	            length = arr.length,
	            result = Array(length);

	        while (++index < length) {
	            result[index] = iterator(arr[index], index, arr);
	        }
	        return result;
	    }

	    function _range(count) {
	        return _map(Array(count), function (v, i) { return i; });
	    }

	    function _reduce(arr, iterator, memo) {
	        _arrayEach(arr, function (x, i, a) {
	            memo = iterator(memo, x, i, a);
	        });
	        return memo;
	    }

	    function _forEachOf(object, iterator) {
	        _arrayEach(_keys(object), function (key) {
	            iterator(object[key], key);
	        });
	    }

	    function _indexOf(arr, item) {
	        for (var i = 0; i < arr.length; i++) {
	            if (arr[i] === item) return i;
	        }
	        return -1;
	    }

	    var _keys = Object.keys || function (obj) {
	        var keys = [];
	        for (var k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                keys.push(k);
	            }
	        }
	        return keys;
	    };

	    function _keyIterator(coll) {
	        var i = -1;
	        var len;
	        var keys;
	        if (_isArrayLike(coll)) {
	            len = coll.length;
	            return function next() {
	                i++;
	                return i < len ? i : null;
	            };
	        } else {
	            keys = _keys(coll);
	            len = keys.length;
	            return function next() {
	                i++;
	                return i < len ? keys[i] : null;
	            };
	        }
	    }

	    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
	    // This accumulates the arguments passed into an array, after a given index.
	    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
	    function _restParam(func, startIndex) {
	        startIndex = startIndex == null ? func.length - 1 : +startIndex;
	        return function() {
	            var length = Math.max(arguments.length - startIndex, 0);
	            var rest = Array(length);
	            for (var index = 0; index < length; index++) {
	                rest[index] = arguments[index + startIndex];
	            }
	            switch (startIndex) {
	                case 0: return func.call(this, rest);
	                case 1: return func.call(this, arguments[0], rest);
	            }
	            // Currently unused but handle cases outside of the switch statement:
	            // var args = Array(startIndex + 1);
	            // for (index = 0; index < startIndex; index++) {
	            //     args[index] = arguments[index];
	            // }
	            // args[startIndex] = rest;
	            // return func.apply(this, args);
	        };
	    }

	    function _withoutIndex(iterator) {
	        return function (value, index, callback) {
	            return iterator(value, callback);
	        };
	    }

	    //// exported async module functions ////

	    //// nextTick implementation with browser-compatible fallback ////

	    // capture the global reference to guard against fakeTimer mocks
	    var _setImmediate = typeof setImmediate === 'function' && setImmediate;

	    var _delay = _setImmediate ? function(fn) {
	        // not a direct alias for IE10 compatibility
	        _setImmediate(fn);
	    } : function(fn) {
	        setTimeout(fn, 0);
	    };

	    if (typeof process === 'object' && typeof process.nextTick === 'function') {
	        async.nextTick = process.nextTick;
	    } else {
	        async.nextTick = _delay;
	    }
	    async.setImmediate = _setImmediate ? _delay : async.nextTick;


	    async.forEach =
	    async.each = function (arr, iterator, callback) {
	        return async.eachOf(arr, _withoutIndex(iterator), callback);
	    };

	    async.forEachSeries =
	    async.eachSeries = function (arr, iterator, callback) {
	        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
	    };


	    async.forEachLimit =
	    async.eachLimit = function (arr, limit, iterator, callback) {
	        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
	    };

	    async.forEachOf =
	    async.eachOf = function (object, iterator, callback) {
	        callback = _once(callback || noop);
	        object = object || [];

	        var iter = _keyIterator(object);
	        var key, completed = 0;

	        while ((key = iter()) != null) {
	            completed += 1;
	            iterator(object[key], key, only_once(done));
	        }

	        if (completed === 0) callback(null);

	        function done(err) {
	            completed--;
	            if (err) {
	                callback(err);
	            }
	            // Check key is null in case iterator isn't exhausted
	            // and done resolved synchronously.
	            else if (key === null && completed <= 0) {
	                callback(null);
	            }
	        }
	    };

	    async.forEachOfSeries =
	    async.eachOfSeries = function (obj, iterator, callback) {
	        callback = _once(callback || noop);
	        obj = obj || [];
	        var nextKey = _keyIterator(obj);
	        var key = nextKey();
	        function iterate() {
	            var sync = true;
	            if (key === null) {
	                return callback(null);
	            }
	            iterator(obj[key], key, only_once(function (err) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    key = nextKey();
	                    if (key === null) {
	                        return callback(null);
	                    } else {
	                        if (sync) {
	                            async.setImmediate(iterate);
	                        } else {
	                            iterate();
	                        }
	                    }
	                }
	            }));
	            sync = false;
	        }
	        iterate();
	    };



	    async.forEachOfLimit =
	    async.eachOfLimit = function (obj, limit, iterator, callback) {
	        _eachOfLimit(limit)(obj, iterator, callback);
	    };

	    function _eachOfLimit(limit) {

	        return function (obj, iterator, callback) {
	            callback = _once(callback || noop);
	            obj = obj || [];
	            var nextKey = _keyIterator(obj);
	            if (limit <= 0) {
	                return callback(null);
	            }
	            var done = false;
	            var running = 0;
	            var errored = false;

	            (function replenish () {
	                if (done && running <= 0) {
	                    return callback(null);
	                }

	                while (running < limit && !errored) {
	                    var key = nextKey();
	                    if (key === null) {
	                        done = true;
	                        if (running <= 0) {
	                            callback(null);
	                        }
	                        return;
	                    }
	                    running += 1;
	                    iterator(obj[key], key, only_once(function (err) {
	                        running -= 1;
	                        if (err) {
	                            callback(err);
	                            errored = true;
	                        }
	                        else {
	                            replenish();
	                        }
	                    }));
	                }
	            })();
	        };
	    }


	    function doParallel(fn) {
	        return function (obj, iterator, callback) {
	            return fn(async.eachOf, obj, iterator, callback);
	        };
	    }
	    function doParallelLimit(fn) {
	        return function (obj, limit, iterator, callback) {
	            return fn(_eachOfLimit(limit), obj, iterator, callback);
	        };
	    }
	    function doSeries(fn) {
	        return function (obj, iterator, callback) {
	            return fn(async.eachOfSeries, obj, iterator, callback);
	        };
	    }

	    function _asyncMap(eachfn, arr, iterator, callback) {
	        callback = _once(callback || noop);
	        arr = arr || [];
	        var results = _isArrayLike(arr) ? [] : {};
	        eachfn(arr, function (value, index, callback) {
	            iterator(value, function (err, v) {
	                results[index] = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, results);
	        });
	    }

	    async.map = doParallel(_asyncMap);
	    async.mapSeries = doSeries(_asyncMap);
	    async.mapLimit = doParallelLimit(_asyncMap);

	    // reduce only has a series version, as doing reduce in parallel won't
	    // work in many situations.
	    async.inject =
	    async.foldl =
	    async.reduce = function (arr, memo, iterator, callback) {
	        async.eachOfSeries(arr, function (x, i, callback) {
	            iterator(memo, x, function (err, v) {
	                memo = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, memo);
	        });
	    };

	    async.foldr =
	    async.reduceRight = function (arr, memo, iterator, callback) {
	        var reversed = _map(arr, identity).reverse();
	        async.reduce(reversed, memo, iterator, callback);
	    };

	    async.transform = function (arr, memo, iterator, callback) {
	        if (arguments.length === 3) {
	            callback = iterator;
	            iterator = memo;
	            memo = _isArray(arr) ? [] : {};
	        }

	        async.eachOf(arr, function(v, k, cb) {
	            iterator(memo, v, k, cb);
	        }, function(err) {
	            callback(err, memo);
	        });
	    };

	    function _filter(eachfn, arr, iterator, callback) {
	        var results = [];
	        eachfn(arr, function (x, index, callback) {
	            iterator(x, function (v) {
	                if (v) {
	                    results.push({index: index, value: x});
	                }
	                callback();
	            });
	        }, function () {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    }

	    async.select =
	    async.filter = doParallel(_filter);

	    async.selectLimit =
	    async.filterLimit = doParallelLimit(_filter);

	    async.selectSeries =
	    async.filterSeries = doSeries(_filter);

	    function _reject(eachfn, arr, iterator, callback) {
	        _filter(eachfn, arr, function(value, cb) {
	            iterator(value, function(v) {
	                cb(!v);
	            });
	        }, callback);
	    }
	    async.reject = doParallel(_reject);
	    async.rejectLimit = doParallelLimit(_reject);
	    async.rejectSeries = doSeries(_reject);

	    function _createTester(eachfn, check, getResult) {
	        return function(arr, limit, iterator, cb) {
	            function done() {
	                if (cb) cb(getResult(false, void 0));
	            }
	            function iteratee(x, _, callback) {
	                if (!cb) return callback();
	                iterator(x, function (v) {
	                    if (cb && check(v)) {
	                        cb(getResult(true, x));
	                        cb = iterator = false;
	                    }
	                    callback();
	                });
	            }
	            if (arguments.length > 3) {
	                eachfn(arr, limit, iteratee, done);
	            } else {
	                cb = iterator;
	                iterator = limit;
	                eachfn(arr, iteratee, done);
	            }
	        };
	    }

	    async.any =
	    async.some = _createTester(async.eachOf, toBool, identity);

	    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);

	    async.all =
	    async.every = _createTester(async.eachOf, notId, notId);

	    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);

	    function _findGetResult(v, x) {
	        return x;
	    }
	    async.detect = _createTester(async.eachOf, identity, _findGetResult);
	    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
	    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);

	    async.sortBy = function (arr, iterator, callback) {
	        async.map(arr, function (x, callback) {
	            iterator(x, function (err, criteria) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    callback(null, {value: x, criteria: criteria});
	                }
	            });
	        }, function (err, results) {
	            if (err) {
	                return callback(err);
	            }
	            else {
	                callback(null, _map(results.sort(comparator), function (x) {
	                    return x.value;
	                }));
	            }

	        });

	        function comparator(left, right) {
	            var a = left.criteria, b = right.criteria;
	            return a < b ? -1 : a > b ? 1 : 0;
	        }
	    };

	    async.auto = function (tasks, concurrency, callback) {
	        if (typeof arguments[1] === 'function') {
	            // concurrency is optional, shift the args.
	            callback = concurrency;
	            concurrency = null;
	        }
	        callback = _once(callback || noop);
	        var keys = _keys(tasks);
	        var remainingTasks = keys.length;
	        if (!remainingTasks) {
	            return callback(null);
	        }
	        if (!concurrency) {
	            concurrency = remainingTasks;
	        }

	        var results = {};
	        var runningTasks = 0;

	        var hasError = false;

	        var listeners = [];
	        function addListener(fn) {
	            listeners.unshift(fn);
	        }
	        function removeListener(fn) {
	            var idx = _indexOf(listeners, fn);
	            if (idx >= 0) listeners.splice(idx, 1);
	        }
	        function taskComplete() {
	            remainingTasks--;
	            _arrayEach(listeners.slice(0), function (fn) {
	                fn();
	            });
	        }

	        addListener(function () {
	            if (!remainingTasks) {
	                callback(null, results);
	            }
	        });

	        _arrayEach(keys, function (k) {
	            if (hasError) return;
	            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
	            var taskCallback = _restParam(function(err, args) {
	                runningTasks--;
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                if (err) {
	                    var safeResults = {};
	                    _forEachOf(results, function(val, rkey) {
	                        safeResults[rkey] = val;
	                    });
	                    safeResults[k] = args;
	                    hasError = true;

	                    callback(err, safeResults);
	                }
	                else {
	                    results[k] = args;
	                    async.setImmediate(taskComplete);
	                }
	            });
	            var requires = task.slice(0, task.length - 1);
	            // prevent dead-locks
	            var len = requires.length;
	            var dep;
	            while (len--) {
	                if (!(dep = tasks[requires[len]])) {
	                    throw new Error('Has inexistant dependency');
	                }
	                if (_isArray(dep) && _indexOf(dep, k) >= 0) {
	                    throw new Error('Has cyclic dependencies');
	                }
	            }
	            function ready() {
	                return runningTasks < concurrency && _reduce(requires, function (a, x) {
	                    return (a && results.hasOwnProperty(x));
	                }, true) && !results.hasOwnProperty(k);
	            }
	            if (ready()) {
	                runningTasks++;
	                task[task.length - 1](taskCallback, results);
	            }
	            else {
	                addListener(listener);
	            }
	            function listener() {
	                if (ready()) {
	                    runningTasks++;
	                    removeListener(listener);
	                    task[task.length - 1](taskCallback, results);
	                }
	            }
	        });
	    };



	    async.retry = function(times, task, callback) {
	        var DEFAULT_TIMES = 5;
	        var DEFAULT_INTERVAL = 0;

	        var attempts = [];

	        var opts = {
	            times: DEFAULT_TIMES,
	            interval: DEFAULT_INTERVAL
	        };

	        function parseTimes(acc, t){
	            if(typeof t === 'number'){
	                acc.times = parseInt(t, 10) || DEFAULT_TIMES;
	            } else if(typeof t === 'object'){
	                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
	                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
	            } else {
	                throw new Error('Unsupported argument type for \'times\': ' + typeof t);
	            }
	        }

	        var length = arguments.length;
	        if (length < 1 || length > 3) {
	            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
	        } else if (length <= 2 && typeof times === 'function') {
	            callback = task;
	            task = times;
	        }
	        if (typeof times !== 'function') {
	            parseTimes(opts, times);
	        }
	        opts.callback = callback;
	        opts.task = task;

	        function wrappedTask(wrappedCallback, wrappedResults) {
	            function retryAttempt(task, finalAttempt) {
	                return function(seriesCallback) {
	                    task(function(err, result){
	                        seriesCallback(!err || finalAttempt, {err: err, result: result});
	                    }, wrappedResults);
	                };
	            }

	            function retryInterval(interval){
	                return function(seriesCallback){
	                    setTimeout(function(){
	                        seriesCallback(null);
	                    }, interval);
	                };
	            }

	            while (opts.times) {

	                var finalAttempt = !(opts.times-=1);
	                attempts.push(retryAttempt(opts.task, finalAttempt));
	                if(!finalAttempt && opts.interval > 0){
	                    attempts.push(retryInterval(opts.interval));
	                }
	            }

	            async.series(attempts, function(done, data){
	                data = data[data.length - 1];
	                (wrappedCallback || opts.callback)(data.err, data.result);
	            });
	        }

	        // If a callback is passed, run this as a controll flow
	        return opts.callback ? wrappedTask() : wrappedTask;
	    };

	    async.waterfall = function (tasks, callback) {
	        callback = _once(callback || noop);
	        if (!_isArray(tasks)) {
	            var err = new Error('First argument to waterfall must be an array of functions');
	            return callback(err);
	        }
	        if (!tasks.length) {
	            return callback();
	        }
	        function wrapIterator(iterator) {
	            return _restParam(function (err, args) {
	                if (err) {
	                    callback.apply(null, [err].concat(args));
	                }
	                else {
	                    var next = iterator.next();
	                    if (next) {
	                        args.push(wrapIterator(next));
	                    }
	                    else {
	                        args.push(callback);
	                    }
	                    ensureAsync(iterator).apply(null, args);
	                }
	            });
	        }
	        wrapIterator(async.iterator(tasks))();
	    };

	    function _parallel(eachfn, tasks, callback) {
	        callback = callback || noop;
	        var results = _isArrayLike(tasks) ? [] : {};

	        eachfn(tasks, function (task, key, callback) {
	            task(_restParam(function (err, args) {
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                results[key] = args;
	                callback(err);
	            }));
	        }, function (err) {
	            callback(err, results);
	        });
	    }

	    async.parallel = function (tasks, callback) {
	        _parallel(async.eachOf, tasks, callback);
	    };

	    async.parallelLimit = function(tasks, limit, callback) {
	        _parallel(_eachOfLimit(limit), tasks, callback);
	    };

	    async.series = function(tasks, callback) {
	        _parallel(async.eachOfSeries, tasks, callback);
	    };

	    async.iterator = function (tasks) {
	        function makeCallback(index) {
	            function fn() {
	                if (tasks.length) {
	                    tasks[index].apply(null, arguments);
	                }
	                return fn.next();
	            }
	            fn.next = function () {
	                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
	            };
	            return fn;
	        }
	        return makeCallback(0);
	    };

	    async.apply = _restParam(function (fn, args) {
	        return _restParam(function (callArgs) {
	            return fn.apply(
	                null, args.concat(callArgs)
	            );
	        });
	    });

	    function _concat(eachfn, arr, fn, callback) {
	        var result = [];
	        eachfn(arr, function (x, index, cb) {
	            fn(x, function (err, y) {
	                result = result.concat(y || []);
	                cb(err);
	            });
	        }, function (err) {
	            callback(err, result);
	        });
	    }
	    async.concat = doParallel(_concat);
	    async.concatSeries = doSeries(_concat);

	    async.whilst = function (test, iterator, callback) {
	        callback = callback || noop;
	        if (test()) {
	            var next = _restParam(function(err, args) {
	                if (err) {
	                    callback(err);
	                } else if (test.apply(this, args)) {
	                    iterator(next);
	                } else {
	                    callback.apply(null, [null].concat(args));
	                }
	            });
	            iterator(next);
	        } else {
	            callback(null);
	        }
	    };

	    async.doWhilst = function (iterator, test, callback) {
	        var calls = 0;
	        return async.whilst(function() {
	            return ++calls <= 1 || test.apply(this, arguments);
	        }, iterator, callback);
	    };

	    async.until = function (test, iterator, callback) {
	        return async.whilst(function() {
	            return !test.apply(this, arguments);
	        }, iterator, callback);
	    };

	    async.doUntil = function (iterator, test, callback) {
	        return async.doWhilst(iterator, function() {
	            return !test.apply(this, arguments);
	        }, callback);
	    };

	    async.during = function (test, iterator, callback) {
	        callback = callback || noop;

	        var next = _restParam(function(err, args) {
	            if (err) {
	                callback(err);
	            } else {
	                args.push(check);
	                test.apply(this, args);
	            }
	        });

	        var check = function(err, truth) {
	            if (err) {
	                callback(err);
	            } else if (truth) {
	                iterator(next);
	            } else {
	                callback(null);
	            }
	        };

	        test(check);
	    };

	    async.doDuring = function (iterator, test, callback) {
	        var calls = 0;
	        async.during(function(next) {
	            if (calls++ < 1) {
	                next(null, true);
	            } else {
	                test.apply(this, arguments);
	            }
	        }, iterator, callback);
	    };

	    function _queue(worker, concurrency, payload) {
	        if (concurrency == null) {
	            concurrency = 1;
	        }
	        else if(concurrency === 0) {
	            throw new Error('Concurrency must not be zero');
	        }
	        function _insert(q, data, pos, callback) {
	            if (callback != null && typeof callback !== "function") {
	                throw new Error("task callback must be a function");
	            }
	            q.started = true;
	            if (!_isArray(data)) {
	                data = [data];
	            }
	            if(data.length === 0 && q.idle()) {
	                // call drain immediately if there are no tasks
	                return async.setImmediate(function() {
	                    q.drain();
	                });
	            }
	            _arrayEach(data, function(task) {
	                var item = {
	                    data: task,
	                    callback: callback || noop
	                };

	                if (pos) {
	                    q.tasks.unshift(item);
	                } else {
	                    q.tasks.push(item);
	                }

	                if (q.tasks.length === q.concurrency) {
	                    q.saturated();
	                }
	            });
	            async.setImmediate(q.process);
	        }
	        function _next(q, tasks) {
	            return function(){
	                workers -= 1;

	                var removed = false;
	                var args = arguments;
	                _arrayEach(tasks, function (task) {
	                    _arrayEach(workersList, function (worker, index) {
	                        if (worker === task && !removed) {
	                            workersList.splice(index, 1);
	                            removed = true;
	                        }
	                    });

	                    task.callback.apply(task, args);
	                });
	                if (q.tasks.length + workers === 0) {
	                    q.drain();
	                }
	                q.process();
	            };
	        }

	        var workers = 0;
	        var workersList = [];
	        var q = {
	            tasks: [],
	            concurrency: concurrency,
	            payload: payload,
	            saturated: noop,
	            empty: noop,
	            drain: noop,
	            started: false,
	            paused: false,
	            push: function (data, callback) {
	                _insert(q, data, false, callback);
	            },
	            kill: function () {
	                q.drain = noop;
	                q.tasks = [];
	            },
	            unshift: function (data, callback) {
	                _insert(q, data, true, callback);
	            },
	            process: function () {
	                while(!q.paused && workers < q.concurrency && q.tasks.length){

	                    var tasks = q.payload ?
	                        q.tasks.splice(0, q.payload) :
	                        q.tasks.splice(0, q.tasks.length);

	                    var data = _map(tasks, function (task) {
	                        return task.data;
	                    });

	                    if (q.tasks.length === 0) {
	                        q.empty();
	                    }
	                    workers += 1;
	                    workersList.push(tasks[0]);
	                    var cb = only_once(_next(q, tasks));
	                    worker(data, cb);
	                }
	            },
	            length: function () {
	                return q.tasks.length;
	            },
	            running: function () {
	                return workers;
	            },
	            workersList: function () {
	                return workersList;
	            },
	            idle: function() {
	                return q.tasks.length + workers === 0;
	            },
	            pause: function () {
	                q.paused = true;
	            },
	            resume: function () {
	                if (q.paused === false) { return; }
	                q.paused = false;
	                var resumeCount = Math.min(q.concurrency, q.tasks.length);
	                // Need to call q.process once per concurrent
	                // worker to preserve full concurrency after pause
	                for (var w = 1; w <= resumeCount; w++) {
	                    async.setImmediate(q.process);
	                }
	            }
	        };
	        return q;
	    }

	    async.queue = function (worker, concurrency) {
	        var q = _queue(function (items, cb) {
	            worker(items[0], cb);
	        }, concurrency, 1);

	        return q;
	    };

	    async.priorityQueue = function (worker, concurrency) {

	        function _compareTasks(a, b){
	            return a.priority - b.priority;
	        }

	        function _binarySearch(sequence, item, compare) {
	            var beg = -1,
	                end = sequence.length - 1;
	            while (beg < end) {
	                var mid = beg + ((end - beg + 1) >>> 1);
	                if (compare(item, sequence[mid]) >= 0) {
	                    beg = mid;
	                } else {
	                    end = mid - 1;
	                }
	            }
	            return beg;
	        }

	        function _insert(q, data, priority, callback) {
	            if (callback != null && typeof callback !== "function") {
	                throw new Error("task callback must be a function");
	            }
	            q.started = true;
	            if (!_isArray(data)) {
	                data = [data];
	            }
	            if(data.length === 0) {
	                // call drain immediately if there are no tasks
	                return async.setImmediate(function() {
	                    q.drain();
	                });
	            }
	            _arrayEach(data, function(task) {
	                var item = {
	                    data: task,
	                    priority: priority,
	                    callback: typeof callback === 'function' ? callback : noop
	                };

	                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

	                if (q.tasks.length === q.concurrency) {
	                    q.saturated();
	                }
	                async.setImmediate(q.process);
	            });
	        }

	        // Start with a normal queue
	        var q = async.queue(worker, concurrency);

	        // Override push to accept second parameter representing priority
	        q.push = function (data, priority, callback) {
	            _insert(q, data, priority, callback);
	        };

	        // Remove unshift function
	        delete q.unshift;

	        return q;
	    };

	    async.cargo = function (worker, payload) {
	        return _queue(worker, 1, payload);
	    };

	    function _console_fn(name) {
	        return _restParam(function (fn, args) {
	            fn.apply(null, args.concat([_restParam(function (err, args) {
	                if (typeof console === 'object') {
	                    if (err) {
	                        if (console.error) {
	                            console.error(err);
	                        }
	                    }
	                    else if (console[name]) {
	                        _arrayEach(args, function (x) {
	                            console[name](x);
	                        });
	                    }
	                }
	            })]));
	        });
	    }
	    async.log = _console_fn('log');
	    async.dir = _console_fn('dir');
	    /*async.info = _console_fn('info');
	    async.warn = _console_fn('warn');
	    async.error = _console_fn('error');*/

	    async.memoize = function (fn, hasher) {
	        var memo = {};
	        var queues = {};
	        hasher = hasher || identity;
	        var memoized = _restParam(function memoized(args) {
	            var callback = args.pop();
	            var key = hasher.apply(null, args);
	            if (key in memo) {
	                async.setImmediate(function () {
	                    callback.apply(null, memo[key]);
	                });
	            }
	            else if (key in queues) {
	                queues[key].push(callback);
	            }
	            else {
	                queues[key] = [callback];
	                fn.apply(null, args.concat([_restParam(function (args) {
	                    memo[key] = args;
	                    var q = queues[key];
	                    delete queues[key];
	                    for (var i = 0, l = q.length; i < l; i++) {
	                        q[i].apply(null, args);
	                    }
	                })]));
	            }
	        });
	        memoized.memo = memo;
	        memoized.unmemoized = fn;
	        return memoized;
	    };

	    async.unmemoize = function (fn) {
	        return function () {
	            return (fn.unmemoized || fn).apply(null, arguments);
	        };
	    };

	    function _times(mapper) {
	        return function (count, iterator, callback) {
	            mapper(_range(count), iterator, callback);
	        };
	    }

	    async.times = _times(async.map);
	    async.timesSeries = _times(async.mapSeries);
	    async.timesLimit = function (count, limit, iterator, callback) {
	        return async.mapLimit(_range(count), limit, iterator, callback);
	    };

	    async.seq = function (/* functions... */) {
	        var fns = arguments;
	        return _restParam(function (args) {
	            var that = this;

	            var callback = args[args.length - 1];
	            if (typeof callback == 'function') {
	                args.pop();
	            } else {
	                callback = noop;
	            }

	            async.reduce(fns, args, function (newargs, fn, cb) {
	                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {
	                    cb(err, nextargs);
	                })]));
	            },
	            function (err, results) {
	                callback.apply(that, [err].concat(results));
	            });
	        });
	    };

	    async.compose = function (/* functions... */) {
	        return async.seq.apply(null, Array.prototype.reverse.call(arguments));
	    };


	    function _applyEach(eachfn) {
	        return _restParam(function(fns, args) {
	            var go = _restParam(function(args) {
	                var that = this;
	                var callback = args.pop();
	                return eachfn(fns, function (fn, _, cb) {
	                    fn.apply(that, args.concat([cb]));
	                },
	                callback);
	            });
	            if (args.length) {
	                return go.apply(this, args);
	            }
	            else {
	                return go;
	            }
	        });
	    }

	    async.applyEach = _applyEach(async.eachOf);
	    async.applyEachSeries = _applyEach(async.eachOfSeries);


	    async.forever = function (fn, callback) {
	        var done = only_once(callback || noop);
	        var task = ensureAsync(fn);
	        function next(err) {
	            if (err) {
	                return done(err);
	            }
	            task(next);
	        }
	        next();
	    };

	    function ensureAsync(fn) {
	        return _restParam(function (args) {
	            var callback = args.pop();
	            args.push(function () {
	                var innerArgs = arguments;
	                if (sync) {
	                    async.setImmediate(function () {
	                        callback.apply(null, innerArgs);
	                    });
	                } else {
	                    callback.apply(null, innerArgs);
	                }
	            });
	            var sync = true;
	            fn.apply(this, args);
	            sync = false;
	        });
	    }

	    async.ensureAsync = ensureAsync;

	    async.constant = _restParam(function(values) {
	        var args = [null].concat(values);
	        return function (callback) {
	            return callback.apply(this, args);
	        };
	    });

	    async.wrapSync =
	    async.asyncify = function asyncify(func) {
	        return _restParam(function (args) {
	            var callback = args.pop();
	            var result;
	            try {
	                result = func.apply(this, args);
	            } catch (e) {
	                return callback(e);
	            }
	            // if result is Promise object
	            if (_isObject(result) && typeof result.then === "function") {
	                result.then(function(value) {
	                    callback(null, value);
	                })["catch"](function(err) {
	                    callback(err.message ? err : new Error(err));
	                });
	            } else {
	                callback(null, result);
	            }
	        });
	    };

	    // Node.js
	    if (typeof module === 'object' && module.exports) {
	        module.exports = async;
	    }
	    // AMD / RequireJS
	    else if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return async;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    // included directly via <script> tag
	    else {
	        root.async = async;
	    }

	}());

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(26).setImmediate, __webpack_require__(12)))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(9), __webpack_require__(11), __webpack_require__(10), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Lookup tables
		    var SBOX = [];
		    var INV_SBOX = [];
		    var SUB_MIX_0 = [];
		    var SUB_MIX_1 = [];
		    var SUB_MIX_2 = [];
		    var SUB_MIX_3 = [];
		    var INV_SUB_MIX_0 = [];
		    var INV_SUB_MIX_1 = [];
		    var INV_SUB_MIX_2 = [];
		    var INV_SUB_MIX_3 = [];

		    // Compute lookup tables
		    (function () {
		        // Compute double table
		        var d = [];
		        for (var i = 0; i < 256; i++) {
		            if (i < 128) {
		                d[i] = i << 1;
		            } else {
		                d[i] = (i << 1) ^ 0x11b;
		            }
		        }

		        // Walk GF(2^8)
		        var x = 0;
		        var xi = 0;
		        for (var i = 0; i < 256; i++) {
		            // Compute sbox
		            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
		            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
		            SBOX[x] = sx;
		            INV_SBOX[sx] = x;

		            // Compute multiplication
		            var x2 = d[x];
		            var x4 = d[x2];
		            var x8 = d[x4];

		            // Compute sub bytes, mix columns tables
		            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
		            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
		            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
		            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
		            SUB_MIX_3[x] = t;

		            // Compute inv sub bytes, inv mix columns tables
		            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
		            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
		            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
		            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
		            INV_SUB_MIX_3[sx] = t;

		            // Compute next counter
		            if (!x) {
		                x = xi = 1;
		            } else {
		                x = x2 ^ d[d[d[x8 ^ x2]]];
		                xi ^= d[d[xi]];
		            }
		        }
		    }());

		    // Precomputed Rcon lookup
		    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

		    /**
		     * AES block cipher algorithm.
		     */
		    var AES = C_algo.AES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;
		            var keySize = key.sigBytes / 4;

		            // Compute number of rounds
		            var nRounds = this._nRounds = keySize + 6

		            // Compute number of key schedule rows
		            var ksRows = (nRounds + 1) * 4;

		            // Compute key schedule
		            var keySchedule = this._keySchedule = [];
		            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
		                if (ksRow < keySize) {
		                    keySchedule[ksRow] = keyWords[ksRow];
		                } else {
		                    var t = keySchedule[ksRow - 1];

		                    if (!(ksRow % keySize)) {
		                        // Rot word
		                        t = (t << 8) | (t >>> 24);

		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

		                        // Mix Rcon
		                        t ^= RCON[(ksRow / keySize) | 0] << 24;
		                    } else if (keySize > 6 && ksRow % keySize == 4) {
		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
		                    }

		                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
		                }
		            }

		            // Compute inv key schedule
		            var invKeySchedule = this._invKeySchedule = [];
		            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
		                var ksRow = ksRows - invKsRow;

		                if (invKsRow % 4) {
		                    var t = keySchedule[ksRow];
		                } else {
		                    var t = keySchedule[ksRow - 4];
		                }

		                if (invKsRow < 4 || ksRow <= 4) {
		                    invKeySchedule[invKsRow] = t;
		                } else {
		                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
		                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
		                }
		            }
		        },

		        encryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
		        },

		        decryptBlock: function (M, offset) {
		            // Swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;

		            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

		            // Inv swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;
		        },

		        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
		            // Shortcut
		            var nRounds = this._nRounds;

		            // Get input, add round key
		            var s0 = M[offset]     ^ keySchedule[0];
		            var s1 = M[offset + 1] ^ keySchedule[1];
		            var s2 = M[offset + 2] ^ keySchedule[2];
		            var s3 = M[offset + 3] ^ keySchedule[3];

		            // Key schedule row counter
		            var ksRow = 4;

		            // Rounds
		            for (var round = 1; round < nRounds; round++) {
		                // Shift rows, sub bytes, mix columns, add round key
		                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
		                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
		                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
		                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

		                // Update state
		                s0 = t0;
		                s1 = t1;
		                s2 = t2;
		                s3 = t3;
		            }

		            // Shift rows, sub bytes, add round key
		            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
		            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
		            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
		            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

		            // Set output
		            M[offset]     = t0;
		            M[offset + 1] = t1;
		            M[offset + 2] = t2;
		            M[offset + 3] = t3;
		        },

		        keySize: 256/32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
		     */
		    C.AES = BlockCipher._createHelper(AES);
		}());


		return CryptoJS.AES;

	}));

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * UTF-16 BE encoding strategy.
		     */
		    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
		        /**
		         * Converts a word array to a UTF-16 BE string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-16 BE string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var utf16Chars = [];
		            for (var i = 0; i < sigBytes; i += 2) {
		                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
		                utf16Chars.push(String.fromCharCode(codePoint));
		            }

		            return utf16Chars.join('');
		        },

		        /**
		         * Converts a UTF-16 BE string to a word array.
		         *
		         * @param {string} utf16Str The UTF-16 BE string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
		         */
		        parse: function (utf16Str) {
		            // Shortcut
		            var utf16StrLength = utf16Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < utf16StrLength; i++) {
		                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
		            }

		            return WordArray.create(words, utf16StrLength * 2);
		        }
		    };

		    /**
		     * UTF-16 LE encoding strategy.
		     */
		    C_enc.Utf16LE = {
		        /**
		         * Converts a word array to a UTF-16 LE string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-16 LE string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var utf16Chars = [];
		            for (var i = 0; i < sigBytes; i += 2) {
		                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
		                utf16Chars.push(String.fromCharCode(codePoint));
		            }

		            return utf16Chars.join('');
		        },

		        /**
		         * Converts a UTF-16 LE string to a word array.
		         *
		         * @param {string} utf16Str The UTF-16 LE string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
		         */
		        parse: function (utf16Str) {
		            // Shortcut
		            var utf16StrLength = utf16Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < utf16StrLength; i++) {
		                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
		            }

		            return WordArray.create(words, utf16StrLength * 2);
		        }
		    };

		    function swapEndian(word) {
		        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
		    }
		}());


		return CryptoJS.enc.Utf16;

	}));

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (undefined) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var CipherParams = C_lib.CipherParams;
		    var C_enc = C.enc;
		    var Hex = C_enc.Hex;
		    var C_format = C.format;

		    var HexFormatter = C_format.Hex = {
		        /**
		         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The hexadecimally encoded string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
		         */
		        stringify: function (cipherParams) {
		            return cipherParams.ciphertext.toString(Hex);
		        },

		        /**
		         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
		         *
		         * @param {string} input The hexadecimally encoded string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
		         */
		        parse: function (input) {
		            var ciphertext = Hex.parse(input);
		            return CipherParams.create({ ciphertext: ciphertext });
		        }
		    };
		}());


		return CryptoJS.format.Hex;

	}));

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(15), __webpack_require__(83), __webpack_require__(80), __webpack_require__(9), __webpack_require__(11), __webpack_require__(19), __webpack_require__(32), __webpack_require__(99), __webpack_require__(33), __webpack_require__(101), __webpack_require__(100), __webpack_require__(98), __webpack_require__(18), __webpack_require__(94), __webpack_require__(10), __webpack_require__(4), __webpack_require__(84), __webpack_require__(86), __webpack_require__(85), __webpack_require__(88), __webpack_require__(87), __webpack_require__(89), __webpack_require__(90), __webpack_require__(91), __webpack_require__(93), __webpack_require__(92), __webpack_require__(81), __webpack_require__(79), __webpack_require__(102), __webpack_require__(97), __webpack_require__(96), __webpack_require__(95));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
		}
		else {
			// Global (browser)
			root.CryptoJS = factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		return CryptoJS;

	}));

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Check if typed arrays are supported
		    if (typeof ArrayBuffer != 'function') {
		        return;
		    }

		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;

		    // Reference original init
		    var superInit = WordArray.init;

		    // Augment WordArray.init to handle typed arrays
		    var subInit = WordArray.init = function (typedArray) {
		        // Convert buffers to uint8
		        if (typedArray instanceof ArrayBuffer) {
		            typedArray = new Uint8Array(typedArray);
		        }

		        // Convert other array views to uint8
		        if (
		            typedArray instanceof Int8Array ||
		            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
		            typedArray instanceof Int16Array ||
		            typedArray instanceof Uint16Array ||
		            typedArray instanceof Int32Array ||
		            typedArray instanceof Uint32Array ||
		            typedArray instanceof Float32Array ||
		            typedArray instanceof Float64Array
		        ) {
		            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
		        }

		        // Handle Uint8Array
		        if (typedArray instanceof Uint8Array) {
		            // Shortcut
		            var typedArrayByteLength = typedArray.byteLength;

		            // Extract bytes
		            var words = [];
		            for (var i = 0; i < typedArrayByteLength; i++) {
		                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
		            }

		            // Initialize this word array
		            superInit.call(this, words, typedArrayByteLength);
		        } else {
		            // Else call normal init
		            superInit.apply(this, arguments);
		        }
		    };

		    subInit.prototype = WordArray;
		}());


		return CryptoJS.lib.WordArray;

	}));

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Cipher Feedback block mode.
		 */
		CryptoJS.mode.CFB = (function () {
		    var CFB = CryptoJS.lib.BlockCipherMode.extend();

		    CFB.Encryptor = CFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;

		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		            // Remember this block to use with next block
		            this._prevBlock = words.slice(offset, offset + blockSize);
		        }
		    });

		    CFB.Decryptor = CFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;

		            // Remember this block to use with next block
		            var thisBlock = words.slice(offset, offset + blockSize);

		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		            // This block becomes the previous block
		            this._prevBlock = thisBlock;
		        }
		    });

		    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
		        // Shortcut
		        var iv = this._iv;

		        // Generate keystream
		        if (iv) {
		            var keystream = iv.slice(0);

		            // Remove IV for subsequent blocks
		            this._iv = undefined;
		        } else {
		            var keystream = this._prevBlock;
		        }
		        cipher.encryptBlock(keystream, 0);

		        // Encrypt
		        for (var i = 0; i < blockSize; i++) {
		            words[offset + i] ^= keystream[i];
		        }
		    }

		    return CFB;
		}());


		return CryptoJS.mode.CFB;

	}));

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/** @preserve
		 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
		 * derived from CryptoJS.mode.CTR
		 * Jan Hruby jhruby.web@gmail.com
		 */
		CryptoJS.mode.CTRGladman = (function () {
		    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

			function incWord(word)
			{
				if (((word >> 24) & 0xff) === 0xff) { //overflow
				var b1 = (word >> 16)&0xff;
				var b2 = (word >> 8)&0xff;
				var b3 = word & 0xff;

				if (b1 === 0xff) // overflow b1
				{
				b1 = 0;
				if (b2 === 0xff)
				{
					b2 = 0;
					if (b3 === 0xff)
					{
						b3 = 0;
					}
					else
					{
						++b3;
					}
				}
				else
				{
					++b2;
				}
				}
				else
				{
				++b1;
				}

				word = 0;
				word += (b1 << 16);
				word += (b2 << 8);
				word += b3;
				}
				else
				{
				word += (0x01 << 24);
				}
				return word;
			}

			function incCounter(counter)
			{
				if ((counter[0] = incWord(counter[0])) === 0)
				{
					// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
					counter[1] = incWord(counter[1]);
				}
				return counter;
			}

		    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var counter = this._counter;

		            // Generate keystream
		            if (iv) {
		                counter = this._counter = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }

					incCounter(counter);

					var keystream = counter.slice(0);
		            cipher.encryptBlock(keystream, 0);

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    CTRGladman.Decryptor = Encryptor;

		    return CTRGladman;
		}());




		return CryptoJS.mode.CTRGladman;

	}));

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Counter block mode.
		 */
		CryptoJS.mode.CTR = (function () {
		    var CTR = CryptoJS.lib.BlockCipherMode.extend();

		    var Encryptor = CTR.Encryptor = CTR.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var counter = this._counter;

		            // Generate keystream
		            if (iv) {
		                counter = this._counter = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }
		            var keystream = counter.slice(0);
		            cipher.encryptBlock(keystream, 0);

		            // Increment counter
		            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    CTR.Decryptor = Encryptor;

		    return CTR;
		}());


		return CryptoJS.mode.CTR;

	}));

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Electronic Codebook block mode.
		 */
		CryptoJS.mode.ECB = (function () {
		    var ECB = CryptoJS.lib.BlockCipherMode.extend();

		    ECB.Encryptor = ECB.extend({
		        processBlock: function (words, offset) {
		            this._cipher.encryptBlock(words, offset);
		        }
		    });

		    ECB.Decryptor = ECB.extend({
		        processBlock: function (words, offset) {
		            this._cipher.decryptBlock(words, offset);
		        }
		    });

		    return ECB;
		}());


		return CryptoJS.mode.ECB;

	}));

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Output Feedback block mode.
		 */
		CryptoJS.mode.OFB = (function () {
		    var OFB = CryptoJS.lib.BlockCipherMode.extend();

		    var Encryptor = OFB.Encryptor = OFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var keystream = this._keystream;

		            // Generate keystream
		            if (iv) {
		                keystream = this._keystream = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }
		            cipher.encryptBlock(keystream, 0);

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    OFB.Decryptor = Encryptor;

		    return OFB;
		}());


		return CryptoJS.mode.OFB;

	}));

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * ANSI X.923 padding strategy.
		 */
		CryptoJS.pad.AnsiX923 = {
		    pad: function (data, blockSize) {
		        // Shortcuts
		        var dataSigBytes = data.sigBytes;
		        var blockSizeBytes = blockSize * 4;

		        // Count padding bytes
		        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

		        // Compute last byte position
		        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

		        // Pad
		        data.clamp();
		        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
		        data.sigBytes += nPaddingBytes;
		    },

		    unpad: function (data) {
		        // Get number of padding bytes from last byte
		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		        // Remove padding
		        data.sigBytes -= nPaddingBytes;
		    }
		};


		return CryptoJS.pad.Ansix923;

	}));

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * ISO 10126 padding strategy.
		 */
		CryptoJS.pad.Iso10126 = {
		    pad: function (data, blockSize) {
		        // Shortcut
		        var blockSizeBytes = blockSize * 4;

		        // Count padding bytes
		        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		        // Pad
		        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
		             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
		    },

		    unpad: function (data) {
		        // Get number of padding bytes from last byte
		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		        // Remove padding
		        data.sigBytes -= nPaddingBytes;
		    }
		};


		return CryptoJS.pad.Iso10126;

	}));

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * ISO/IEC 9797-1 Padding Method 2.
		 */
		CryptoJS.pad.Iso97971 = {
		    pad: function (data, blockSize) {
		        // Add 0x80 byte
		        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

		        // Zero pad the rest
		        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
		    },

		    unpad: function (data) {
		        // Remove zero padding
		        CryptoJS.pad.ZeroPadding.unpad(data);

		        // Remove one more byte -- the 0x80 byte
		        data.sigBytes--;
		    }
		};


		return CryptoJS.pad.Iso97971;

	}));

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * A noop padding strategy.
		 */
		CryptoJS.pad.NoPadding = {
		    pad: function () {
		    },

		    unpad: function () {
		    }
		};


		return CryptoJS.pad.NoPadding;

	}));

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/**
		 * Zero padding strategy.
		 */
		CryptoJS.pad.ZeroPadding = {
		    pad: function (data, blockSize) {
		        // Shortcut
		        var blockSizeBytes = blockSize * 4;

		        // Pad
		        data.clamp();
		        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
		    },

		    unpad: function (data) {
		        // Shortcut
		        var dataWords = data.words;

		        // Unpad
		        var i = data.sigBytes - 1;
		        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
		            i--;
		        }
		        data.sigBytes = i + 1;
		    }
		};


		return CryptoJS.pad.ZeroPadding;

	}));

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(19), __webpack_require__(18));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha1", "./hmac"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA1 = C_algo.SHA1;
		    var HMAC = C_algo.HMAC;

		    /**
		     * Password-Based Key Derivation Function 2 algorithm.
		     */
		    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hasher to use. Default: SHA1
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */
		        cfg: Base.extend({
		            keySize: 128/32,
		            hasher: SHA1,
		            iterations: 1
		        }),

		        /**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.PBKDF2.create();
		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
		         */
		        init: function (cfg) {
		            this.cfg = this.cfg.extend(cfg);
		        },

		        /**
		         * Computes the Password-Based Key Derivation Function 2.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */
		        compute: function (password, salt) {
		            // Shortcut
		            var cfg = this.cfg;

		            // Init HMAC
		            var hmac = HMAC.create(cfg.hasher, password);

		            // Initial values
		            var derivedKey = WordArray.create();
		            var blockIndex = WordArray.create([0x00000001]);

		            // Shortcuts
		            var derivedKeyWords = derivedKey.words;
		            var blockIndexWords = blockIndex.words;
		            var keySize = cfg.keySize;
		            var iterations = cfg.iterations;

		            // Generate key
		            while (derivedKeyWords.length < keySize) {
		                var block = hmac.update(salt).finalize(blockIndex);
		                hmac.reset();

		                // Shortcuts
		                var blockWords = block.words;
		                var blockWordsLength = blockWords.length;

		                // Iterations
		                var intermediate = block;
		                for (var i = 1; i < iterations; i++) {
		                    intermediate = hmac.finalize(intermediate);
		                    hmac.reset();

		                    // Shortcut
		                    var intermediateWords = intermediate.words;

		                    // XOR intermediate with block
		                    for (var j = 0; j < blockWordsLength; j++) {
		                        blockWords[j] ^= intermediateWords[j];
		                    }
		                }

		                derivedKey.concat(block);
		                blockIndexWords[0]++;
		            }
		            derivedKey.sigBytes = keySize * 4;

		            return derivedKey;
		        }
		    });

		    /**
		     * Computes the Password-Based Key Derivation Function 2.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.PBKDF2(password, salt);
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.PBKDF2 = function (password, salt, cfg) {
		        return PBKDF2.create(cfg).compute(password, salt);
		    };
		}());


		return CryptoJS.PBKDF2;

	}));

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(9), __webpack_require__(11), __webpack_require__(10), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S  = [];
		    var C_ = [];
		    var G  = [];

		    /**
		     * Rabbit stream cipher algorithm.
		     *
		     * This is a legacy version that neglected to convert the key to little-endian.
		     * This error doesn't affect the cipher's security,
		     * but it does affect its compatibility with other implementations.
		     */
		    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var K = this._key.words;
		            var iv = this.cfg.iv;

		            // Generate initial state values
		            var X = this._X = [
		                K[0], (K[3] << 16) | (K[2] >>> 16),
		                K[1], (K[0] << 16) | (K[3] >>> 16),
		                K[2], (K[1] << 16) | (K[0] >>> 16),
		                K[3], (K[2] << 16) | (K[1] >>> 16)
		            ];

		            // Generate initial counter values
		            var C = this._C = [
		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
		            ];

		            // Carry bit
		            this._b = 0;

		            // Iterate the system four times
		            for (var i = 0; i < 4; i++) {
		                nextState.call(this);
		            }

		            // Modify the counters
		            for (var i = 0; i < 8; i++) {
		                C[i] ^= X[(i + 4) & 7];
		            }

		            // IV setup
		            if (iv) {
		                // Shortcuts
		                var IV = iv.words;
		                var IV_0 = IV[0];
		                var IV_1 = IV[1];

		                // Generate four subvectors
		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

		                // Modify counter values
		                C[0] ^= i0;
		                C[1] ^= i1;
		                C[2] ^= i2;
		                C[3] ^= i3;
		                C[4] ^= i0;
		                C[5] ^= i1;
		                C[6] ^= i2;
		                C[7] ^= i3;

		                // Iterate the system four times
		                for (var i = 0; i < 4; i++) {
		                    nextState.call(this);
		                }
		            }
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var X = this._X;

		            // Iterate the system
		            nextState.call(this);

		            // Generate four keystream words
		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

		            for (var i = 0; i < 4; i++) {
		                // Swap endian
		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

		                // Encrypt
		                M[offset + i] ^= S[i];
		            }
		        },

		        blockSize: 128/32,

		        ivSize: 64/32
		    });

		    function nextState() {
		        // Shortcuts
		        var X = this._X;
		        var C = this._C;

		        // Save old counter values
		        for (var i = 0; i < 8; i++) {
		            C_[i] = C[i];
		        }

		        // Calculate new counter values
		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

		        // Calculate the g-values
		        for (var i = 0; i < 8; i++) {
		            var gx = X[i] + C[i];

		            // Construct high and low argument for squaring
		            var ga = gx & 0xffff;
		            var gb = gx >>> 16;

		            // Calculate high and low result of squaring
		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

		            // High XOR low
		            G[i] = gh ^ gl;
		        }

		        // Calculate new state values
		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
		     */
		    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
		}());


		return CryptoJS.RabbitLegacy;

	}));

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(9), __webpack_require__(11), __webpack_require__(10), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S  = [];
		    var C_ = [];
		    var G  = [];

		    /**
		     * Rabbit stream cipher algorithm
		     */
		    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var K = this._key.words;
		            var iv = this.cfg.iv;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
		                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
		            }

		            // Generate initial state values
		            var X = this._X = [
		                K[0], (K[3] << 16) | (K[2] >>> 16),
		                K[1], (K[0] << 16) | (K[3] >>> 16),
		                K[2], (K[1] << 16) | (K[0] >>> 16),
		                K[3], (K[2] << 16) | (K[1] >>> 16)
		            ];

		            // Generate initial counter values
		            var C = this._C = [
		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
		            ];

		            // Carry bit
		            this._b = 0;

		            // Iterate the system four times
		            for (var i = 0; i < 4; i++) {
		                nextState.call(this);
		            }

		            // Modify the counters
		            for (var i = 0; i < 8; i++) {
		                C[i] ^= X[(i + 4) & 7];
		            }

		            // IV setup
		            if (iv) {
		                // Shortcuts
		                var IV = iv.words;
		                var IV_0 = IV[0];
		                var IV_1 = IV[1];

		                // Generate four subvectors
		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

		                // Modify counter values
		                C[0] ^= i0;
		                C[1] ^= i1;
		                C[2] ^= i2;
		                C[3] ^= i3;
		                C[4] ^= i0;
		                C[5] ^= i1;
		                C[6] ^= i2;
		                C[7] ^= i3;

		                // Iterate the system four times
		                for (var i = 0; i < 4; i++) {
		                    nextState.call(this);
		                }
		            }
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var X = this._X;

		            // Iterate the system
		            nextState.call(this);

		            // Generate four keystream words
		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

		            for (var i = 0; i < 4; i++) {
		                // Swap endian
		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

		                // Encrypt
		                M[offset + i] ^= S[i];
		            }
		        },

		        blockSize: 128/32,

		        ivSize: 64/32
		    });

		    function nextState() {
		        // Shortcuts
		        var X = this._X;
		        var C = this._C;

		        // Save old counter values
		        for (var i = 0; i < 8; i++) {
		            C_[i] = C[i];
		        }

		        // Calculate new counter values
		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

		        // Calculate the g-values
		        for (var i = 0; i < 8; i++) {
		            var gx = X[i] + C[i];

		            // Construct high and low argument for squaring
		            var ga = gx & 0xffff;
		            var gb = gx >>> 16;

		            // Calculate high and low result of squaring
		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

		            // High XOR low
		            G[i] = gh ^ gl;
		        }

		        // Calculate new state values
		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
		     */
		    C.Rabbit = StreamCipher._createHelper(Rabbit);
		}());


		return CryptoJS.Rabbit;

	}));

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(9), __webpack_require__(11), __webpack_require__(10), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    /**
		     * RC4 stream cipher algorithm.
		     */
		    var RC4 = C_algo.RC4 = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;
		            var keySigBytes = key.sigBytes;

		            // Init sbox
		            var S = this._S = [];
		            for (var i = 0; i < 256; i++) {
		                S[i] = i;
		            }

		            // Key setup
		            for (var i = 0, j = 0; i < 256; i++) {
		                var keyByteIndex = i % keySigBytes;
		                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

		                j = (j + S[i] + keyByte) % 256;

		                // Swap
		                var t = S[i];
		                S[i] = S[j];
		                S[j] = t;
		            }

		            // Counters
		            this._i = this._j = 0;
		        },

		        _doProcessBlock: function (M, offset) {
		            M[offset] ^= generateKeystreamWord.call(this);
		        },

		        keySize: 256/32,

		        ivSize: 0
		    });

		    function generateKeystreamWord() {
		        // Shortcuts
		        var S = this._S;
		        var i = this._i;
		        var j = this._j;

		        // Generate keystream word
		        var keystreamWord = 0;
		        for (var n = 0; n < 4; n++) {
		            i = (i + 1) % 256;
		            j = (j + S[i]) % 256;

		            // Swap
		            var t = S[i];
		            S[i] = S[j];
		            S[j] = t;

		            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
		        }

		        // Update counters
		        this._i = i;
		        this._j = j;

		        return keystreamWord;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4 = StreamCipher._createHelper(RC4);

		    /**
		     * Modified RC4 stream cipher algorithm.
		     */
		    var RC4Drop = C_algo.RC4Drop = RC4.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} drop The number of keystream words to drop. Default 192
		         */
		        cfg: RC4.cfg.extend({
		            drop: 192
		        }),

		        _doReset: function () {
		            RC4._doReset.call(this);

		            // Drop
		            for (var i = this.cfg.drop; i > 0; i--) {
		                generateKeystreamWord.call(this);
		            }
		        }
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
		}());


		return CryptoJS.RC4;

	}));

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		/** @preserve
		(c) 2012 by Cédric Mesnil. All rights reserved.

		Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

		    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
		    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*/

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var _zl = WordArray.create([
		        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
		        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
		        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
		        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
		        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
		    var _zr = WordArray.create([
		        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
		        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
		        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
		        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
		        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
		    var _sl = WordArray.create([
		         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
		        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
		        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
		          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
		        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
		    var _sr = WordArray.create([
		        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
		        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
		        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
		        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
		        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

		    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
		    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

		    /**
		     * RIPEMD160 hash algorithm.
		     */
		    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
		        _doReset: function () {
		            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
		        },

		        _doProcessBlock: function (M, offset) {

		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                // Swap
		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }
		            // Shortcut
		            var H  = this._hash.words;
		            var hl = _hl.words;
		            var hr = _hr.words;
		            var zl = _zl.words;
		            var zr = _zr.words;
		            var sl = _sl.words;
		            var sr = _sr.words;

		            // Working variables
		            var al, bl, cl, dl, el;
		            var ar, br, cr, dr, er;

		            ar = al = H[0];
		            br = bl = H[1];
		            cr = cl = H[2];
		            dr = dl = H[3];
		            er = el = H[4];
		            // Computation
		            var t;
		            for (var i = 0; i < 80; i += 1) {
		                t = (al +  M[offset+zl[i]])|0;
		                if (i<16){
			            t +=  f1(bl,cl,dl) + hl[0];
		                } else if (i<32) {
			            t +=  f2(bl,cl,dl) + hl[1];
		                } else if (i<48) {
			            t +=  f3(bl,cl,dl) + hl[2];
		                } else if (i<64) {
			            t +=  f4(bl,cl,dl) + hl[3];
		                } else {// if (i<80) {
			            t +=  f5(bl,cl,dl) + hl[4];
		                }
		                t = t|0;
		                t =  rotl(t,sl[i]);
		                t = (t+el)|0;
		                al = el;
		                el = dl;
		                dl = rotl(cl, 10);
		                cl = bl;
		                bl = t;

		                t = (ar + M[offset+zr[i]])|0;
		                if (i<16){
			            t +=  f5(br,cr,dr) + hr[0];
		                } else if (i<32) {
			            t +=  f4(br,cr,dr) + hr[1];
		                } else if (i<48) {
			            t +=  f3(br,cr,dr) + hr[2];
		                } else if (i<64) {
			            t +=  f2(br,cr,dr) + hr[3];
		                } else {// if (i<80) {
			            t +=  f1(br,cr,dr) + hr[4];
		                }
		                t = t|0;
		                t =  rotl(t,sr[i]) ;
		                t = (t+er)|0;
		                ar = er;
		                er = dr;
		                dr = rotl(cr, 10);
		                cr = br;
		                br = t;
		            }
		            // Intermediate hash value
		            t    = (H[1] + cl + dr)|0;
		            H[1] = (H[2] + dl + er)|0;
		            H[2] = (H[3] + el + ar)|0;
		            H[3] = (H[4] + al + br)|0;
		            H[4] = (H[0] + bl + cr)|0;
		            H[0] =  t;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
		            );
		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 5; i++) {
		                // Shortcut
		                var H_i = H[i];

		                // Swap
		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });


		    function f1(x, y, z) {
		        return ((x) ^ (y) ^ (z));

		    }

		    function f2(x, y, z) {
		        return (((x)&(y)) | ((~x)&(z)));
		    }

		    function f3(x, y, z) {
		        return (((x) | (~(y))) ^ (z));
		    }

		    function f4(x, y, z) {
		        return (((x) & (z)) | ((y)&(~(z))));
		    }

		    function f5(x, y, z) {
		        return ((x) ^ ((y) |(~(z))));

		    }

		    function rotl(x,n) {
		        return (x<<n) | (x>>>(32-n));
		    }


		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.RIPEMD160('message');
		     *     var hash = CryptoJS.RIPEMD160(wordArray);
		     */
		    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
		     */
		    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
		}(Math));


		return CryptoJS.RIPEMD160;

	}));

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(32));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./sha256"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA256 = C_algo.SHA256;

		    /**
		     * SHA-224 hash algorithm.
		     */
		    var SHA224 = C_algo.SHA224 = SHA256.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
		                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
		            ]);
		        },

		        _doFinalize: function () {
		            var hash = SHA256._doFinalize.call(this);

		            hash.sigBytes -= 4;

		            return hash;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA224('message');
		     *     var hash = CryptoJS.SHA224(wordArray);
		     */
		    C.SHA224 = SHA256._createHelper(SHA224);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA224(message, key);
		     */
		    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
		}());


		return CryptoJS.SHA224;

	}));

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(15));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var C_algo = C.algo;

		    // Constants tables
		    var RHO_OFFSETS = [];
		    var PI_INDEXES  = [];
		    var ROUND_CONSTANTS = [];

		    // Compute Constants
		    (function () {
		        // Compute rho offset constants
		        var x = 1, y = 0;
		        for (var t = 0; t < 24; t++) {
		            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

		            var newX = y % 5;
		            var newY = (2 * x + 3 * y) % 5;
		            x = newX;
		            y = newY;
		        }

		        // Compute pi index constants
		        for (var x = 0; x < 5; x++) {
		            for (var y = 0; y < 5; y++) {
		                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
		            }
		        }

		        // Compute round constants
		        var LFSR = 0x01;
		        for (var i = 0; i < 24; i++) {
		            var roundConstantMsw = 0;
		            var roundConstantLsw = 0;

		            for (var j = 0; j < 7; j++) {
		                if (LFSR & 0x01) {
		                    var bitPosition = (1 << j) - 1;
		                    if (bitPosition < 32) {
		                        roundConstantLsw ^= 1 << bitPosition;
		                    } else /* if (bitPosition >= 32) */ {
		                        roundConstantMsw ^= 1 << (bitPosition - 32);
		                    }
		                }

		                // Compute next LFSR
		                if (LFSR & 0x80) {
		                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
		                    LFSR = (LFSR << 1) ^ 0x71;
		                } else {
		                    LFSR <<= 1;
		                }
		            }

		            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
		        }
		    }());

		    // Reusable objects for temporary values
		    var T = [];
		    (function () {
		        for (var i = 0; i < 25; i++) {
		            T[i] = X64Word.create();
		        }
		    }());

		    /**
		     * SHA-3 hash algorithm.
		     */
		    var SHA3 = C_algo.SHA3 = Hasher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} outputLength
		         *   The desired number of bits in the output hash.
		         *   Only values permitted are: 224, 256, 384, 512.
		         *   Default: 512
		         */
		        cfg: Hasher.cfg.extend({
		            outputLength: 512
		        }),

		        _doReset: function () {
		            var state = this._state = []
		            for (var i = 0; i < 25; i++) {
		                state[i] = new X64Word.init();
		            }

		            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcuts
		            var state = this._state;
		            var nBlockSizeLanes = this.blockSize / 2;

		            // Absorb
		            for (var i = 0; i < nBlockSizeLanes; i++) {
		                // Shortcuts
		                var M2i  = M[offset + 2 * i];
		                var M2i1 = M[offset + 2 * i + 1];

		                // Swap endian
		                M2i = (
		                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
		                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
		                );
		                M2i1 = (
		                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
		                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
		                );

		                // Absorb message into state
		                var lane = state[i];
		                lane.high ^= M2i1;
		                lane.low  ^= M2i;
		            }

		            // Rounds
		            for (var round = 0; round < 24; round++) {
		                // Theta
		                for (var x = 0; x < 5; x++) {
		                    // Mix column lanes
		                    var tMsw = 0, tLsw = 0;
		                    for (var y = 0; y < 5; y++) {
		                        var lane = state[x + 5 * y];
		                        tMsw ^= lane.high;
		                        tLsw ^= lane.low;
		                    }

		                    // Temporary values
		                    var Tx = T[x];
		                    Tx.high = tMsw;
		                    Tx.low  = tLsw;
		                }
		                for (var x = 0; x < 5; x++) {
		                    // Shortcuts
		                    var Tx4 = T[(x + 4) % 5];
		                    var Tx1 = T[(x + 1) % 5];
		                    var Tx1Msw = Tx1.high;
		                    var Tx1Lsw = Tx1.low;

		                    // Mix surrounding columns
		                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
		                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
		                    for (var y = 0; y < 5; y++) {
		                        var lane = state[x + 5 * y];
		                        lane.high ^= tMsw;
		                        lane.low  ^= tLsw;
		                    }
		                }

		                // Rho Pi
		                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
		                    // Shortcuts
		                    var lane = state[laneIndex];
		                    var laneMsw = lane.high;
		                    var laneLsw = lane.low;
		                    var rhoOffset = RHO_OFFSETS[laneIndex];

		                    // Rotate lanes
		                    if (rhoOffset < 32) {
		                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
		                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
		                    } else /* if (rhoOffset >= 32) */ {
		                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
		                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
		                    }

		                    // Transpose lanes
		                    var TPiLane = T[PI_INDEXES[laneIndex]];
		                    TPiLane.high = tMsw;
		                    TPiLane.low  = tLsw;
		                }

		                // Rho pi at x = y = 0
		                var T0 = T[0];
		                var state0 = state[0];
		                T0.high = state0.high;
		                T0.low  = state0.low;

		                // Chi
		                for (var x = 0; x < 5; x++) {
		                    for (var y = 0; y < 5; y++) {
		                        // Shortcuts
		                        var laneIndex = x + 5 * y;
		                        var lane = state[laneIndex];
		                        var TLane = T[laneIndex];
		                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
		                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

		                        // Mix rows
		                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
		                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
		                    }
		                }

		                // Iota
		                var lane = state[0];
		                var roundConstant = ROUND_CONSTANTS[round];
		                lane.high ^= roundConstant.high;
		                lane.low  ^= roundConstant.low;;
		            }
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;
		            var blockSizeBits = this.blockSize * 32;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
		            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var state = this._state;
		            var outputLengthBytes = this.cfg.outputLength / 8;
		            var outputLengthLanes = outputLengthBytes / 8;

		            // Squeeze
		            var hashWords = [];
		            for (var i = 0; i < outputLengthLanes; i++) {
		                // Shortcuts
		                var lane = state[i];
		                var laneMsw = lane.high;
		                var laneLsw = lane.low;

		                // Swap endian
		                laneMsw = (
		                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
		                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
		                );
		                laneLsw = (
		                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
		                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
		                );

		                // Squeeze state to retrieve hash
		                hashWords.push(laneLsw);
		                hashWords.push(laneMsw);
		            }

		            // Return final computed hash
		            return new WordArray.init(hashWords, outputLengthBytes);
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);

		            var state = clone._state = this._state.slice(0);
		            for (var i = 0; i < 25; i++) {
		                state[i] = state[i].clone();
		            }

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA3('message');
		     *     var hash = CryptoJS.SHA3(wordArray);
		     */
		    C.SHA3 = Hasher._createHelper(SHA3);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA3(message, key);
		     */
		    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
		}(Math));


		return CryptoJS.SHA3;

	}));

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(15), __webpack_require__(33));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./x64-core", "./sha512"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;
		    var SHA512 = C_algo.SHA512;

		    /**
		     * SHA-384 hash algorithm.
		     */
		    var SHA384 = C_algo.SHA384 = SHA512.extend({
		        _doReset: function () {
		            this._hash = new X64WordArray.init([
		                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
		                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
		                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
		                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
		            ]);
		        },

		        _doFinalize: function () {
		            var hash = SHA512._doFinalize.call(this);

		            hash.sigBytes -= 16;

		            return hash;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA384('message');
		     *     var hash = CryptoJS.SHA384(wordArray);
		     */
		    C.SHA384 = SHA512._createHelper(SHA384);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA384(message, key);
		     */
		    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
		}());


		return CryptoJS.SHA384;

	}));

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory, undef) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(2), __webpack_require__(9), __webpack_require__(11), __webpack_require__(10), __webpack_require__(4));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Permuted Choice 1 constants
		    var PC1 = [
		        57, 49, 41, 33, 25, 17, 9,  1,
		        58, 50, 42, 34, 26, 18, 10, 2,
		        59, 51, 43, 35, 27, 19, 11, 3,
		        60, 52, 44, 36, 63, 55, 47, 39,
		        31, 23, 15, 7,  62, 54, 46, 38,
		        30, 22, 14, 6,  61, 53, 45, 37,
		        29, 21, 13, 5,  28, 20, 12, 4
		    ];

		    // Permuted Choice 2 constants
		    var PC2 = [
		        14, 17, 11, 24, 1,  5,
		        3,  28, 15, 6,  21, 10,
		        23, 19, 12, 4,  26, 8,
		        16, 7,  27, 20, 13, 2,
		        41, 52, 31, 37, 47, 55,
		        30, 40, 51, 45, 33, 48,
		        44, 49, 39, 56, 34, 53,
		        46, 42, 50, 36, 29, 32
		    ];

		    // Cumulative bit shift constants
		    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

		    // SBOXes and round permutation constants
		    var SBOX_P = [
		        {
		            0x0: 0x808200,
		            0x10000000: 0x8000,
		            0x20000000: 0x808002,
		            0x30000000: 0x2,
		            0x40000000: 0x200,
		            0x50000000: 0x808202,
		            0x60000000: 0x800202,
		            0x70000000: 0x800000,
		            0x80000000: 0x202,
		            0x90000000: 0x800200,
		            0xa0000000: 0x8200,
		            0xb0000000: 0x808000,
		            0xc0000000: 0x8002,
		            0xd0000000: 0x800002,
		            0xe0000000: 0x0,
		            0xf0000000: 0x8202,
		            0x8000000: 0x0,
		            0x18000000: 0x808202,
		            0x28000000: 0x8202,
		            0x38000000: 0x8000,
		            0x48000000: 0x808200,
		            0x58000000: 0x200,
		            0x68000000: 0x808002,
		            0x78000000: 0x2,
		            0x88000000: 0x800200,
		            0x98000000: 0x8200,
		            0xa8000000: 0x808000,
		            0xb8000000: 0x800202,
		            0xc8000000: 0x800002,
		            0xd8000000: 0x8002,
		            0xe8000000: 0x202,
		            0xf8000000: 0x800000,
		            0x1: 0x8000,
		            0x10000001: 0x2,
		            0x20000001: 0x808200,
		            0x30000001: 0x800000,
		            0x40000001: 0x808002,
		            0x50000001: 0x8200,
		            0x60000001: 0x200,
		            0x70000001: 0x800202,
		            0x80000001: 0x808202,
		            0x90000001: 0x808000,
		            0xa0000001: 0x800002,
		            0xb0000001: 0x8202,
		            0xc0000001: 0x202,
		            0xd0000001: 0x800200,
		            0xe0000001: 0x8002,
		            0xf0000001: 0x0,
		            0x8000001: 0x808202,
		            0x18000001: 0x808000,
		            0x28000001: 0x800000,
		            0x38000001: 0x200,
		            0x48000001: 0x8000,
		            0x58000001: 0x800002,
		            0x68000001: 0x2,
		            0x78000001: 0x8202,
		            0x88000001: 0x8002,
		            0x98000001: 0x800202,
		            0xa8000001: 0x202,
		            0xb8000001: 0x808200,
		            0xc8000001: 0x800200,
		            0xd8000001: 0x0,
		            0xe8000001: 0x8200,
		            0xf8000001: 0x808002
		        },
		        {
		            0x0: 0x40084010,
		            0x1000000: 0x4000,
		            0x2000000: 0x80000,
		            0x3000000: 0x40080010,
		            0x4000000: 0x40000010,
		            0x5000000: 0x40084000,
		            0x6000000: 0x40004000,
		            0x7000000: 0x10,
		            0x8000000: 0x84000,
		            0x9000000: 0x40004010,
		            0xa000000: 0x40000000,
		            0xb000000: 0x84010,
		            0xc000000: 0x80010,
		            0xd000000: 0x0,
		            0xe000000: 0x4010,
		            0xf000000: 0x40080000,
		            0x800000: 0x40004000,
		            0x1800000: 0x84010,
		            0x2800000: 0x10,
		            0x3800000: 0x40004010,
		            0x4800000: 0x40084010,
		            0x5800000: 0x40000000,
		            0x6800000: 0x80000,
		            0x7800000: 0x40080010,
		            0x8800000: 0x80010,
		            0x9800000: 0x0,
		            0xa800000: 0x4000,
		            0xb800000: 0x40080000,
		            0xc800000: 0x40000010,
		            0xd800000: 0x84000,
		            0xe800000: 0x40084000,
		            0xf800000: 0x4010,
		            0x10000000: 0x0,
		            0x11000000: 0x40080010,
		            0x12000000: 0x40004010,
		            0x13000000: 0x40084000,
		            0x14000000: 0x40080000,
		            0x15000000: 0x10,
		            0x16000000: 0x84010,
		            0x17000000: 0x4000,
		            0x18000000: 0x4010,
		            0x19000000: 0x80000,
		            0x1a000000: 0x80010,
		            0x1b000000: 0x40000010,
		            0x1c000000: 0x84000,
		            0x1d000000: 0x40004000,
		            0x1e000000: 0x40000000,
		            0x1f000000: 0x40084010,
		            0x10800000: 0x84010,
		            0x11800000: 0x80000,
		            0x12800000: 0x40080000,
		            0x13800000: 0x4000,
		            0x14800000: 0x40004000,
		            0x15800000: 0x40084010,
		            0x16800000: 0x10,
		            0x17800000: 0x40000000,
		            0x18800000: 0x40084000,
		            0x19800000: 0x40000010,
		            0x1a800000: 0x40004010,
		            0x1b800000: 0x80010,
		            0x1c800000: 0x0,
		            0x1d800000: 0x4010,
		            0x1e800000: 0x40080010,
		            0x1f800000: 0x84000
		        },
		        {
		            0x0: 0x104,
		            0x100000: 0x0,
		            0x200000: 0x4000100,
		            0x300000: 0x10104,
		            0x400000: 0x10004,
		            0x500000: 0x4000004,
		            0x600000: 0x4010104,
		            0x700000: 0x4010000,
		            0x800000: 0x4000000,
		            0x900000: 0x4010100,
		            0xa00000: 0x10100,
		            0xb00000: 0x4010004,
		            0xc00000: 0x4000104,
		            0xd00000: 0x10000,
		            0xe00000: 0x4,
		            0xf00000: 0x100,
		            0x80000: 0x4010100,
		            0x180000: 0x4010004,
		            0x280000: 0x0,
		            0x380000: 0x4000100,
		            0x480000: 0x4000004,
		            0x580000: 0x10000,
		            0x680000: 0x10004,
		            0x780000: 0x104,
		            0x880000: 0x4,
		            0x980000: 0x100,
		            0xa80000: 0x4010000,
		            0xb80000: 0x10104,
		            0xc80000: 0x10100,
		            0xd80000: 0x4000104,
		            0xe80000: 0x4010104,
		            0xf80000: 0x4000000,
		            0x1000000: 0x4010100,
		            0x1100000: 0x10004,
		            0x1200000: 0x10000,
		            0x1300000: 0x4000100,
		            0x1400000: 0x100,
		            0x1500000: 0x4010104,
		            0x1600000: 0x4000004,
		            0x1700000: 0x0,
		            0x1800000: 0x4000104,
		            0x1900000: 0x4000000,
		            0x1a00000: 0x4,
		            0x1b00000: 0x10100,
		            0x1c00000: 0x4010000,
		            0x1d00000: 0x104,
		            0x1e00000: 0x10104,
		            0x1f00000: 0x4010004,
		            0x1080000: 0x4000000,
		            0x1180000: 0x104,
		            0x1280000: 0x4010100,
		            0x1380000: 0x0,
		            0x1480000: 0x10004,
		            0x1580000: 0x4000100,
		            0x1680000: 0x100,
		            0x1780000: 0x4010004,
		            0x1880000: 0x10000,
		            0x1980000: 0x4010104,
		            0x1a80000: 0x10104,
		            0x1b80000: 0x4000004,
		            0x1c80000: 0x4000104,
		            0x1d80000: 0x4010000,
		            0x1e80000: 0x4,
		            0x1f80000: 0x10100
		        },
		        {
		            0x0: 0x80401000,
		            0x10000: 0x80001040,
		            0x20000: 0x401040,
		            0x30000: 0x80400000,
		            0x40000: 0x0,
		            0x50000: 0x401000,
		            0x60000: 0x80000040,
		            0x70000: 0x400040,
		            0x80000: 0x80000000,
		            0x90000: 0x400000,
		            0xa0000: 0x40,
		            0xb0000: 0x80001000,
		            0xc0000: 0x80400040,
		            0xd0000: 0x1040,
		            0xe0000: 0x1000,
		            0xf0000: 0x80401040,
		            0x8000: 0x80001040,
		            0x18000: 0x40,
		            0x28000: 0x80400040,
		            0x38000: 0x80001000,
		            0x48000: 0x401000,
		            0x58000: 0x80401040,
		            0x68000: 0x0,
		            0x78000: 0x80400000,
		            0x88000: 0x1000,
		            0x98000: 0x80401000,
		            0xa8000: 0x400000,
		            0xb8000: 0x1040,
		            0xc8000: 0x80000000,
		            0xd8000: 0x400040,
		            0xe8000: 0x401040,
		            0xf8000: 0x80000040,
		            0x100000: 0x400040,
		            0x110000: 0x401000,
		            0x120000: 0x80000040,
		            0x130000: 0x0,
		            0x140000: 0x1040,
		            0x150000: 0x80400040,
		            0x160000: 0x80401000,
		            0x170000: 0x80001040,
		            0x180000: 0x80401040,
		            0x190000: 0x80000000,
		            0x1a0000: 0x80400000,
		            0x1b0000: 0x401040,
		            0x1c0000: 0x80001000,
		            0x1d0000: 0x400000,
		            0x1e0000: 0x40,
		            0x1f0000: 0x1000,
		            0x108000: 0x80400000,
		            0x118000: 0x80401040,
		            0x128000: 0x0,
		            0x138000: 0x401000,
		            0x148000: 0x400040,
		            0x158000: 0x80000000,
		            0x168000: 0x80001040,
		            0x178000: 0x40,
		            0x188000: 0x80000040,
		            0x198000: 0x1000,
		            0x1a8000: 0x80001000,
		            0x1b8000: 0x80400040,
		            0x1c8000: 0x1040,
		            0x1d8000: 0x80401000,
		            0x1e8000: 0x400000,
		            0x1f8000: 0x401040
		        },
		        {
		            0x0: 0x80,
		            0x1000: 0x1040000,
		            0x2000: 0x40000,
		            0x3000: 0x20000000,
		            0x4000: 0x20040080,
		            0x5000: 0x1000080,
		            0x6000: 0x21000080,
		            0x7000: 0x40080,
		            0x8000: 0x1000000,
		            0x9000: 0x20040000,
		            0xa000: 0x20000080,
		            0xb000: 0x21040080,
		            0xc000: 0x21040000,
		            0xd000: 0x0,
		            0xe000: 0x1040080,
		            0xf000: 0x21000000,
		            0x800: 0x1040080,
		            0x1800: 0x21000080,
		            0x2800: 0x80,
		            0x3800: 0x1040000,
		            0x4800: 0x40000,
		            0x5800: 0x20040080,
		            0x6800: 0x21040000,
		            0x7800: 0x20000000,
		            0x8800: 0x20040000,
		            0x9800: 0x0,
		            0xa800: 0x21040080,
		            0xb800: 0x1000080,
		            0xc800: 0x20000080,
		            0xd800: 0x21000000,
		            0xe800: 0x1000000,
		            0xf800: 0x40080,
		            0x10000: 0x40000,
		            0x11000: 0x80,
		            0x12000: 0x20000000,
		            0x13000: 0x21000080,
		            0x14000: 0x1000080,
		            0x15000: 0x21040000,
		            0x16000: 0x20040080,
		            0x17000: 0x1000000,
		            0x18000: 0x21040080,
		            0x19000: 0x21000000,
		            0x1a000: 0x1040000,
		            0x1b000: 0x20040000,
		            0x1c000: 0x40080,
		            0x1d000: 0x20000080,
		            0x1e000: 0x0,
		            0x1f000: 0x1040080,
		            0x10800: 0x21000080,
		            0x11800: 0x1000000,
		            0x12800: 0x1040000,
		            0x13800: 0x20040080,
		            0x14800: 0x20000000,
		            0x15800: 0x1040080,
		            0x16800: 0x80,
		            0x17800: 0x21040000,
		            0x18800: 0x40080,
		            0x19800: 0x21040080,
		            0x1a800: 0x0,
		            0x1b800: 0x21000000,
		            0x1c800: 0x1000080,
		            0x1d800: 0x40000,
		            0x1e800: 0x20040000,
		            0x1f800: 0x20000080
		        },
		        {
		            0x0: 0x10000008,
		            0x100: 0x2000,
		            0x200: 0x10200000,
		            0x300: 0x10202008,
		            0x400: 0x10002000,
		            0x500: 0x200000,
		            0x600: 0x200008,
		            0x700: 0x10000000,
		            0x800: 0x0,
		            0x900: 0x10002008,
		            0xa00: 0x202000,
		            0xb00: 0x8,
		            0xc00: 0x10200008,
		            0xd00: 0x202008,
		            0xe00: 0x2008,
		            0xf00: 0x10202000,
		            0x80: 0x10200000,
		            0x180: 0x10202008,
		            0x280: 0x8,
		            0x380: 0x200000,
		            0x480: 0x202008,
		            0x580: 0x10000008,
		            0x680: 0x10002000,
		            0x780: 0x2008,
		            0x880: 0x200008,
		            0x980: 0x2000,
		            0xa80: 0x10002008,
		            0xb80: 0x10200008,
		            0xc80: 0x0,
		            0xd80: 0x10202000,
		            0xe80: 0x202000,
		            0xf80: 0x10000000,
		            0x1000: 0x10002000,
		            0x1100: 0x10200008,
		            0x1200: 0x10202008,
		            0x1300: 0x2008,
		            0x1400: 0x200000,
		            0x1500: 0x10000000,
		            0x1600: 0x10000008,
		            0x1700: 0x202000,
		            0x1800: 0x202008,
		            0x1900: 0x0,
		            0x1a00: 0x8,
		            0x1b00: 0x10200000,
		            0x1c00: 0x2000,
		            0x1d00: 0x10002008,
		            0x1e00: 0x10202000,
		            0x1f00: 0x200008,
		            0x1080: 0x8,
		            0x1180: 0x202000,
		            0x1280: 0x200000,
		            0x1380: 0x10000008,
		            0x1480: 0x10002000,
		            0x1580: 0x2008,
		            0x1680: 0x10202008,
		            0x1780: 0x10200000,
		            0x1880: 0x10202000,
		            0x1980: 0x10200008,
		            0x1a80: 0x2000,
		            0x1b80: 0x202008,
		            0x1c80: 0x200008,
		            0x1d80: 0x0,
		            0x1e80: 0x10000000,
		            0x1f80: 0x10002008
		        },
		        {
		            0x0: 0x100000,
		            0x10: 0x2000401,
		            0x20: 0x400,
		            0x30: 0x100401,
		            0x40: 0x2100401,
		            0x50: 0x0,
		            0x60: 0x1,
		            0x70: 0x2100001,
		            0x80: 0x2000400,
		            0x90: 0x100001,
		            0xa0: 0x2000001,
		            0xb0: 0x2100400,
		            0xc0: 0x2100000,
		            0xd0: 0x401,
		            0xe0: 0x100400,
		            0xf0: 0x2000000,
		            0x8: 0x2100001,
		            0x18: 0x0,
		            0x28: 0x2000401,
		            0x38: 0x2100400,
		            0x48: 0x100000,
		            0x58: 0x2000001,
		            0x68: 0x2000000,
		            0x78: 0x401,
		            0x88: 0x100401,
		            0x98: 0x2000400,
		            0xa8: 0x2100000,
		            0xb8: 0x100001,
		            0xc8: 0x400,
		            0xd8: 0x2100401,
		            0xe8: 0x1,
		            0xf8: 0x100400,
		            0x100: 0x2000000,
		            0x110: 0x100000,
		            0x120: 0x2000401,
		            0x130: 0x2100001,
		            0x140: 0x100001,
		            0x150: 0x2000400,
		            0x160: 0x2100400,
		            0x170: 0x100401,
		            0x180: 0x401,
		            0x190: 0x2100401,
		            0x1a0: 0x100400,
		            0x1b0: 0x1,
		            0x1c0: 0x0,
		            0x1d0: 0x2100000,
		            0x1e0: 0x2000001,
		            0x1f0: 0x400,
		            0x108: 0x100400,
		            0x118: 0x2000401,
		            0x128: 0x2100001,
		            0x138: 0x1,
		            0x148: 0x2000000,
		            0x158: 0x100000,
		            0x168: 0x401,
		            0x178: 0x2100400,
		            0x188: 0x2000001,
		            0x198: 0x2100000,
		            0x1a8: 0x0,
		            0x1b8: 0x2100401,
		            0x1c8: 0x100401,
		            0x1d8: 0x400,
		            0x1e8: 0x2000400,
		            0x1f8: 0x100001
		        },
		        {
		            0x0: 0x8000820,
		            0x1: 0x20000,
		            0x2: 0x8000000,
		            0x3: 0x20,
		            0x4: 0x20020,
		            0x5: 0x8020820,
		            0x6: 0x8020800,
		            0x7: 0x800,
		            0x8: 0x8020000,
		            0x9: 0x8000800,
		            0xa: 0x20800,
		            0xb: 0x8020020,
		            0xc: 0x820,
		            0xd: 0x0,
		            0xe: 0x8000020,
		            0xf: 0x20820,
		            0x80000000: 0x800,
		            0x80000001: 0x8020820,
		            0x80000002: 0x8000820,
		            0x80000003: 0x8000000,
		            0x80000004: 0x8020000,
		            0x80000005: 0x20800,
		            0x80000006: 0x20820,
		            0x80000007: 0x20,
		            0x80000008: 0x8000020,
		            0x80000009: 0x820,
		            0x8000000a: 0x20020,
		            0x8000000b: 0x8020800,
		            0x8000000c: 0x0,
		            0x8000000d: 0x8020020,
		            0x8000000e: 0x8000800,
		            0x8000000f: 0x20000,
		            0x10: 0x20820,
		            0x11: 0x8020800,
		            0x12: 0x20,
		            0x13: 0x800,
		            0x14: 0x8000800,
		            0x15: 0x8000020,
		            0x16: 0x8020020,
		            0x17: 0x20000,
		            0x18: 0x0,
		            0x19: 0x20020,
		            0x1a: 0x8020000,
		            0x1b: 0x8000820,
		            0x1c: 0x8020820,
		            0x1d: 0x20800,
		            0x1e: 0x820,
		            0x1f: 0x8000000,
		            0x80000010: 0x20000,
		            0x80000011: 0x800,
		            0x80000012: 0x8020020,
		            0x80000013: 0x20820,
		            0x80000014: 0x20,
		            0x80000015: 0x8020000,
		            0x80000016: 0x8000000,
		            0x80000017: 0x8000820,
		            0x80000018: 0x8020820,
		            0x80000019: 0x8000020,
		            0x8000001a: 0x8000800,
		            0x8000001b: 0x0,
		            0x8000001c: 0x20800,
		            0x8000001d: 0x820,
		            0x8000001e: 0x20020,
		            0x8000001f: 0x8020800
		        }
		    ];

		    // Masks that select the SBOX input
		    var SBOX_MASK = [
		        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
		        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
		    ];

		    /**
		     * DES block cipher algorithm.
		     */
		    var DES = C_algo.DES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;

		            // Select 56 bits according to PC1
		            var keyBits = [];
		            for (var i = 0; i < 56; i++) {
		                var keyBitPos = PC1[i] - 1;
		                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
		            }

		            // Assemble 16 subkeys
		            var subKeys = this._subKeys = [];
		            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
		                // Create subkey
		                var subKey = subKeys[nSubKey] = [];

		                // Shortcut
		                var bitShift = BIT_SHIFTS[nSubKey];

		                // Select 48 bits according to PC2
		                for (var i = 0; i < 24; i++) {
		                    // Select from the left 28 key bits
		                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

		                    // Select from the right 28 key bits
		                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
		                }

		                // Since each subkey is applied to an expanded 32-bit input,
		                // the subkey can be broken into 8 values scaled to 32-bits,
		                // which allows the key to be used without expansion
		                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
		                for (var i = 1; i < 7; i++) {
		                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
		                }
		                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
		            }

		            // Compute inverse subkeys
		            var invSubKeys = this._invSubKeys = [];
		            for (var i = 0; i < 16; i++) {
		                invSubKeys[i] = subKeys[15 - i];
		            }
		        },

		        encryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._subKeys);
		        },

		        decryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._invSubKeys);
		        },

		        _doCryptBlock: function (M, offset, subKeys) {
		            // Get input
		            this._lBlock = M[offset];
		            this._rBlock = M[offset + 1];

		            // Initial permutation
		            exchangeLR.call(this, 4,  0x0f0f0f0f);
		            exchangeLR.call(this, 16, 0x0000ffff);
		            exchangeRL.call(this, 2,  0x33333333);
		            exchangeRL.call(this, 8,  0x00ff00ff);
		            exchangeLR.call(this, 1,  0x55555555);

		            // Rounds
		            for (var round = 0; round < 16; round++) {
		                // Shortcuts
		                var subKey = subKeys[round];
		                var lBlock = this._lBlock;
		                var rBlock = this._rBlock;

		                // Feistel function
		                var f = 0;
		                for (var i = 0; i < 8; i++) {
		                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
		                }
		                this._lBlock = rBlock;
		                this._rBlock = lBlock ^ f;
		            }

		            // Undo swap from last round
		            var t = this._lBlock;
		            this._lBlock = this._rBlock;
		            this._rBlock = t;

		            // Final permutation
		            exchangeLR.call(this, 1,  0x55555555);
		            exchangeRL.call(this, 8,  0x00ff00ff);
		            exchangeRL.call(this, 2,  0x33333333);
		            exchangeLR.call(this, 16, 0x0000ffff);
		            exchangeLR.call(this, 4,  0x0f0f0f0f);

		            // Set output
		            M[offset] = this._lBlock;
		            M[offset + 1] = this._rBlock;
		        },

		        keySize: 64/32,

		        ivSize: 64/32,

		        blockSize: 64/32
		    });

		    // Swap bits across the left and right words
		    function exchangeLR(offset, mask) {
		        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
		        this._rBlock ^= t;
		        this._lBlock ^= t << offset;
		    }

		    function exchangeRL(offset, mask) {
		        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
		        this._lBlock ^= t;
		        this._rBlock ^= t << offset;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
		     */
		    C.DES = BlockCipher._createHelper(DES);

		    /**
		     * Triple-DES block cipher algorithm.
		     */
		    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;

		            // Create DES instances
		            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
		            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
		            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
		        },

		        encryptBlock: function (M, offset) {
		            this._des1.encryptBlock(M, offset);
		            this._des2.decryptBlock(M, offset);
		            this._des3.encryptBlock(M, offset);
		        },

		        decryptBlock: function (M, offset) {
		            this._des3.decryptBlock(M, offset);
		            this._des2.encryptBlock(M, offset);
		            this._des1.decryptBlock(M, offset);
		        },

		        keySize: 192/32,

		        ivSize: 64/32,

		        blockSize: 64/32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
		     */
		    C.TripleDES = BlockCipher._createHelper(TripleDES);
		}());


		return CryptoJS.TripleDES;

	}));

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(global, process) {/*!
	    localForage -- Offline Storage, Improved
	    Version 1.3.1
	    https://mozilla.github.io/localForage
	    (c) 2013-2015 Mozilla, Apache License 2.0
	*/
	(function() {
	var define, requireModule, require, requirejs;

	(function() {
	  var registry = {}, seen = {};

	  define = function(name, deps, callback) {
	    registry[name] = { deps: deps, callback: callback };
	  };

	  requirejs = require = requireModule = function(name) {
	  requirejs._eak_seen = registry;

	    if (seen[name]) { return seen[name]; }
	    seen[name] = {};

	    if (!registry[name]) {
	      throw new Error("Could not find module " + name);
	    }

	    var mod = registry[name],
	        deps = mod.deps,
	        callback = mod.callback,
	        reified = [],
	        exports;

	    for (var i=0, l=deps.length; i<l; i++) {
	      if (deps[i] === 'exports') {
	        reified.push(exports = {});
	      } else {
	        reified.push(requireModule(resolve(deps[i])));
	      }
	    }

	    var value = callback.apply(this, reified);
	    return seen[name] = exports || value;

	    function resolve(child) {
	      if (child.charAt(0) !== '.') { return child; }
	      var parts = child.split("/");
	      var parentBase = name.split("/").slice(0, -1);

	      for (var i=0, l=parts.length; i<l; i++) {
	        var part = parts[i];

	        if (part === '..') { parentBase.pop(); }
	        else if (part === '.') { continue; }
	        else { parentBase.push(part); }
	      }

	      return parentBase.join("/");
	    }
	  };
	})();

	define("promise/all", 
	  ["./utils","exports"],
	  function(__dependency1__, __exports__) {
	    "use strict";
	    /* global toString */

	    var isArray = __dependency1__.isArray;
	    var isFunction = __dependency1__.isFunction;

	    /**
	      Returns a promise that is fulfilled when all the given promises have been
	      fulfilled, or rejected if any of them become rejected. The return promise
	      is fulfilled with an array that gives all the values in the order they were
	      passed in the `promises` array argument.

	      Example:

	      ```javascript
	      var promise1 = RSVP.resolve(1);
	      var promise2 = RSVP.resolve(2);
	      var promise3 = RSVP.resolve(3);
	      var promises = [ promise1, promise2, promise3 ];

	      RSVP.all(promises).then(function(array){
	        // The array here would be [ 1, 2, 3 ];
	      });
	      ```

	      If any of the `promises` given to `RSVP.all` are rejected, the first promise
	      that is rejected will be given as an argument to the returned promises's
	      rejection handler. For example:

	      Example:

	      ```javascript
	      var promise1 = RSVP.resolve(1);
	      var promise2 = RSVP.reject(new Error("2"));
	      var promise3 = RSVP.reject(new Error("3"));
	      var promises = [ promise1, promise2, promise3 ];

	      RSVP.all(promises).then(function(array){
	        // Code here never runs because there are rejected promises!
	      }, function(error) {
	        // error.message === "2"
	      });
	      ```

	      @method all
	      @for RSVP
	      @param {Array} promises
	      @param {String} label
	      @return {Promise} promise that is fulfilled when all `promises` have been
	      fulfilled, or rejected if any of them become rejected.
	    */
	    function all(promises) {
	      /*jshint validthis:true */
	      var Promise = this;

	      if (!isArray(promises)) {
	        throw new TypeError('You must pass an array to all.');
	      }

	      return new Promise(function(resolve, reject) {
	        var results = [], remaining = promises.length,
	        promise;

	        if (remaining === 0) {
	          resolve([]);
	        }

	        function resolver(index) {
	          return function(value) {
	            resolveAll(index, value);
	          };
	        }

	        function resolveAll(index, value) {
	          results[index] = value;
	          if (--remaining === 0) {
	            resolve(results);
	          }
	        }

	        for (var i = 0; i < promises.length; i++) {
	          promise = promises[i];

	          if (promise && isFunction(promise.then)) {
	            promise.then(resolver(i), reject);
	          } else {
	            resolveAll(i, promise);
	          }
	        }
	      });
	    }

	    __exports__.all = all;
	  });
	define("promise/asap", 
	  ["exports"],
	  function(__exports__) {
	    "use strict";
	    var browserGlobal = (typeof window !== 'undefined') ? window : {};
	    var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	    var local = (typeof global !== 'undefined') ? global : (this === undefined? window:this);

	    // node
	    function useNextTick() {
	      return function() {
	        process.nextTick(flush);
	      };
	    }

	    function useMutationObserver() {
	      var iterations = 0;
	      var observer = new BrowserMutationObserver(flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });

	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }

	    function useSetTimeout() {
	      return function() {
	        local.setTimeout(flush, 1);
	      };
	    }

	    var queue = [];
	    function flush() {
	      for (var i = 0; i < queue.length; i++) {
	        var tuple = queue[i];
	        var callback = tuple[0], arg = tuple[1];
	        callback(arg);
	      }
	      queue = [];
	    }

	    var scheduleFlush;

	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
	      scheduleFlush = useNextTick();
	    } else if (BrowserMutationObserver) {
	      scheduleFlush = useMutationObserver();
	    } else {
	      scheduleFlush = useSetTimeout();
	    }

	    function asap(callback, arg) {
	      var length = queue.push([callback, arg]);
	      if (length === 1) {
	        // If length is 1, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        scheduleFlush();
	      }
	    }

	    __exports__.asap = asap;
	  });
	define("promise/config", 
	  ["exports"],
	  function(__exports__) {
	    "use strict";
	    var config = {
	      instrument: false
	    };

	    function configure(name, value) {
	      if (arguments.length === 2) {
	        config[name] = value;
	      } else {
	        return config[name];
	      }
	    }

	    __exports__.config = config;
	    __exports__.configure = configure;
	  });
	define("promise/polyfill", 
	  ["./promise","./utils","exports"],
	  function(__dependency1__, __dependency2__, __exports__) {
	    "use strict";
	    /*global self*/
	    var RSVPPromise = __dependency1__.Promise;
	    var isFunction = __dependency2__.isFunction;

	    function polyfill() {
	      var local;

	      if (typeof global !== 'undefined') {
	        local = global;
	      } else if (typeof window !== 'undefined' && window.document) {
	        local = window;
	      } else {
	        local = self;
	      }

	      var es6PromiseSupport = 
	        "Promise" in local &&
	        // Some of these methods are missing from
	        // Firefox/Chrome experimental implementations
	        "resolve" in local.Promise &&
	        "reject" in local.Promise &&
	        "all" in local.Promise &&
	        "race" in local.Promise &&
	        // Older version of the spec had a resolver object
	        // as the arg rather than a function
	        (function() {
	          var resolve;
	          new local.Promise(function(r) { resolve = r; });
	          return isFunction(resolve);
	        }());

	      if (!es6PromiseSupport) {
	        local.Promise = RSVPPromise;
	      }
	    }

	    __exports__.polyfill = polyfill;
	  });
	define("promise/promise", 
	  ["./config","./utils","./all","./race","./resolve","./reject","./asap","exports"],
	  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {
	    "use strict";
	    var config = __dependency1__.config;
	    var configure = __dependency1__.configure;
	    var objectOrFunction = __dependency2__.objectOrFunction;
	    var isFunction = __dependency2__.isFunction;
	    var now = __dependency2__.now;
	    var all = __dependency3__.all;
	    var race = __dependency4__.race;
	    var staticResolve = __dependency5__.resolve;
	    var staticReject = __dependency6__.reject;
	    var asap = __dependency7__.asap;

	    var counter = 0;

	    config.async = asap; // default async is asap;

	    function Promise(resolver) {
	      if (!isFunction(resolver)) {
	        throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	      }

	      if (!(this instanceof Promise)) {
	        throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	      }

	      this._subscribers = [];

	      invokeResolver(resolver, this);
	    }

	    function invokeResolver(resolver, promise) {
	      function resolvePromise(value) {
	        resolve(promise, value);
	      }

	      function rejectPromise(reason) {
	        reject(promise, reason);
	      }

	      try {
	        resolver(resolvePromise, rejectPromise);
	      } catch(e) {
	        rejectPromise(e);
	      }
	    }

	    function invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = isFunction(callback),
	          value, error, succeeded, failed;

	      if (hasCallback) {
	        try {
	          value = callback(detail);
	          succeeded = true;
	        } catch(e) {
	          failed = true;
	          error = e;
	        }
	      } else {
	        value = detail;
	        succeeded = true;
	      }

	      if (handleThenable(promise, value)) {
	        return;
	      } else if (hasCallback && succeeded) {
	        resolve(promise, value);
	      } else if (failed) {
	        reject(promise, error);
	      } else if (settled === FULFILLED) {
	        resolve(promise, value);
	      } else if (settled === REJECTED) {
	        reject(promise, value);
	      }
	    }

	    var PENDING   = void 0;
	    var SEALED    = 0;
	    var FULFILLED = 1;
	    var REJECTED  = 2;

	    function subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;

	      subscribers[length] = child;
	      subscribers[length + FULFILLED] = onFulfillment;
	      subscribers[length + REJECTED]  = onRejection;
	    }

	    function publish(promise, settled) {
	      var child, callback, subscribers = promise._subscribers, detail = promise._detail;

	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];

	        invokeCallback(settled, child, callback, detail);
	      }

	      promise._subscribers = null;
	    }

	    Promise.prototype = {
	      constructor: Promise,

	      _state: undefined,
	      _detail: undefined,
	      _subscribers: undefined,

	      then: function(onFulfillment, onRejection) {
	        var promise = this;

	        var thenPromise = new this.constructor(function() {});

	        if (this._state) {
	          var callbacks = arguments;
	          config.async(function invokePromiseCallback() {
	            invokeCallback(promise._state, thenPromise, callbacks[promise._state - 1], promise._detail);
	          });
	        } else {
	          subscribe(this, thenPromise, onFulfillment, onRejection);
	        }

	        return thenPromise;
	      },

	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };

	    Promise.all = all;
	    Promise.race = race;
	    Promise.resolve = staticResolve;
	    Promise.reject = staticReject;

	    function handleThenable(promise, value) {
	      var then = null,
	      resolved;

	      try {
	        if (promise === value) {
	          throw new TypeError("A promises callback cannot return that same promise.");
	        }

	        if (objectOrFunction(value)) {
	          then = value.then;

	          if (isFunction(then)) {
	            then.call(value, function(val) {
	              if (resolved) { return true; }
	              resolved = true;

	              if (value !== val) {
	                resolve(promise, val);
	              } else {
	                fulfill(promise, val);
	              }
	            }, function(val) {
	              if (resolved) { return true; }
	              resolved = true;

	              reject(promise, val);
	            });

	            return true;
	          }
	        }
	      } catch (error) {
	        if (resolved) { return true; }
	        reject(promise, error);
	        return true;
	      }

	      return false;
	    }

	    function resolve(promise, value) {
	      if (promise === value) {
	        fulfill(promise, value);
	      } else if (!handleThenable(promise, value)) {
	        fulfill(promise, value);
	      }
	    }

	    function fulfill(promise, value) {
	      if (promise._state !== PENDING) { return; }
	      promise._state = SEALED;
	      promise._detail = value;

	      config.async(publishFulfillment, promise);
	    }

	    function reject(promise, reason) {
	      if (promise._state !== PENDING) { return; }
	      promise._state = SEALED;
	      promise._detail = reason;

	      config.async(publishRejection, promise);
	    }

	    function publishFulfillment(promise) {
	      publish(promise, promise._state = FULFILLED);
	    }

	    function publishRejection(promise) {
	      publish(promise, promise._state = REJECTED);
	    }

	    __exports__.Promise = Promise;
	  });
	define("promise/race", 
	  ["./utils","exports"],
	  function(__dependency1__, __exports__) {
	    "use strict";
	    /* global toString */
	    var isArray = __dependency1__.isArray;

	    /**
	      `RSVP.race` allows you to watch a series of promises and act as soon as the
	      first promise given to the `promises` argument fulfills or rejects.

	      Example:

	      ```javascript
	      var promise1 = new RSVP.Promise(function(resolve, reject){
	        setTimeout(function(){
	          resolve("promise 1");
	        }, 200);
	      });

	      var promise2 = new RSVP.Promise(function(resolve, reject){
	        setTimeout(function(){
	          resolve("promise 2");
	        }, 100);
	      });

	      RSVP.race([promise1, promise2]).then(function(result){
	        // result === "promise 2" because it was resolved before promise1
	        // was resolved.
	      });
	      ```

	      `RSVP.race` is deterministic in that only the state of the first completed
	      promise matters. For example, even if other promises given to the `promises`
	      array argument are resolved, but the first completed promise has become
	      rejected before the other promises became fulfilled, the returned promise
	      will become rejected:

	      ```javascript
	      var promise1 = new RSVP.Promise(function(resolve, reject){
	        setTimeout(function(){
	          resolve("promise 1");
	        }, 200);
	      });

	      var promise2 = new RSVP.Promise(function(resolve, reject){
	        setTimeout(function(){
	          reject(new Error("promise 2"));
	        }, 100);
	      });

	      RSVP.race([promise1, promise2]).then(function(result){
	        // Code here never runs because there are rejected promises!
	      }, function(reason){
	        // reason.message === "promise2" because promise 2 became rejected before
	        // promise 1 became fulfilled
	      });
	      ```

	      @method race
	      @for RSVP
	      @param {Array} promises array of promises to observe
	      @param {String} label optional string for describing the promise returned.
	      Useful for tooling.
	      @return {Promise} a promise that becomes fulfilled with the value the first
	      completed promises is resolved with if the first completed promise was
	      fulfilled, or rejected with the reason that the first completed promise
	      was rejected with.
	    */
	    function race(promises) {
	      /*jshint validthis:true */
	      var Promise = this;

	      if (!isArray(promises)) {
	        throw new TypeError('You must pass an array to race.');
	      }
	      return new Promise(function(resolve, reject) {
	        var results = [], promise;

	        for (var i = 0; i < promises.length; i++) {
	          promise = promises[i];

	          if (promise && typeof promise.then === 'function') {
	            promise.then(resolve, reject);
	          } else {
	            resolve(promise);
	          }
	        }
	      });
	    }

	    __exports__.race = race;
	  });
	define("promise/reject", 
	  ["exports"],
	  function(__exports__) {
	    "use strict";
	    /**
	      `RSVP.reject` returns a promise that will become rejected with the passed
	      `reason`. `RSVP.reject` is essentially shorthand for the following:

	      ```javascript
	      var promise = new RSVP.Promise(function(resolve, reject){
	        reject(new Error('WHOOPS'));
	      });

	      promise.then(function(value){
	        // Code here doesn't run because the promise is rejected!
	      }, function(reason){
	        // reason.message === 'WHOOPS'
	      });
	      ```

	      Instead of writing the above, your code now simply becomes the following:

	      ```javascript
	      var promise = RSVP.reject(new Error('WHOOPS'));

	      promise.then(function(value){
	        // Code here doesn't run because the promise is rejected!
	      }, function(reason){
	        // reason.message === 'WHOOPS'
	      });
	      ```

	      @method reject
	      @for RSVP
	      @param {Any} reason value that the returned promise will be rejected with.
	      @param {String} label optional string for identifying the returned promise.
	      Useful for tooling.
	      @return {Promise} a promise that will become rejected with the given
	      `reason`.
	    */
	    function reject(reason) {
	      /*jshint validthis:true */
	      var Promise = this;

	      return new Promise(function (resolve, reject) {
	        reject(reason);
	      });
	    }

	    __exports__.reject = reject;
	  });
	define("promise/resolve", 
	  ["exports"],
	  function(__exports__) {
	    "use strict";
	    function resolve(value) {
	      /*jshint validthis:true */
	      if (value && typeof value === 'object' && value.constructor === this) {
	        return value;
	      }

	      var Promise = this;

	      return new Promise(function(resolve) {
	        resolve(value);
	      });
	    }

	    __exports__.resolve = resolve;
	  });
	define("promise/utils", 
	  ["exports"],
	  function(__exports__) {
	    "use strict";
	    function objectOrFunction(x) {
	      return isFunction(x) || (typeof x === "object" && x !== null);
	    }

	    function isFunction(x) {
	      return typeof x === "function";
	    }

	    function isArray(x) {
	      return Object.prototype.toString.call(x) === "[object Array]";
	    }

	    // Date.now is not available in browsers < IE9
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility
	    var now = Date.now || function() { return new Date().getTime(); };


	    __exports__.objectOrFunction = objectOrFunction;
	    __exports__.isFunction = isFunction;
	    __exports__.isArray = isArray;
	    __exports__.now = now;
	  });
	requireModule('promise/polyfill').polyfill();
	}());(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["localforage"] = factory();
		else
			root["localforage"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		(function () {
		    'use strict';

		    // Custom drivers are stored here when `defineDriver()` is called.
		    // They are shared across all instances of localForage.
		    var CustomDrivers = {};

		    var DriverType = {
		        INDEXEDDB: 'asyncStorage',
		        LOCALSTORAGE: 'localStorageWrapper',
		        WEBSQL: 'webSQLStorage'
		    };

		    var DefaultDriverOrder = [DriverType.INDEXEDDB, DriverType.WEBSQL, DriverType.LOCALSTORAGE];

		    var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];

		    var DefaultConfig = {
		        description: '',
		        driver: DefaultDriverOrder.slice(),
		        name: 'localforage',
		        // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
		        // we can use without a prompt.
		        size: 4980736,
		        storeName: 'keyvaluepairs',
		        version: 1.0
		    };

		    // Check to see if IndexedDB is available and if it is the latest
		    // implementation; it's our preferred backend library. We use "_spec_test"
		    // as the name of the database because it's not the one we'll operate on,
		    // but it's useful to make sure its using the right spec.
		    // See: https://github.com/mozilla/localForage/issues/128
		    var driverSupport = (function (self) {
		        // Initialize IndexedDB; fall back to vendor-prefixed versions
		        // if needed.
		        var indexedDB = indexedDB || self.indexedDB || self.webkitIndexedDB || self.mozIndexedDB || self.OIndexedDB || self.msIndexedDB;

		        var result = {};

		        result[DriverType.WEBSQL] = !!self.openDatabase;
		        result[DriverType.INDEXEDDB] = !!(function () {
		            // We mimic PouchDB here; just UA test for Safari (which, as of
		            // iOS 8/Yosemite, doesn't properly support IndexedDB).
		            // IndexedDB support is broken and different from Blink's.
		            // This is faster than the test case (and it's sync), so we just
		            // do this. *SIGH*
		            // http://bl.ocks.org/nolanlawson/raw/c83e9039edf2278047e9/
		            //
		            // We test for openDatabase because IE Mobile identifies itself
		            // as Safari. Oh the lulz...
		            if (typeof self.openDatabase !== 'undefined' && self.navigator && self.navigator.userAgent && /Safari/.test(self.navigator.userAgent) && !/Chrome/.test(self.navigator.userAgent)) {
		                return false;
		            }
		            try {
		                return indexedDB && typeof indexedDB.open === 'function' &&
		                // Some Samsung/HTC Android 4.0-4.3 devices
		                // have older IndexedDB specs; if this isn't available
		                // their IndexedDB is too old for us to use.
		                // (Replaces the onupgradeneeded test.)
		                typeof self.IDBKeyRange !== 'undefined';
		            } catch (e) {
		                return false;
		            }
		        })();

		        result[DriverType.LOCALSTORAGE] = !!(function () {
		            try {
		                return self.localStorage && 'setItem' in self.localStorage && self.localStorage.setItem;
		            } catch (e) {
		                return false;
		            }
		        })();

		        return result;
		    })(this);

		    var isArray = Array.isArray || function (arg) {
		        return Object.prototype.toString.call(arg) === '[object Array]';
		    };

		    function callWhenReady(localForageInstance, libraryMethod) {
		        localForageInstance[libraryMethod] = function () {
		            var _args = arguments;
		            return localForageInstance.ready().then(function () {
		                return localForageInstance[libraryMethod].apply(localForageInstance, _args);
		            });
		        };
		    }

		    function extend() {
		        for (var i = 1; i < arguments.length; i++) {
		            var arg = arguments[i];

		            if (arg) {
		                for (var key in arg) {
		                    if (arg.hasOwnProperty(key)) {
		                        if (isArray(arg[key])) {
		                            arguments[0][key] = arg[key].slice();
		                        } else {
		                            arguments[0][key] = arg[key];
		                        }
		                    }
		                }
		            }
		        }

		        return arguments[0];
		    }

		    function isLibraryDriver(driverName) {
		        for (var driver in DriverType) {
		            if (DriverType.hasOwnProperty(driver) && DriverType[driver] === driverName) {
		                return true;
		            }
		        }

		        return false;
		    }

		    var LocalForage = (function () {
		        function LocalForage(options) {
		            _classCallCheck(this, LocalForage);

		            this.INDEXEDDB = DriverType.INDEXEDDB;
		            this.LOCALSTORAGE = DriverType.LOCALSTORAGE;
		            this.WEBSQL = DriverType.WEBSQL;

		            this._defaultConfig = extend({}, DefaultConfig);
		            this._config = extend({}, this._defaultConfig, options);
		            this._driverSet = null;
		            this._initDriver = null;
		            this._ready = false;
		            this._dbInfo = null;

		            this._wrapLibraryMethodsWithReady();
		            this.setDriver(this._config.driver);
		        }

		        // The actual localForage object that we expose as a module or via a
		        // global. It's extended by pulling in one of our other libraries.

		        // Set any config values for localForage; can be called anytime before
		        // the first API call (e.g. `getItem`, `setItem`).
		        // We loop through options so we don't overwrite existing config
		        // values.

		        LocalForage.prototype.config = function config(options) {
		            // If the options argument is an object, we use it to set values.
		            // Otherwise, we return either a specified config value or all
		            // config values.
		            if (typeof options === 'object') {
		                // If localforage is ready and fully initialized, we can't set
		                // any new configuration values. Instead, we return an error.
		                if (this._ready) {
		                    return new Error("Can't call config() after localforage " + 'has been used.');
		                }

		                for (var i in options) {
		                    if (i === 'storeName') {
		                        options[i] = options[i].replace(/\W/g, '_');
		                    }

		                    this._config[i] = options[i];
		                }

		                // after all config options are set and
		                // the driver option is used, try setting it
		                if ('driver' in options && options.driver) {
		                    this.setDriver(this._config.driver);
		                }

		                return true;
		            } else if (typeof options === 'string') {
		                return this._config[options];
		            } else {
		                return this._config;
		            }
		        };

		        // Used to define a custom driver, shared across all instances of
		        // localForage.

		        LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
		            var promise = new Promise(function (resolve, reject) {
		                try {
		                    var driverName = driverObject._driver;
		                    var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');
		                    var namingError = new Error('Custom driver name already in use: ' + driverObject._driver);

		                    // A driver name should be defined and not overlap with the
		                    // library-defined, default drivers.
		                    if (!driverObject._driver) {
		                        reject(complianceError);
		                        return;
		                    }
		                    if (isLibraryDriver(driverObject._driver)) {
		                        reject(namingError);
		                        return;
		                    }

		                    var customDriverMethods = LibraryMethods.concat('_initStorage');
		                    for (var i = 0; i < customDriverMethods.length; i++) {
		                        var customDriverMethod = customDriverMethods[i];
		                        if (!customDriverMethod || !driverObject[customDriverMethod] || typeof driverObject[customDriverMethod] !== 'function') {
		                            reject(complianceError);
		                            return;
		                        }
		                    }

		                    var supportPromise = Promise.resolve(true);
		                    if ('_support' in driverObject) {
		                        if (driverObject._support && typeof driverObject._support === 'function') {
		                            supportPromise = driverObject._support();
		                        } else {
		                            supportPromise = Promise.resolve(!!driverObject._support);
		                        }
		                    }

		                    supportPromise.then(function (supportResult) {
		                        driverSupport[driverName] = supportResult;
		                        CustomDrivers[driverName] = driverObject;
		                        resolve();
		                    }, reject);
		                } catch (e) {
		                    reject(e);
		                }
		            });

		            promise.then(callback, errorCallback);
		            return promise;
		        };

		        LocalForage.prototype.driver = function driver() {
		            return this._driver || null;
		        };

		        LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
		            var self = this;
		            var getDriverPromise = (function () {
		                if (isLibraryDriver(driverName)) {
		                    switch (driverName) {
		                        case self.INDEXEDDB:
		                            return new Promise(function (resolve, reject) {
		                                resolve(__webpack_require__(1));
		                            });
		                        case self.LOCALSTORAGE:
		                            return new Promise(function (resolve, reject) {
		                                resolve(__webpack_require__(2));
		                            });
		                        case self.WEBSQL:
		                            return new Promise(function (resolve, reject) {
		                                resolve(__webpack_require__(4));
		                            });
		                    }
		                } else if (CustomDrivers[driverName]) {
		                    return Promise.resolve(CustomDrivers[driverName]);
		                }

		                return Promise.reject(new Error('Driver not found.'));
		            })();

		            getDriverPromise.then(callback, errorCallback);
		            return getDriverPromise;
		        };

		        LocalForage.prototype.getSerializer = function getSerializer(callback) {
		            var serializerPromise = new Promise(function (resolve, reject) {
		                resolve(__webpack_require__(3));
		            });
		            if (callback && typeof callback === 'function') {
		                serializerPromise.then(function (result) {
		                    callback(result);
		                });
		            }
		            return serializerPromise;
		        };

		        LocalForage.prototype.ready = function ready(callback) {
		            var self = this;

		            var promise = self._driverSet.then(function () {
		                if (self._ready === null) {
		                    self._ready = self._initDriver();
		                }

		                return self._ready;
		            });

		            promise.then(callback, callback);
		            return promise;
		        };

		        LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
		            var self = this;

		            if (!isArray(drivers)) {
		                drivers = [drivers];
		            }

		            var supportedDrivers = this._getSupportedDrivers(drivers);

		            function setDriverToConfig() {
		                self._config.driver = self.driver();
		            }

		            function initDriver(supportedDrivers) {
		                return function () {
		                    var currentDriverIndex = 0;

		                    function driverPromiseLoop() {
		                        while (currentDriverIndex < supportedDrivers.length) {
		                            var driverName = supportedDrivers[currentDriverIndex];
		                            currentDriverIndex++;

		                            self._dbInfo = null;
		                            self._ready = null;

		                            return self.getDriver(driverName).then(function (driver) {
		                                self._extend(driver);
		                                setDriverToConfig();

		                                self._ready = self._initStorage(self._config);
		                                return self._ready;
		                            })['catch'](driverPromiseLoop);
		                        }

		                        setDriverToConfig();
		                        var error = new Error('No available storage method found.');
		                        self._driverSet = Promise.reject(error);
		                        return self._driverSet;
		                    }

		                    return driverPromiseLoop();
		                };
		            }

		            // There might be a driver initialization in progress
		            // so wait for it to finish in order to avoid a possible
		            // race condition to set _dbInfo
		            var oldDriverSetDone = this._driverSet !== null ? this._driverSet['catch'](function () {
		                return Promise.resolve();
		            }) : Promise.resolve();

		            this._driverSet = oldDriverSetDone.then(function () {
		                var driverName = supportedDrivers[0];
		                self._dbInfo = null;
		                self._ready = null;

		                return self.getDriver(driverName).then(function (driver) {
		                    self._driver = driver._driver;
		                    setDriverToConfig();
		                    self._wrapLibraryMethodsWithReady();
		                    self._initDriver = initDriver(supportedDrivers);
		                });
		            })['catch'](function () {
		                setDriverToConfig();
		                var error = new Error('No available storage method found.');
		                self._driverSet = Promise.reject(error);
		                return self._driverSet;
		            });

		            this._driverSet.then(callback, errorCallback);
		            return this._driverSet;
		        };

		        LocalForage.prototype.supports = function supports(driverName) {
		            return !!driverSupport[driverName];
		        };

		        LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
		            extend(this, libraryMethodsAndProperties);
		        };

		        LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
		            var supportedDrivers = [];
		            for (var i = 0, len = drivers.length; i < len; i++) {
		                var driverName = drivers[i];
		                if (this.supports(driverName)) {
		                    supportedDrivers.push(driverName);
		                }
		            }
		            return supportedDrivers;
		        };

		        LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
		            // Add a stub for each driver API method that delays the call to the
		            // corresponding driver method until localForage is ready. These stubs
		            // will be replaced by the driver methods as soon as the driver is
		            // loaded, so there is no performance impact.
		            for (var i = 0; i < LibraryMethods.length; i++) {
		                callWhenReady(this, LibraryMethods[i]);
		            }
		        };

		        LocalForage.prototype.createInstance = function createInstance(options) {
		            return new LocalForage(options);
		        };

		        return LocalForage;
		    })();

		    var localForage = new LocalForage();

		    exports['default'] = localForage;
		}).call(typeof window !== 'undefined' ? window : self);
		module.exports = exports['default'];

	/***/ },
	/* 1 */
	/***/ function(module, exports) {

		// Some code originally from async_storage.js in
		// [Gaia](https://github.com/mozilla-b2g/gaia).
		'use strict';

		exports.__esModule = true;
		(function () {
		    'use strict';

		    var globalObject = this;
		    // Initialize IndexedDB; fall back to vendor-prefixed versions if needed.
		    var indexedDB = indexedDB || this.indexedDB || this.webkitIndexedDB || this.mozIndexedDB || this.OIndexedDB || this.msIndexedDB;

		    // If IndexedDB isn't available, we get outta here!
		    if (!indexedDB) {
		        return;
		    }

		    var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
		    var supportsBlobs;
		    var dbContexts;

		    // Abstracts constructing a Blob object, so it also works in older
		    // browsers that don't support the native Blob constructor. (i.e.
		    // old QtWebKit versions, at least).
		    function _createBlob(parts, properties) {
		        parts = parts || [];
		        properties = properties || {};
		        try {
		            return new Blob(parts, properties);
		        } catch (e) {
		            if (e.name !== 'TypeError') {
		                throw e;
		            }
		            var BlobBuilder = globalObject.BlobBuilder || globalObject.MSBlobBuilder || globalObject.MozBlobBuilder || globalObject.WebKitBlobBuilder;
		            var builder = new BlobBuilder();
		            for (var i = 0; i < parts.length; i += 1) {
		                builder.append(parts[i]);
		            }
		            return builder.getBlob(properties.type);
		        }
		    }

		    // Transform a binary string to an array buffer, because otherwise
		    // weird stuff happens when you try to work with the binary string directly.
		    // It is known.
		    // From http://stackoverflow.com/questions/14967647/ (continues on next line)
		    // encode-decode-image-with-base64-breaks-image (2013-04-21)
		    function _binStringToArrayBuffer(bin) {
		        var length = bin.length;
		        var buf = new ArrayBuffer(length);
		        var arr = new Uint8Array(buf);
		        for (var i = 0; i < length; i++) {
		            arr[i] = bin.charCodeAt(i);
		        }
		        return buf;
		    }

		    // Fetch a blob using ajax. This reveals bugs in Chrome < 43.
		    // For details on all this junk:
		    // https://github.com/nolanlawson/state-of-binary-data-in-the-browser#readme
		    function _blobAjax(url) {
		        return new Promise(function (resolve, reject) {
		            var xhr = new XMLHttpRequest();
		            xhr.open('GET', url);
		            xhr.withCredentials = true;
		            xhr.responseType = 'arraybuffer';

		            xhr.onreadystatechange = function () {
		                if (xhr.readyState !== 4) {
		                    return;
		                }
		                if (xhr.status === 200) {
		                    return resolve({
		                        response: xhr.response,
		                        type: xhr.getResponseHeader('Content-Type')
		                    });
		                }
		                reject({ status: xhr.status, response: xhr.response });
		            };
		            xhr.send();
		        });
		    }

		    //
		    // Detect blob support. Chrome didn't support it until version 38.
		    // In version 37 they had a broken version where PNGs (and possibly
		    // other binary types) aren't stored correctly, because when you fetch
		    // them, the content type is always null.
		    //
		    // Furthermore, they have some outstanding bugs where blobs occasionally
		    // are read by FileReader as null, or by ajax as 404s.
		    //
		    // Sadly we use the 404 bug to detect the FileReader bug, so if they
		    // get fixed independently and released in different versions of Chrome,
		    // then the bug could come back. So it's worthwhile to watch these issues:
		    // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
		    // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
		    //
		    function _checkBlobSupportWithoutCaching(idb) {
		        return new Promise(function (resolve, reject) {
		            var blob = _createBlob([''], { type: 'image/png' });
		            var txn = idb.transaction([DETECT_BLOB_SUPPORT_STORE], 'readwrite');
		            txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');
		            txn.oncomplete = function () {
		                // have to do it in a separate transaction, else the correct
		                // content type is always returned
		                var blobTxn = idb.transaction([DETECT_BLOB_SUPPORT_STORE], 'readwrite');
		                var getBlobReq = blobTxn.objectStore(DETECT_BLOB_SUPPORT_STORE).get('key');
		                getBlobReq.onerror = reject;
		                getBlobReq.onsuccess = function (e) {

		                    var storedBlob = e.target.result;
		                    var url = URL.createObjectURL(storedBlob);

		                    _blobAjax(url).then(function (res) {
		                        resolve(!!(res && res.type === 'image/png'));
		                    }, function () {
		                        resolve(false);
		                    }).then(function () {
		                        URL.revokeObjectURL(url);
		                    });
		                };
		            };
		        })['catch'](function () {
		            return false; // error, so assume unsupported
		        });
		    }

		    function _checkBlobSupport(idb) {
		        if (typeof supportsBlobs === 'boolean') {
		            return Promise.resolve(supportsBlobs);
		        }
		        return _checkBlobSupportWithoutCaching(idb).then(function (value) {
		            supportsBlobs = value;
		            return supportsBlobs;
		        });
		    }

		    // encode a blob for indexeddb engines that don't support blobs
		    function _encodeBlob(blob) {
		        return new Promise(function (resolve, reject) {
		            var reader = new FileReader();
		            reader.onerror = reject;
		            reader.onloadend = function (e) {
		                var base64 = btoa(e.target.result || '');
		                resolve({
		                    __local_forage_encoded_blob: true,
		                    data: base64,
		                    type: blob.type
		                });
		            };
		            reader.readAsBinaryString(blob);
		        });
		    }

		    // decode an encoded blob
		    function _decodeBlob(encodedBlob) {
		        var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
		        return _createBlob([arrayBuff], { type: encodedBlob.type });
		    }

		    // is this one of our fancy encoded blobs?
		    function _isEncodedBlob(value) {
		        return value && value.__local_forage_encoded_blob;
		    }

		    // Open the IndexedDB database (automatically creates one if one didn't
		    // previously exist), using any options set in the config.
		    function _initStorage(options) {
		        var self = this;
		        var dbInfo = {
		            db: null
		        };

		        if (options) {
		            for (var i in options) {
		                dbInfo[i] = options[i];
		            }
		        }

		        // Initialize a singleton container for all running localForages.
		        if (!dbContexts) {
		            dbContexts = {};
		        }

		        // Get the current context of the database;
		        var dbContext = dbContexts[dbInfo.name];

		        // ...or create a new context.
		        if (!dbContext) {
		            dbContext = {
		                // Running localForages sharing a database.
		                forages: [],
		                // Shared database.
		                db: null
		            };
		            // Register the new context in the global container.
		            dbContexts[dbInfo.name] = dbContext;
		        }

		        // Register itself as a running localForage in the current context.
		        dbContext.forages.push(this);

		        // Create an array of readiness of the related localForages.
		        var readyPromises = [];

		        function ignoreErrors() {
		            // Don't handle errors here,
		            // just makes sure related localForages aren't pending.
		            return Promise.resolve();
		        }

		        for (var j = 0; j < dbContext.forages.length; j++) {
		            var forage = dbContext.forages[j];
		            if (forage !== this) {
		                // Don't wait for itself...
		                readyPromises.push(forage.ready()['catch'](ignoreErrors));
		            }
		        }

		        // Take a snapshot of the related localForages.
		        var forages = dbContext.forages.slice(0);

		        // Initialize the connection process only when
		        // all the related localForages aren't pending.
		        return Promise.all(readyPromises).then(function () {
		            dbInfo.db = dbContext.db;
		            // Get the connection or open a new one without upgrade.
		            return _getOriginalConnection(dbInfo);
		        }).then(function (db) {
		            dbInfo.db = db;
		            if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
		                // Reopen the database for upgrading.
		                return _getUpgradedConnection(dbInfo);
		            }
		            return db;
		        }).then(function (db) {
		            dbInfo.db = dbContext.db = db;
		            self._dbInfo = dbInfo;
		            // Share the final connection amongst related localForages.
		            for (var k = 0; k < forages.length; k++) {
		                var forage = forages[k];
		                if (forage !== self) {
		                    // Self is already up-to-date.
		                    forage._dbInfo.db = dbInfo.db;
		                    forage._dbInfo.version = dbInfo.version;
		                }
		            }
		        });
		    }

		    function _getOriginalConnection(dbInfo) {
		        return _getConnection(dbInfo, false);
		    }

		    function _getUpgradedConnection(dbInfo) {
		        return _getConnection(dbInfo, true);
		    }

		    function _getConnection(dbInfo, upgradeNeeded) {
		        return new Promise(function (resolve, reject) {
		            if (dbInfo.db) {
		                if (upgradeNeeded) {
		                    dbInfo.db.close();
		                } else {
		                    return resolve(dbInfo.db);
		                }
		            }

		            var dbArgs = [dbInfo.name];

		            if (upgradeNeeded) {
		                dbArgs.push(dbInfo.version);
		            }

		            var openreq = indexedDB.open.apply(indexedDB, dbArgs);

		            if (upgradeNeeded) {
		                openreq.onupgradeneeded = function (e) {
		                    var db = openreq.result;
		                    try {
		                        db.createObjectStore(dbInfo.storeName);
		                        if (e.oldVersion <= 1) {
		                            // Added when support for blob shims was added
		                            db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
		                        }
		                    } catch (ex) {
		                        if (ex.name === 'ConstraintError') {
		                            globalObject.console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
		                        } else {
		                            throw ex;
		                        }
		                    }
		                };
		            }

		            openreq.onerror = function () {
		                reject(openreq.error);
		            };

		            openreq.onsuccess = function () {
		                resolve(openreq.result);
		            };
		        });
		    }

		    function _isUpgradeNeeded(dbInfo, defaultVersion) {
		        if (!dbInfo.db) {
		            return true;
		        }

		        var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
		        var isDowngrade = dbInfo.version < dbInfo.db.version;
		        var isUpgrade = dbInfo.version > dbInfo.db.version;

		        if (isDowngrade) {
		            // If the version is not the default one
		            // then warn for impossible downgrade.
		            if (dbInfo.version !== defaultVersion) {
		                globalObject.console.warn('The database "' + dbInfo.name + '"' + ' can\'t be downgraded from version ' + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
		            }
		            // Align the versions to prevent errors.
		            dbInfo.version = dbInfo.db.version;
		        }

		        if (isUpgrade || isNewStore) {
		            // If the store is new then increment the version (if needed).
		            // This will trigger an "upgradeneeded" event which is required
		            // for creating a store.
		            if (isNewStore) {
		                var incVersion = dbInfo.db.version + 1;
		                if (incVersion > dbInfo.version) {
		                    dbInfo.version = incVersion;
		                }
		            }

		            return true;
		        }

		        return false;
		    }

		    function getItem(key, callback) {
		        var self = this;

		        // Cast the key to a string, as that's all we can set as a key.
		        if (typeof key !== 'string') {
		            globalObject.console.warn(key + ' used as a key, but it is not a string.');
		            key = String(key);
		        }

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);
		                var req = store.get(key);

		                req.onsuccess = function () {
		                    var value = req.result;
		                    if (value === undefined) {
		                        value = null;
		                    }
		                    if (_isEncodedBlob(value)) {
		                        value = _decodeBlob(value);
		                    }
		                    resolve(value);
		                };

		                req.onerror = function () {
		                    reject(req.error);
		                };
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Iterate over all items stored in database.
		    function iterate(iterator, callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);

		                var req = store.openCursor();
		                var iterationNumber = 1;

		                req.onsuccess = function () {
		                    var cursor = req.result;

		                    if (cursor) {
		                        var value = cursor.value;
		                        if (_isEncodedBlob(value)) {
		                            value = _decodeBlob(value);
		                        }
		                        var result = iterator(value, cursor.key, iterationNumber++);

		                        if (result !== void 0) {
		                            resolve(result);
		                        } else {
		                            cursor['continue']();
		                        }
		                    } else {
		                        resolve();
		                    }
		                };

		                req.onerror = function () {
		                    reject(req.error);
		                };
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);

		        return promise;
		    }

		    function setItem(key, value, callback) {
		        var self = this;

		        // Cast the key to a string, as that's all we can set as a key.
		        if (typeof key !== 'string') {
		            globalObject.console.warn(key + ' used as a key, but it is not a string.');
		            key = String(key);
		        }

		        var promise = new Promise(function (resolve, reject) {
		            var dbInfo;
		            self.ready().then(function () {
		                dbInfo = self._dbInfo;
		                if (value instanceof Blob) {
		                    return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
		                        if (blobSupport) {
		                            return value;
		                        }
		                        return _encodeBlob(value);
		                    });
		                }
		                return value;
		            }).then(function (value) {
		                var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');
		                var store = transaction.objectStore(dbInfo.storeName);

		                // The reason we don't _save_ null is because IE 10 does
		                // not support saving the `null` type in IndexedDB. How
		                // ironic, given the bug below!
		                // See: https://github.com/mozilla/localForage/issues/161
		                if (value === null) {
		                    value = undefined;
		                }

		                var req = store.put(value, key);
		                transaction.oncomplete = function () {
		                    // Cast to undefined so the value passed to
		                    // callback/promise is the same as what one would get out
		                    // of `getItem()` later. This leads to some weirdness
		                    // (setItem('foo', undefined) will return `null`), but
		                    // it's not my fault localStorage is our baseline and that
		                    // it's weird.
		                    if (value === undefined) {
		                        value = null;
		                    }

		                    resolve(value);
		                };
		                transaction.onabort = transaction.onerror = function () {
		                    var err = req.error ? req.error : req.transaction.error;
		                    reject(err);
		                };
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function removeItem(key, callback) {
		        var self = this;

		        // Cast the key to a string, as that's all we can set as a key.
		        if (typeof key !== 'string') {
		            globalObject.console.warn(key + ' used as a key, but it is not a string.');
		            key = String(key);
		        }

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');
		                var store = transaction.objectStore(dbInfo.storeName);

		                // We use a Grunt task to make this safe for IE and some
		                // versions of Android (including those used by Cordova).
		                // Normally IE won't like `.delete()` and will insist on
		                // using `['delete']()`, but we have a build step that
		                // fixes this for us now.
		                var req = store['delete'](key);
		                transaction.oncomplete = function () {
		                    resolve();
		                };

		                transaction.onerror = function () {
		                    reject(req.error);
		                };

		                // The request will be also be aborted if we've exceeded our storage
		                // space.
		                transaction.onabort = function () {
		                    var err = req.error ? req.error : req.transaction.error;
		                    reject(err);
		                };
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function clear(callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');
		                var store = transaction.objectStore(dbInfo.storeName);
		                var req = store.clear();

		                transaction.oncomplete = function () {
		                    resolve();
		                };

		                transaction.onabort = transaction.onerror = function () {
		                    var err = req.error ? req.error : req.transaction.error;
		                    reject(err);
		                };
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function length(callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);
		                var req = store.count();

		                req.onsuccess = function () {
		                    resolve(req.result);
		                };

		                req.onerror = function () {
		                    reject(req.error);
		                };
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function key(n, callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            if (n < 0) {
		                resolve(null);

		                return;
		            }

		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);

		                var advanced = false;
		                var req = store.openCursor();
		                req.onsuccess = function () {
		                    var cursor = req.result;
		                    if (!cursor) {
		                        // this means there weren't enough keys
		                        resolve(null);

		                        return;
		                    }

		                    if (n === 0) {
		                        // We have the first key, return it if that's what they
		                        // wanted.
		                        resolve(cursor.key);
		                    } else {
		                        if (!advanced) {
		                            // Otherwise, ask the cursor to skip ahead n
		                            // records.
		                            advanced = true;
		                            cursor.advance(n);
		                        } else {
		                            // When we get here, we've got the nth key.
		                            resolve(cursor.key);
		                        }
		                    }
		                };

		                req.onerror = function () {
		                    reject(req.error);
		                };
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function keys(callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);

		                var req = store.openCursor();
		                var keys = [];

		                req.onsuccess = function () {
		                    var cursor = req.result;

		                    if (!cursor) {
		                        resolve(keys);
		                        return;
		                    }

		                    keys.push(cursor.key);
		                    cursor['continue']();
		                };

		                req.onerror = function () {
		                    reject(req.error);
		                };
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function executeCallback(promise, callback) {
		        if (callback) {
		            promise.then(function (result) {
		                callback(null, result);
		            }, function (error) {
		                callback(error);
		            });
		        }
		    }

		    var asyncStorage = {
		        _driver: 'asyncStorage',
		        _initStorage: _initStorage,
		        iterate: iterate,
		        getItem: getItem,
		        setItem: setItem,
		        removeItem: removeItem,
		        clear: clear,
		        length: length,
		        key: key,
		        keys: keys
		    };

		    exports['default'] = asyncStorage;
		}).call(typeof window !== 'undefined' ? window : self);
		module.exports = exports['default'];

	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		// If IndexedDB isn't available, we'll fall back to localStorage.
		// Note that this will have considerable performance and storage
		// side-effects (all data will be serialized on save and only data that
		// can be converted to a string via `JSON.stringify()` will be saved).
		'use strict';

		exports.__esModule = true;
		(function () {
		    'use strict';

		    var globalObject = this;
		    var localStorage = null;

		    // If the app is running inside a Google Chrome packaged webapp, or some
		    // other context where localStorage isn't available, we don't use
		    // localStorage. This feature detection is preferred over the old
		    // `if (window.chrome && window.chrome.runtime)` code.
		    // See: https://github.com/mozilla/localForage/issues/68
		    try {
		        // If localStorage isn't available, we get outta here!
		        // This should be inside a try catch
		        if (!this.localStorage || !('setItem' in this.localStorage)) {
		            return;
		        }
		        // Initialize localStorage and create a variable to use throughout
		        // the code.
		        localStorage = this.localStorage;
		    } catch (e) {
		        return;
		    }

		    // Config the localStorage backend, using options set in the config.
		    function _initStorage(options) {
		        var self = this;
		        var dbInfo = {};
		        if (options) {
		            for (var i in options) {
		                dbInfo[i] = options[i];
		            }
		        }

		        dbInfo.keyPrefix = dbInfo.name + '/';

		        if (dbInfo.storeName !== self._defaultConfig.storeName) {
		            dbInfo.keyPrefix += dbInfo.storeName + '/';
		        }

		        self._dbInfo = dbInfo;

		        return new Promise(function (resolve, reject) {
		            resolve(__webpack_require__(3));
		        }).then(function (lib) {
		            dbInfo.serializer = lib;
		            return Promise.resolve();
		        });
		    }

		    // Remove all keys from the datastore, effectively destroying all data in
		    // the app's key/value store!
		    function clear(callback) {
		        var self = this;
		        var promise = self.ready().then(function () {
		            var keyPrefix = self._dbInfo.keyPrefix;

		            for (var i = localStorage.length - 1; i >= 0; i--) {
		                var key = localStorage.key(i);

		                if (key.indexOf(keyPrefix) === 0) {
		                    localStorage.removeItem(key);
		                }
		            }
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Retrieve an item from the store. Unlike the original async_storage
		    // library in Gaia, we don't modify return values at all. If a key's value
		    // is `undefined`, we pass that value to the callback function.
		    function getItem(key, callback) {
		        var self = this;

		        // Cast the key to a string, as that's all we can set as a key.
		        if (typeof key !== 'string') {
		            globalObject.console.warn(key + ' used as a key, but it is not a string.');
		            key = String(key);
		        }

		        var promise = self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            var result = localStorage.getItem(dbInfo.keyPrefix + key);

		            // If a result was found, parse it from the serialized
		            // string into a JS object. If result isn't truthy, the key
		            // is likely undefined and we'll pass it straight to the
		            // callback.
		            if (result) {
		                result = dbInfo.serializer.deserialize(result);
		            }

		            return result;
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Iterate over all items in the store.
		    function iterate(iterator, callback) {
		        var self = this;

		        var promise = self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            var keyPrefix = dbInfo.keyPrefix;
		            var keyPrefixLength = keyPrefix.length;
		            var length = localStorage.length;

		            // We use a dedicated iterator instead of the `i` variable below
		            // so other keys we fetch in localStorage aren't counted in
		            // the `iterationNumber` argument passed to the `iterate()`
		            // callback.
		            //
		            // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
		            var iterationNumber = 1;

		            for (var i = 0; i < length; i++) {
		                var key = localStorage.key(i);
		                if (key.indexOf(keyPrefix) !== 0) {
		                    continue;
		                }
		                var value = localStorage.getItem(key);

		                // If a result was found, parse it from the serialized
		                // string into a JS object. If result isn't truthy, the
		                // key is likely undefined and we'll pass it straight
		                // to the iterator.
		                if (value) {
		                    value = dbInfo.serializer.deserialize(value);
		                }

		                value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

		                if (value !== void 0) {
		                    return value;
		                }
		            }
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Same as localStorage's key() method, except takes a callback.
		    function key(n, callback) {
		        var self = this;
		        var promise = self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            var result;
		            try {
		                result = localStorage.key(n);
		            } catch (error) {
		                result = null;
		            }

		            // Remove the prefix from the key, if a key is found.
		            if (result) {
		                result = result.substring(dbInfo.keyPrefix.length);
		            }

		            return result;
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function keys(callback) {
		        var self = this;
		        var promise = self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            var length = localStorage.length;
		            var keys = [];

		            for (var i = 0; i < length; i++) {
		                if (localStorage.key(i).indexOf(dbInfo.keyPrefix) === 0) {
		                    keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));
		                }
		            }

		            return keys;
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Supply the number of keys in the datastore to the callback function.
		    function length(callback) {
		        var self = this;
		        var promise = self.keys().then(function (keys) {
		            return keys.length;
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Remove an item from the store, nice and simple.
		    function removeItem(key, callback) {
		        var self = this;

		        // Cast the key to a string, as that's all we can set as a key.
		        if (typeof key !== 'string') {
		            globalObject.console.warn(key + ' used as a key, but it is not a string.');
		            key = String(key);
		        }

		        var promise = self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            localStorage.removeItem(dbInfo.keyPrefix + key);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Set a key's value and run an optional callback once the value is set.
		    // Unlike Gaia's implementation, the callback function is passed the value,
		    // in case you want to operate on that value only after you're sure it
		    // saved, or something like that.
		    function setItem(key, value, callback) {
		        var self = this;

		        // Cast the key to a string, as that's all we can set as a key.
		        if (typeof key !== 'string') {
		            globalObject.console.warn(key + ' used as a key, but it is not a string.');
		            key = String(key);
		        }

		        var promise = self.ready().then(function () {
		            // Convert undefined values to null.
		            // https://github.com/mozilla/localForage/pull/42
		            if (value === undefined) {
		                value = null;
		            }

		            // Save the original value to pass to the callback.
		            var originalValue = value;

		            return new Promise(function (resolve, reject) {
		                var dbInfo = self._dbInfo;
		                dbInfo.serializer.serialize(value, function (value, error) {
		                    if (error) {
		                        reject(error);
		                    } else {
		                        try {
		                            localStorage.setItem(dbInfo.keyPrefix + key, value);
		                            resolve(originalValue);
		                        } catch (e) {
		                            // localStorage capacity exceeded.
		                            // TODO: Make this a specific error/event.
		                            if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
		                                reject(e);
		                            }
		                            reject(e);
		                        }
		                    }
		                });
		            });
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function executeCallback(promise, callback) {
		        if (callback) {
		            promise.then(function (result) {
		                callback(null, result);
		            }, function (error) {
		                callback(error);
		            });
		        }
		    }

		    var localStorageWrapper = {
		        _driver: 'localStorageWrapper',
		        _initStorage: _initStorage,
		        // Default API, from Gaia/localStorage.
		        iterate: iterate,
		        getItem: getItem,
		        setItem: setItem,
		        removeItem: removeItem,
		        clear: clear,
		        length: length,
		        key: key,
		        keys: keys
		    };

		    exports['default'] = localStorageWrapper;
		}).call(typeof window !== 'undefined' ? window : self);
		module.exports = exports['default'];

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		(function () {
		    'use strict';

		    // Sadly, the best way to save binary data in WebSQL/localStorage is serializing
		    // it to Base64, so this is how we store it to prevent very strange errors with less
		    // verbose ways of binary <-> string data storage.
		    var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

		    var BLOB_TYPE_PREFIX = '~~local_forage_type~';
		    var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

		    var SERIALIZED_MARKER = '__lfsc__:';
		    var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

		    // OMG the serializations!
		    var TYPE_ARRAYBUFFER = 'arbf';
		    var TYPE_BLOB = 'blob';
		    var TYPE_INT8ARRAY = 'si08';
		    var TYPE_UINT8ARRAY = 'ui08';
		    var TYPE_UINT8CLAMPEDARRAY = 'uic8';
		    var TYPE_INT16ARRAY = 'si16';
		    var TYPE_INT32ARRAY = 'si32';
		    var TYPE_UINT16ARRAY = 'ur16';
		    var TYPE_UINT32ARRAY = 'ui32';
		    var TYPE_FLOAT32ARRAY = 'fl32';
		    var TYPE_FLOAT64ARRAY = 'fl64';
		    var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

		    // Get out of our habit of using `window` inline, at least.
		    var globalObject = this;

		    // Abstracts constructing a Blob object, so it also works in older
		    // browsers that don't support the native Blob constructor. (i.e.
		    // old QtWebKit versions, at least).
		    function _createBlob(parts, properties) {
		        parts = parts || [];
		        properties = properties || {};

		        try {
		            return new Blob(parts, properties);
		        } catch (err) {
		            if (err.name !== 'TypeError') {
		                throw err;
		            }

		            var BlobBuilder = globalObject.BlobBuilder || globalObject.MSBlobBuilder || globalObject.MozBlobBuilder || globalObject.WebKitBlobBuilder;

		            var builder = new BlobBuilder();
		            for (var i = 0; i < parts.length; i += 1) {
		                builder.append(parts[i]);
		            }

		            return builder.getBlob(properties.type);
		        }
		    }

		    // Serialize a value, afterwards executing a callback (which usually
		    // instructs the `setItem()` callback/promise to be executed). This is how
		    // we store binary data with localStorage.
		    function serialize(value, callback) {
		        var valueString = '';
		        if (value) {
		            valueString = value.toString();
		        }

		        // Cannot use `value instanceof ArrayBuffer` or such here, as these
		        // checks fail when running the tests using casper.js...
		        //
		        // TODO: See why those tests fail and use a better solution.
		        if (value && (value.toString() === '[object ArrayBuffer]' || value.buffer && value.buffer.toString() === '[object ArrayBuffer]')) {
		            // Convert binary arrays to a string and prefix the string with
		            // a special marker.
		            var buffer;
		            var marker = SERIALIZED_MARKER;

		            if (value instanceof ArrayBuffer) {
		                buffer = value;
		                marker += TYPE_ARRAYBUFFER;
		            } else {
		                buffer = value.buffer;

		                if (valueString === '[object Int8Array]') {
		                    marker += TYPE_INT8ARRAY;
		                } else if (valueString === '[object Uint8Array]') {
		                    marker += TYPE_UINT8ARRAY;
		                } else if (valueString === '[object Uint8ClampedArray]') {
		                    marker += TYPE_UINT8CLAMPEDARRAY;
		                } else if (valueString === '[object Int16Array]') {
		                    marker += TYPE_INT16ARRAY;
		                } else if (valueString === '[object Uint16Array]') {
		                    marker += TYPE_UINT16ARRAY;
		                } else if (valueString === '[object Int32Array]') {
		                    marker += TYPE_INT32ARRAY;
		                } else if (valueString === '[object Uint32Array]') {
		                    marker += TYPE_UINT32ARRAY;
		                } else if (valueString === '[object Float32Array]') {
		                    marker += TYPE_FLOAT32ARRAY;
		                } else if (valueString === '[object Float64Array]') {
		                    marker += TYPE_FLOAT64ARRAY;
		                } else {
		                    callback(new Error('Failed to get type for BinaryArray'));
		                }
		            }

		            callback(marker + bufferToString(buffer));
		        } else if (valueString === '[object Blob]') {
		            // Conver the blob to a binaryArray and then to a string.
		            var fileReader = new FileReader();

		            fileReader.onload = function () {
		                // Backwards-compatible prefix for the blob type.
		                var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

		                callback(SERIALIZED_MARKER + TYPE_BLOB + str);
		            };

		            fileReader.readAsArrayBuffer(value);
		        } else {
		            try {
		                callback(JSON.stringify(value));
		            } catch (e) {
		                console.error("Couldn't convert value into a JSON string: ", value);

		                callback(null, e);
		            }
		        }
		    }

		    // Deserialize data we've inserted into a value column/field. We place
		    // special markers into our strings to mark them as encoded; this isn't
		    // as nice as a meta field, but it's the only sane thing we can do whilst
		    // keeping localStorage support intact.
		    //
		    // Oftentimes this will just deserialize JSON content, but if we have a
		    // special marker (SERIALIZED_MARKER, defined above), we will extract
		    // some kind of arraybuffer/binary data/typed array out of the string.
		    function deserialize(value) {
		        // If we haven't marked this string as being specially serialized (i.e.
		        // something other than serialized JSON), we can just return it and be
		        // done with it.
		        if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
		            return JSON.parse(value);
		        }

		        // The following code deals with deserializing some kind of Blob or
		        // TypedArray. First we separate out the type of data we're dealing
		        // with from the data itself.
		        var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
		        var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

		        var blobType;
		        // Backwards-compatible blob type serialization strategy.
		        // DBs created with older versions of localForage will simply not have the blob type.
		        if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
		            var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
		            blobType = matcher[1];
		            serializedString = serializedString.substring(matcher[0].length);
		        }
		        var buffer = stringToBuffer(serializedString);

		        // Return the right type based on the code/type set during
		        // serialization.
		        switch (type) {
		            case TYPE_ARRAYBUFFER:
		                return buffer;
		            case TYPE_BLOB:
		                return _createBlob([buffer], { type: blobType });
		            case TYPE_INT8ARRAY:
		                return new Int8Array(buffer);
		            case TYPE_UINT8ARRAY:
		                return new Uint8Array(buffer);
		            case TYPE_UINT8CLAMPEDARRAY:
		                return new Uint8ClampedArray(buffer);
		            case TYPE_INT16ARRAY:
		                return new Int16Array(buffer);
		            case TYPE_UINT16ARRAY:
		                return new Uint16Array(buffer);
		            case TYPE_INT32ARRAY:
		                return new Int32Array(buffer);
		            case TYPE_UINT32ARRAY:
		                return new Uint32Array(buffer);
		            case TYPE_FLOAT32ARRAY:
		                return new Float32Array(buffer);
		            case TYPE_FLOAT64ARRAY:
		                return new Float64Array(buffer);
		            default:
		                throw new Error('Unkown type: ' + type);
		        }
		    }

		    function stringToBuffer(serializedString) {
		        // Fill the string into a ArrayBuffer.
		        var bufferLength = serializedString.length * 0.75;
		        var len = serializedString.length;
		        var i;
		        var p = 0;
		        var encoded1, encoded2, encoded3, encoded4;

		        if (serializedString[serializedString.length - 1] === '=') {
		            bufferLength--;
		            if (serializedString[serializedString.length - 2] === '=') {
		                bufferLength--;
		            }
		        }

		        var buffer = new ArrayBuffer(bufferLength);
		        var bytes = new Uint8Array(buffer);

		        for (i = 0; i < len; i += 4) {
		            encoded1 = BASE_CHARS.indexOf(serializedString[i]);
		            encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
		            encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
		            encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

		            /*jslint bitwise: true */
		            bytes[p++] = encoded1 << 2 | encoded2 >> 4;
		            bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
		            bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
		        }
		        return buffer;
		    }

		    // Converts a buffer to a string to store, serialized, in the backend
		    // storage library.
		    function bufferToString(buffer) {
		        // base64-arraybuffer
		        var bytes = new Uint8Array(buffer);
		        var base64String = '';
		        var i;

		        for (i = 0; i < bytes.length; i += 3) {
		            /*jslint bitwise: true */
		            base64String += BASE_CHARS[bytes[i] >> 2];
		            base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
		            base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
		            base64String += BASE_CHARS[bytes[i + 2] & 63];
		        }

		        if (bytes.length % 3 === 2) {
		            base64String = base64String.substring(0, base64String.length - 1) + '=';
		        } else if (bytes.length % 3 === 1) {
		            base64String = base64String.substring(0, base64String.length - 2) + '==';
		        }

		        return base64String;
		    }

		    var localforageSerializer = {
		        serialize: serialize,
		        deserialize: deserialize,
		        stringToBuffer: stringToBuffer,
		        bufferToString: bufferToString
		    };

		    exports['default'] = localforageSerializer;
		}).call(typeof window !== 'undefined' ? window : self);
		module.exports = exports['default'];

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		 * Includes code from:
		 *
		 * base64-arraybuffer
		 * https://github.com/niklasvh/base64-arraybuffer
		 *
		 * Copyright (c) 2012 Niklas von Hertzen
		 * Licensed under the MIT license.
		 */
		'use strict';

		exports.__esModule = true;
		(function () {
		    'use strict';

		    var globalObject = this;
		    var openDatabase = this.openDatabase;

		    // If WebSQL methods aren't available, we can stop now.
		    if (!openDatabase) {
		        return;
		    }

		    // Open the WebSQL database (automatically creates one if one didn't
		    // previously exist), using any options set in the config.
		    function _initStorage(options) {
		        var self = this;
		        var dbInfo = {
		            db: null
		        };

		        if (options) {
		            for (var i in options) {
		                dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
		            }
		        }

		        var dbInfoPromise = new Promise(function (resolve, reject) {
		            // Open the database; the openDatabase API will automatically
		            // create it for us if it doesn't exist.
		            try {
		                dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
		            } catch (e) {
		                return self.setDriver(self.LOCALSTORAGE).then(function () {
		                    return self._initStorage(options);
		                }).then(resolve)['catch'](reject);
		            }

		            // Create our key/value table if it doesn't exist.
		            dbInfo.db.transaction(function (t) {
		                t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {
		                    self._dbInfo = dbInfo;
		                    resolve();
		                }, function (t, error) {
		                    reject(error);
		                });
		            });
		        });

		        return new Promise(function (resolve, reject) {
		            resolve(__webpack_require__(3));
		        }).then(function (lib) {
		            dbInfo.serializer = lib;
		            return dbInfoPromise;
		        });
		    }

		    function getItem(key, callback) {
		        var self = this;

		        // Cast the key to a string, as that's all we can set as a key.
		        if (typeof key !== 'string') {
		            globalObject.console.warn(key + ' used as a key, but it is not a string.');
		            key = String(key);
		        }

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                dbInfo.db.transaction(function (t) {
		                    t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
		                        var result = results.rows.length ? results.rows.item(0).value : null;

		                        // Check to see if this is serialized content we need to
		                        // unpack.
		                        if (result) {
		                            result = dbInfo.serializer.deserialize(result);
		                        }

		                        resolve(result);
		                    }, function (t, error) {

		                        reject(error);
		                    });
		                });
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function iterate(iterator, callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;

		                dbInfo.db.transaction(function (t) {
		                    t.executeSql('SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
		                        var rows = results.rows;
		                        var length = rows.length;

		                        for (var i = 0; i < length; i++) {
		                            var item = rows.item(i);
		                            var result = item.value;

		                            // Check to see if this is serialized content
		                            // we need to unpack.
		                            if (result) {
		                                result = dbInfo.serializer.deserialize(result);
		                            }

		                            result = iterator(result, item.key, i + 1);

		                            // void(0) prevents problems with redefinition
		                            // of `undefined`.
		                            if (result !== void 0) {
		                                resolve(result);
		                                return;
		                            }
		                        }

		                        resolve();
		                    }, function (t, error) {
		                        reject(error);
		                    });
		                });
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function setItem(key, value, callback) {
		        var self = this;

		        // Cast the key to a string, as that's all we can set as a key.
		        if (typeof key !== 'string') {
		            globalObject.console.warn(key + ' used as a key, but it is not a string.');
		            key = String(key);
		        }

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                // The localStorage API doesn't return undefined values in an
		                // "expected" way, so undefined is always cast to null in all
		                // drivers. See: https://github.com/mozilla/localForage/pull/42
		                if (value === undefined) {
		                    value = null;
		                }

		                // Save the original value to pass to the callback.
		                var originalValue = value;

		                var dbInfo = self._dbInfo;
		                dbInfo.serializer.serialize(value, function (value, error) {
		                    if (error) {
		                        reject(error);
		                    } else {
		                        dbInfo.db.transaction(function (t) {
		                            t.executeSql('INSERT OR REPLACE INTO ' + dbInfo.storeName + ' (key, value) VALUES (?, ?)', [key, value], function () {
		                                resolve(originalValue);
		                            }, function (t, error) {
		                                reject(error);
		                            });
		                        }, function (sqlError) {
		                            // The transaction failed; check
		                            // to see if it's a quota error.
		                            if (sqlError.code === sqlError.QUOTA_ERR) {
		                                // We reject the callback outright for now, but
		                                // it's worth trying to re-run the transaction.
		                                // Even if the user accepts the prompt to use
		                                // more storage on Safari, this error will
		                                // be called.
		                                //
		                                // TODO: Try to re-run the transaction.
		                                reject(sqlError);
		                            }
		                        });
		                    }
		                });
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function removeItem(key, callback) {
		        var self = this;

		        // Cast the key to a string, as that's all we can set as a key.
		        if (typeof key !== 'string') {
		            globalObject.console.warn(key + ' used as a key, but it is not a string.');
		            key = String(key);
		        }

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                dbInfo.db.transaction(function (t) {
		                    t.executeSql('DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
		                        resolve();
		                    }, function (t, error) {

		                        reject(error);
		                    });
		                });
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Deletes every item in the table.
		    // TODO: Find out if this resets the AUTO_INCREMENT number.
		    function clear(callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                dbInfo.db.transaction(function (t) {
		                    t.executeSql('DELETE FROM ' + dbInfo.storeName, [], function () {
		                        resolve();
		                    }, function (t, error) {
		                        reject(error);
		                    });
		                });
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Does a simple `COUNT(key)` to get the number of items stored in
		    // localForage.
		    function length(callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                dbInfo.db.transaction(function (t) {
		                    // Ahhh, SQL makes this one soooooo easy.
		                    t.executeSql('SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
		                        var result = results.rows.item(0).c;

		                        resolve(result);
		                    }, function (t, error) {

		                        reject(error);
		                    });
		                });
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    // Return the key located at key index X; essentially gets the key from a
		    // `WHERE id = ?`. This is the most efficient way I can think to implement
		    // this rarely-used (in my experience) part of the API, but it can seem
		    // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
		    // the ID of each key will change every time it's updated. Perhaps a stored
		    // procedure for the `setItem()` SQL would solve this problem?
		    // TODO: Don't change ID on `setItem()`.
		    function key(n, callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                dbInfo.db.transaction(function (t) {
		                    t.executeSql('SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
		                        var result = results.rows.length ? results.rows.item(0).key : null;
		                        resolve(result);
		                    }, function (t, error) {
		                        reject(error);
		                    });
		                });
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function keys(callback) {
		        var self = this;

		        var promise = new Promise(function (resolve, reject) {
		            self.ready().then(function () {
		                var dbInfo = self._dbInfo;
		                dbInfo.db.transaction(function (t) {
		                    t.executeSql('SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
		                        var keys = [];

		                        for (var i = 0; i < results.rows.length; i++) {
		                            keys.push(results.rows.item(i).key);
		                        }

		                        resolve(keys);
		                    }, function (t, error) {

		                        reject(error);
		                    });
		                });
		            })['catch'](reject);
		        });

		        executeCallback(promise, callback);
		        return promise;
		    }

		    function executeCallback(promise, callback) {
		        if (callback) {
		            promise.then(function (result) {
		                callback(null, result);
		            }, function (error) {
		                callback(error);
		            });
		        }
		    }

		    var webSQLStorage = {
		        _driver: 'webSQLStorage',
		        _initStorage: _initStorage,
		        iterate: iterate,
		        getItem: getItem,
		        setItem: setItem,
		        removeItem: removeItem,
		        clear: clear,
		        length: length,
		        key: key,
		        keys: keys
		    };

		    exports['default'] = webSQLStorage;
		}).call(typeof window !== 'undefined' ? window : self);
		module.exports = exports['default'];

	/***/ }
	/******/ ])
	});
	;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(12)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	// Top level file is just a mixin of submodules & constants
	'use strict';

	var assign    = __webpack_require__(7).assign;

	var deflate   = __webpack_require__(105);
	var inflate   = __webpack_require__(106);
	var constants = __webpack_require__(36);

	var pako = {};

	assign(pako, deflate, inflate, constants);

	module.exports = pako;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var zlib_deflate = __webpack_require__(107);
	var utils = __webpack_require__(7);
	var strings = __webpack_require__(34);
	var msg = __webpack_require__(20);
	var zstream = __webpack_require__(38);

	var toString = Object.prototype.toString;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/

	var Z_NO_FLUSH      = 0;
	var Z_FINISH        = 4;

	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_SYNC_FLUSH    = 2;

	var Z_DEFAULT_COMPRESSION = -1;

	var Z_DEFAULT_STRATEGY    = 0;

	var Z_DEFLATED  = 8;

	/* ===========================================================================*/


	/**
	 * class Deflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[deflate]],
	 * [[deflateRaw]] and [[gzip]].
	 **/

	/* internal
	 * Deflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Deflate#onData]] not overriden.
	 **/

	/**
	 * Deflate.result -> Uint8Array|Array
	 *
	 * Compressed result, generated by default [[Deflate#onData]]
	 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
	 * push a chunk with explicit flush (call [[Deflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/

	/**
	 * Deflate.err -> Number
	 *
	 * Error code after deflate finished. 0 (Z_OK) on success.
	 * You will not need it in real life, because deflate errors
	 * are possible only on wrong options or bad `onData` / `onEnd`
	 * custom handlers.
	 **/

	/**
	 * Deflate.msg -> String
	 *
	 * Error message, if [[Deflate.err]] != 0
	 **/


	/**
	 * new Deflate(options)
	 * - options (Object): zlib deflate options.
	 *
	 * Creates new deflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `level`
	 * - `windowBits`
	 * - `memLevel`
	 * - `strategy`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw deflate
	 * - `gzip` (Boolean) - create gzip wrapper
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 * - `header` (Object) - custom header for gzip
	 *   - `text` (Boolean) - true if compressed data believed to be text
	 *   - `time` (Number) - modification time, unix timestamp
	 *   - `os` (Number) - operation system code
	 *   - `extra` (Array) - array of bytes with extra data (max 65536)
	 *   - `name` (String) - file name (binary string)
	 *   - `comment` (String) - comment (binary string)
	 *   - `hcrc` (Boolean) - true if header crc should be added
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var deflate = new pako.Deflate({ level: 3});
	 *
	 * deflate.push(chunk1, false);
	 * deflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (deflate.err) { throw new Error(deflate.err); }
	 *
	 * console.log(deflate.result);
	 * ```
	 **/
	var Deflate = function(options) {

	  this.options = utils.assign({
	    level: Z_DEFAULT_COMPRESSION,
	    method: Z_DEFLATED,
	    chunkSize: 16384,
	    windowBits: 15,
	    memLevel: 8,
	    strategy: Z_DEFAULT_STRATEGY,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  if (opt.raw && (opt.windowBits > 0)) {
	    opt.windowBits = -opt.windowBits;
	  }

	  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
	    opt.windowBits += 16;
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm = new zstream();
	  this.strm.avail_out = 0;

	  var status = zlib_deflate.deflateInit2(
	    this.strm,
	    opt.level,
	    opt.method,
	    opt.windowBits,
	    opt.memLevel,
	    opt.strategy
	  );

	  if (status !== Z_OK) {
	    throw new Error(msg[status]);
	  }

	  if (opt.header) {
	    zlib_deflate.deflateSetHeader(this.strm, opt.header);
	  }
	};

	/**
	 * Deflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
	 *   converted to utf8 byte sequence.
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
	 *
	 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
	 * new compressed chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the compression context.
	 *
	 * On fail call [[Deflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * array format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Deflate.prototype.push = function(data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var status, _mode;

	  if (this.ended) { return false; }

	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // If we need to compress text, change encoding to utf8.
	    strm.input = strings.string2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }
	    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

	    if (status !== Z_STREAM_END && status !== Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }
	    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
	      if (this.options.to === 'string') {
	        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
	      } else {
	        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	      }
	    }
	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

	  // Finalize on the last chunk.
	  if (_mode === Z_FINISH) {
	    status = zlib_deflate.deflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === Z_OK;
	  }

	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === Z_SYNC_FLUSH) {
	    this.onEnd(Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }

	  return true;
	};


	/**
	 * Deflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Deflate.prototype.onData = function(chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Deflate#onEnd(status) -> Void
	 * - status (Number): deflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called once after you tell deflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Deflate.prototype.onEnd = function(status) {
	  // On success - join
	  if (status === Z_OK) {
	    if (this.options.to === 'string') {
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * deflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * Compress `data` with deflate alrorythm and `options`.
	 *
	 * Supported options are:
	 *
	 * - level
	 * - windowBits
	 * - memLevel
	 * - strategy
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
	 *
	 * console.log(pako.deflate(data));
	 * ```
	 **/
	function deflate(input, options) {
	  var deflator = new Deflate(options);

	  deflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (deflator.err) { throw deflator.msg; }

	  return deflator.result;
	}


	/**
	 * deflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function deflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return deflate(input, options);
	}


	/**
	 * gzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but create gzip wrapper instead of
	 * deflate one.
	 **/
	function gzip(input, options) {
	  options = options || {};
	  options.gzip = true;
	  return deflate(input, options);
	}


	exports.Deflate = Deflate;
	exports.deflate = deflate;
	exports.deflateRaw = deflateRaw;
	exports.gzip = gzip;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var zlib_inflate = __webpack_require__(110);
	var utils = __webpack_require__(7);
	var strings = __webpack_require__(34);
	var c = __webpack_require__(36);
	var msg = __webpack_require__(20);
	var zstream = __webpack_require__(38);
	var gzheader = __webpack_require__(108);

	var toString = Object.prototype.toString;

	/**
	 * class Inflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[inflate]]
	 * and [[inflateRaw]].
	 **/

	/* internal
	 * inflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Inflate#onData]] not overriden.
	 **/

	/**
	 * Inflate.result -> Uint8Array|Array|String
	 *
	 * Uncompressed result, generated by default [[Inflate#onData]]
	 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
	 * push a chunk with explicit flush (call [[Inflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/

	/**
	 * Inflate.err -> Number
	 *
	 * Error code after inflate finished. 0 (Z_OK) on success.
	 * Should be checked if broken data possible.
	 **/

	/**
	 * Inflate.msg -> String
	 *
	 * Error message, if [[Inflate.err]] != 0
	 **/


	/**
	 * new Inflate(options)
	 * - options (Object): zlib inflate options.
	 *
	 * Creates new inflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `windowBits`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw inflate
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 * By default, when no options set, autodetect deflate/gzip data format via
	 * wrapper header.
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var inflate = new pako.Inflate({ level: 3});
	 *
	 * inflate.push(chunk1, false);
	 * inflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (inflate.err) { throw new Error(inflate.err); }
	 *
	 * console.log(inflate.result);
	 * ```
	 **/
	var Inflate = function(options) {

	  this.options = utils.assign({
	    chunkSize: 16384,
	    windowBits: 0,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  // Force window size for `raw` data, if not set directly,
	  // because we have no header for autodetect.
	  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
	    opt.windowBits = -opt.windowBits;
	    if (opt.windowBits === 0) { opt.windowBits = -15; }
	  }

	  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
	  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
	      !(options && options.windowBits)) {
	    opt.windowBits += 32;
	  }

	  // Gzip header has no info about windows size, we can do autodetect only
	  // for deflate. So, if window size not set, force it to max when gzip possible
	  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
	    // bit 3 (16) -> gzipped data
	    // bit 4 (32) -> autodetect gzip/deflate
	    if ((opt.windowBits & 15) === 0) {
	      opt.windowBits |= 15;
	    }
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm   = new zstream();
	  this.strm.avail_out = 0;

	  var status  = zlib_inflate.inflateInit2(
	    this.strm,
	    opt.windowBits
	  );

	  if (status !== c.Z_OK) {
	    throw new Error(msg[status]);
	  }

	  this.header = new gzheader();

	  zlib_inflate.inflateGetHeader(this.strm, this.header);
	};

	/**
	 * Inflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
	 *
	 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
	 * new output chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
	 *
	 * On fail call [[Inflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Inflate.prototype.push = function(data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var status, _mode;
	  var next_out_utf8, tail, utf8str;

	  // Flag to properly process Z_BUF_ERROR on testing inflate call
	  // when we check that all output data was flushed.
	  var allowBufError = false;

	  if (this.ended) { return false; }
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // Only binary strings can be decompressed on practice
	    strm.input = strings.binstring2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }

	    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

	    if (status === c.Z_BUF_ERROR && allowBufError === true) {
	      status = c.Z_OK;
	      allowBufError = false;
	    }

	    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }

	    if (strm.next_out) {
	      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

	        if (this.options.to === 'string') {

	          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

	          tail = strm.next_out - next_out_utf8;
	          utf8str = strings.buf2string(strm.output, next_out_utf8);

	          // move tail
	          strm.next_out = tail;
	          strm.avail_out = chunkSize - tail;
	          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

	          this.onData(utf8str);

	        } else {
	          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	        }
	      }
	    }

	    // When no more input data, we should check that internal inflate buffers
	    // are flushed. The only way to do it when avail_out = 0 - run one more
	    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
	    // Here we set flag to process this error properly.
	    //
	    // NOTE. Deflate does not return error in this case and does not needs such
	    // logic.
	    if (strm.avail_in === 0 && strm.avail_out === 0) {
	      allowBufError = true;
	    }

	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

	  if (status === c.Z_STREAM_END) {
	    _mode = c.Z_FINISH;
	  }

	  // Finalize on the last chunk.
	  if (_mode === c.Z_FINISH) {
	    status = zlib_inflate.inflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === c.Z_OK;
	  }

	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === c.Z_SYNC_FLUSH) {
	    this.onEnd(c.Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }

	  return true;
	};


	/**
	 * Inflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Inflate.prototype.onData = function(chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Inflate#onEnd(status) -> Void
	 * - status (Number): inflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called either after you tell inflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Inflate.prototype.onEnd = function(status) {
	  // On success - join
	  if (status === c.Z_OK) {
	    if (this.options.to === 'string') {
	      // Glue & convert here, until we teach pako to send
	      // utf8 alligned strings to onData
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * inflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Decompress `data` with inflate/ungzip and `options`. Autodetect
	 * format via wrapper header by default. That's why we don't provide
	 * separate `ungzip` method.
	 *
	 * Supported options are:
	 *
	 * - windowBits
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
	 *   , output;
	 *
	 * try {
	 *   output = pako.inflate(input);
	 * } catch (err)
	 *   console.log(err);
	 * }
	 * ```
	 **/
	function inflate(input, options) {
	  var inflator = new Inflate(options);

	  inflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (inflator.err) { throw inflator.msg; }

	  return inflator.result;
	}


	/**
	 * inflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * The same as [[inflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function inflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return inflate(input, options);
	}


	/**
	 * ungzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Just shortcut to [[inflate]], because it autodetects format
	 * by header.content. Done for convenience.
	 **/


	exports.Inflate = Inflate;
	exports.inflate = inflate;
	exports.inflateRaw = inflateRaw;
	exports.ungzip  = inflate;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils   = __webpack_require__(7);
	var trees   = __webpack_require__(112);
	var adler32 = __webpack_require__(35);
	var crc32   = __webpack_require__(37);
	var msg   = __webpack_require__(20);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;


	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY    = 0;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;


	/* The deflate compression method */
	var Z_DEFLATED  = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;


	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2*L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }

	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only (s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }

	  strm.avail_in -= len;

	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  }

	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev  = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH-1;

	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH-1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length-1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH-1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	};

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */

	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null;   /* Heads of the hash chains or NIL. */

	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	              /* used by trees.c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);
	  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);

	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS+1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */
	  zero(this.heap);

	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */

	  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0;          /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0;      /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
	  strm.state.gzhead = head;
	  return Z_OK;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }

	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);

	  s.d_buf = s.lit_bufsize >> 1;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}

	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}


	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }

	  s = strm.state;

	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {

	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	                );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH) { return Z_OK; }
	  if (s.wrap <= 0) { return Z_STREAM_END; }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}

	/* =========================================================================
	 * Copy the source state to the destination state
	 */
	//function deflateCopy(dest, source) {
	//
	//}

	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/


/***/ },
/* 108 */
/***/ function(module, exports) {

	'use strict';


	function GZheader() {
	  /* true if compressed data believed to be text */
	  this.text       = 0;
	  /* modification time */
	  this.time       = 0;
	  /* extra flags (not used when writing a gzip file) */
	  this.xflags     = 0;
	  /* operating system */
	  this.os         = 0;
	  /* pointer to extra field or Z_NULL if none */
	  this.extra      = null;
	  /* extra field length (valid if extra != Z_NULL) */
	  this.extra_len  = 0; // Actually, we don't need it in JS,
	                       // but leave for few code modifications

	  //
	  // Setup limits is not necessary because in js we should not preallocate memory
	  // for inflate use constant limit in 65536 bytes
	  //

	  /* space at extra (only when reading header) */
	  // this.extra_max  = 0;
	  /* pointer to zero-terminated file name or Z_NULL */
	  this.name       = '';
	  /* space at name (only when reading header) */
	  // this.name_max   = 0;
	  /* pointer to zero-terminated comment or Z_NULL */
	  this.comment    = '';
	  /* space at comment (only when reading header) */
	  // this.comm_max   = 0;
	  /* true if there was or will be a header crc */
	  this.hcrc       = 0;
	  /* true when done reading gzip header (not used when writing a gzip file) */
	  this.done       = false;
	}

	module.exports = GZheader;


/***/ },
/* 109 */
/***/ function(module, exports) {

	'use strict';

	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(7);
	var adler32 = __webpack_require__(35);
	var crc32   = __webpack_require__(37);
	var inflate_fast = __webpack_require__(109);
	var inflate_table = __webpack_require__(111);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;


	function ZSWAP32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new utils.Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window,src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window,src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//

	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);

	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = ZSWAP32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//

	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;

	      opts = {bits: state.lenbits};
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;

	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }

	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }

	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }

	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;

	      opts = {bits: state.lenbits};
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;

	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }

	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = {bits: state.distbits};
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;

	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---

	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
	        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}


	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(7);

	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }

	  var i=0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	var utils = __webpack_require__(7);

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;

	/*============================================================================*/


	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */

	var MIN_MATCH    = 3;
	var MAX_MATCH    = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS      = 256;
	/* number of literal bytes 0..255 */

	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES       = 30;
	/* number of distance codes */

	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE     = 2*L_CODES + 1;
	/* maximum heap size */

	var MAX_BITS      = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK   = 256;
	/* end of block literal code */

	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES+2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree  = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code    = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length   = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist     = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	};


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	var TreeDesc = function(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	};



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short (s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n*2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) { continue; } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n-base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length-1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m*2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;
	        tree[m*2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits-1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n*2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS+1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES-1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1<<extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length-1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0 ; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1<<extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n*2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n*2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n*2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n*2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES+1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n*2 + 1]/*.Len*/ = 5;
	    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
	  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }

	  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n*2;
	  var _m2 = m*2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code+LITERALS+1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n*2 + 1]/*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node*2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/

	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6*2]/*.Freq*/++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;

	    } else {
	      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count-3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count-3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count-11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3*(max_blindex+1) + 5+5+4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes-1,   5);
	  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES<<1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len+3+7) >>> 3;
	    static_lenb = (s.static_len+3+7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc*2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility

	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif

	  return (s.last_lit === s.lit_bufsize-1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	exports._tr_init  = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block  = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2014 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var rest = __webpack_require__(40),
			    browser = __webpack_require__(114);

			rest.setPlatformDefaultClient(browser);

			return rest;

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012-2014 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define, global) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var when, UrlBuilder, normalizeHeaderName, responsePromise, client, headerSplitRE;

			when = __webpack_require__(8);
			UrlBuilder = __webpack_require__(39);
			normalizeHeaderName = __webpack_require__(45);
			responsePromise = __webpack_require__(25);
			client = __webpack_require__(21);

			// according to the spec, the line break is '\r\n', but doesn't hold true in practice
			headerSplitRE = /[\r|\n]+/;

			function parseHeaders(raw) {
				// Note: Set-Cookie will be removed by the browser
				var headers = {};

				if (!raw) { return headers; }

				raw.trim().split(headerSplitRE).forEach(function (header) {
					var boundary, name, value;
					boundary = header.indexOf(':');
					name = normalizeHeaderName(header.substring(0, boundary).trim());
					value = header.substring(boundary + 1).trim();
					if (headers[name]) {
						if (Array.isArray(headers[name])) {
							// add to an existing array
							headers[name].push(value);
						}
						else {
							// convert single value to array
							headers[name] = [headers[name], value];
						}
					}
					else {
						// new, single value
						headers[name] = value;
					}
				});

				return headers;
			}

			function safeMixin(target, source) {
				Object.keys(source || {}).forEach(function (prop) {
					// make sure the property already exists as
					// IE 6 will blow up if we add a new prop
					if (source.hasOwnProperty(prop) && prop in target) {
						try {
							target[prop] = source[prop];
						}
						catch (e) {
							// ignore, expected for some properties at some points in the request lifecycle
						}
					}
				});

				return target;
			}

			return client(function xhr(request) {
				return responsePromise.promise(function (resolve, reject) {
					/*jshint maxcomplexity:20 */

					var client, method, url, headers, entity, headerName, response, XMLHttpRequest;

					request = typeof request === 'string' ? { path: request } : request || {};
					response = { request: request };

					if (request.canceled) {
						response.error = 'precanceled';
						reject(response);
						return;
					}

					XMLHttpRequest = request.engine || global.XMLHttpRequest;
					if (!XMLHttpRequest) {
						reject({ request: request, error: 'xhr-not-available' });
						return;
					}

					entity = request.entity;
					request.method = request.method || (entity ? 'POST' : 'GET');
					method = request.method;
					url = new UrlBuilder(request.path || '', request.params).build();

					try {
						client = response.raw = new XMLHttpRequest();

						// mixin extra request properties before and after opening the request as some properties require being set at different phases of the request
						safeMixin(client, request.mixin);
						client.open(method, url, true);
						safeMixin(client, request.mixin);

						headers = request.headers;
						for (headerName in headers) {
							/*jshint forin:false */
							if (headerName === 'Content-Type' && headers[headerName] === 'multipart/form-data') {
								// XMLHttpRequest generates its own Content-Type header with the
								// appropriate multipart boundary when sending multipart/form-data.
								continue;
							}

							client.setRequestHeader(headerName, headers[headerName]);
						}

						request.canceled = false;
						request.cancel = function cancel() {
							request.canceled = true;
							client.abort();
							reject(response);
						};

						client.onreadystatechange = function (/* e */) {
							if (request.canceled) { return; }
							if (client.readyState === (XMLHttpRequest.DONE || 4)) {
								response.status = {
									code: client.status,
									text: client.statusText
								};
								response.headers = parseHeaders(client.getAllResponseHeaders());
								response.entity = client.responseText;

								if (response.status.code > 0) {
									// check status code as readystatechange fires before error event
									resolve(response);
								}
								else {
									// give the error callback a chance to fire before resolving
									// requests for file:// URLs do not have a status code
									setTimeout(function () {
										resolve(response);
									}, 0);
								}
							}
						};

						try {
							client.onerror = function (/* e */) {
								response.error = 'loaderror';
								reject(response);
							};
						}
						catch (e) {
							// IE 6 will not support error handling
						}

						client.send(entity);
					}
					catch (e) {
						response.error = 'loaderror';
						reject(response);
					}

				});
			});

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1),
		typeof window !== 'undefined' ? window : void 0
		// Boilerplate for AMD and Node
	));


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012-2014 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var interceptor, mime, registry, noopConverter, when;

			interceptor = __webpack_require__(22);
			mime = __webpack_require__(41);
			registry = __webpack_require__(118);
			when = __webpack_require__(8);

			noopConverter = {
				read: function (obj) { return obj; },
				write: function (obj) { return obj; }
			};

			/**
			 * MIME type support for request and response entities.  Entities are
			 * (de)serialized using the converter for the MIME type.
			 *
			 * Request entities are converted using the desired converter and the
			 * 'Accept' request header prefers this MIME.
			 *
			 * Response entities are converted based on the Content-Type response header.
			 *
			 * @param {Client} [client] client to wrap
			 * @param {string} [config.mime='text/plain'] MIME type to encode the request
			 *   entity
			 * @param {string} [config.accept] Accept header for the request
			 * @param {Client} [config.client=<request.originator>] client passed to the
			 *   converter, defaults to the client originating the request
			 * @param {Registry} [config.registry] MIME registry, defaults to the root
			 *   registry
			 * @param {boolean} [config.permissive] Allow an unkown request MIME type
			 *
			 * @returns {Client}
			 */
			return interceptor({
				init: function (config) {
					config.registry = config.registry || registry;
					return config;
				},
				request: function (request, config) {
					var type, headers;

					headers = request.headers || (request.headers = {});
					type = mime.parse(headers['Content-Type'] = headers['Content-Type'] || config.mime || 'text/plain');
					headers.Accept = headers.Accept || config.accept || type.raw + ', application/json;q=0.8, text/plain;q=0.5, */*;q=0.2';

					if (!('entity' in request)) {
						return request;
					}

					return config.registry.lookup(type).otherwise(function () {
						// failed to resolve converter
						if (config.permissive) {
							return noopConverter;
						}
						throw 'mime-unknown';
					}).then(function (converter) {
						var client = config.client || request.originator;

						return when.attempt(converter.write, request.entity, { client: client, request: request, mime: type, registry: config.registry })
							.otherwise(function() {
								throw 'mime-serialization';
							})
							.then(function(entity) {
								request.entity = entity;
								return request;
							});
					});
				},
				response: function (response, config) {
					if (!(response.headers && response.headers['Content-Type'] && response.entity)) {
						return response;
					}

					var type = mime.parse(response.headers['Content-Type']);

					return config.registry.lookup(type).otherwise(function () { return noopConverter; }).then(function (converter) {
						var client = config.client || response.request && response.request.originator;

						return when.attempt(converter.read, response.entity, { client: client, response: response, mime: type, registry: config.registry })
							.otherwise(function (e) {
								response.error = 'mime-deserialization';
								response.cause = e;
								throw response;
							})
							.then(function (entity) {
								response.entity = entity;
								return response;
							});
					});
				}
			});

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012-2013 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var interceptor, UrlBuilder;

			interceptor = __webpack_require__(22);
			UrlBuilder = __webpack_require__(39);

			function startsWith(str, prefix) {
				return str.indexOf(prefix) === 0;
			}

			function endsWith(str, suffix) {
				return str.lastIndexOf(suffix) + suffix.length === str.length;
			}

			/**
			 * Prefixes the request path with a common value.
			 *
			 * @param {Client} [client] client to wrap
			 * @param {number} [config.prefix] path prefix
			 *
			 * @returns {Client}
			 */
			return interceptor({
				request: function (request, config) {
					var path;

					if (config.prefix && !(new UrlBuilder(request.path).isFullyQualified())) {
						path = config.prefix;
						if (request.path) {
							if (!endsWith(path, '/') && !startsWith(request.path, '/')) {
								// add missing '/' between path sections
								path += '/';
							}
							path += request.path;
						}
						request.path = path;
					}

					return request;
				}
			});

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2015 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var interceptor, uriTemplate, mixin;

			interceptor = __webpack_require__(22);
			uriTemplate = __webpack_require__(140);
			mixin = __webpack_require__(24);

			/**
			 * Applies request params to the path as a URI Template
			 *
			 * Params are removed from the request object, as they have been consumed.
			 *
			 * @param {Client} [client] client to wrap
			 * @param {Object} [config.params] default param values
			 * @param {string} [config.template] default template
			 *
			 * @returns {Client}
			 */
			return interceptor({
				init: function (config) {
					config.params = config.params || {};
					config.template = config.template || '';
					return config;
				},
				request: function (request, config) {
					var template, params;

					template = request.path || config.template;
					params = mixin({}, request.params, config.params);

					request.path = uriTemplate.expand(template, params);
					delete request.params;

					return request;
				}
			});

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012-2014 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var mime, when, registry;

			mime = __webpack_require__(41);
			when = __webpack_require__(8);

			function Registry(mimes) {

				/**
				 * Lookup the converter for a MIME type
				 *
				 * @param {string} type the MIME type
				 * @return a promise for the converter
				 */
				this.lookup = function lookup(type) {
					var parsed;

					parsed = typeof type === 'string' ? mime.parse(type) : type;

					if (mimes[parsed.raw]) {
						return mimes[parsed.raw];
					}
					if (mimes[parsed.type + parsed.suffix]) {
						return mimes[parsed.type + parsed.suffix];
					}
					if (mimes[parsed.type]) {
						return mimes[parsed.type];
					}
					if (mimes[parsed.suffix]) {
						return mimes[parsed.suffix];
					}

					return when.reject(new Error('Unable to locate converter for mime "' + parsed.raw + '"'));
				};

				/**
				 * Create a late dispatched proxy to the target converter.
				 *
				 * Common when a converter is registered under multiple names and
				 * should be kept in sync if updated.
				 *
				 * @param {string} type mime converter to dispatch to
				 * @returns converter whose read/write methods target the desired mime converter
				 */
				this.delegate = function delegate(type) {
					return {
						read: function () {
							var args = arguments;
							return this.lookup(type).then(function (converter) {
								return converter.read.apply(this, args);
							}.bind(this));
						}.bind(this),
						write: function () {
							var args = arguments;
							return this.lookup(type).then(function (converter) {
								return converter.write.apply(this, args);
							}.bind(this));
						}.bind(this)
					};
				};

				/**
				 * Register a custom converter for a MIME type
				 *
				 * @param {string} type the MIME type
				 * @param converter the converter for the MIME type
				 * @return a promise for the converter
				 */
				this.register = function register(type, converter) {
					mimes[type] = when(converter);
					return mimes[type];
				};

				/**
				 * Create a child registry whoes registered converters remain local, while
				 * able to lookup converters from its parent.
				 *
				 * @returns child MIME registry
				 */
				this.child = function child() {
					return new Registry(Object.create(mimes));
				};

			}

			registry = new Registry({});

			// include provided serializers
			registry.register('application/hal', __webpack_require__(119));
			registry.register('application/json', __webpack_require__(120));
			registry.register('application/x-www-form-urlencoded', __webpack_require__(121));
			registry.register('multipart/form-data', __webpack_require__(122));
			registry.register('text/plain', __webpack_require__(123));

			registry.register('+json', registry.delegate('application/json'));

			return registry;

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2013-2015 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var pathPrefix, template, find, lazyPromise, responsePromise, when;

			pathPrefix = __webpack_require__(116);
			template = __webpack_require__(117);
			find = __webpack_require__(137);
			lazyPromise = __webpack_require__(138);
			responsePromise = __webpack_require__(25);
			when = __webpack_require__(8);

			function defineProperty(obj, name, value) {
				Object.defineProperty(obj, name, {
					value: value,
					configurable: true,
					enumerable: false,
					writeable: true
				});
			}

			/**
			 * Hypertext Application Language serializer
			 *
			 * Implemented to https://tools.ietf.org/html/draft-kelly-json-hal-06
			 *
			 * As the spec is still a draft, this implementation will be updated as the
			 * spec evolves
			 *
			 * Objects are read as HAL indexing links and embedded objects on to the
			 * resource. Objects are written as plain JSON.
			 *
			 * Embedded relationships are indexed onto the resource by the relationship
			 * as a promise for the related resource.
			 *
			 * Links are indexed onto the resource as a lazy promise that will GET the
			 * resource when a handler is first registered on the promise.
			 *
			 * A `requestFor` method is added to the entity to make a request for the
			 * relationship.
			 *
			 * A `clientFor` method is added to the entity to get a full Client for a
			 * relationship.
			 *
			 * The `_links` and `_embedded` properties on the resource are made
			 * non-enumerable.
			 */
			return {

				read: function (str, opts) {
					var client, console;

					opts = opts || {};
					client = opts.client;
					console = opts.console || console;

					function deprecationWarning(relationship, deprecation) {
						if (deprecation && console && console.warn || console.log) {
							(console.warn || console.log).call(console, 'Relationship \'' + relationship + '\' is deprecated, see ' + deprecation);
						}
					}

					return opts.registry.lookup(opts.mime.suffix).then(function (converter) {
						return when(converter.read(str, opts)).then(function (root) {

							find.findProperties(root, '_embedded', function (embedded, resource, name) {
								Object.keys(embedded).forEach(function (relationship) {
									if (relationship in resource) { return; }
									var related = responsePromise({
										entity: embedded[relationship]
									});
									defineProperty(resource, relationship, related);
								});
								defineProperty(resource, name, embedded);
							});
							find.findProperties(root, '_links', function (links, resource, name) {
								Object.keys(links).forEach(function (relationship) {
									var link = links[relationship];
									if (relationship in resource) { return; }
									defineProperty(resource, relationship, responsePromise.make(lazyPromise(function () {
										if (link.deprecation) { deprecationWarning(relationship, link.deprecation); }
										if (link.templated === true) {
											return template(client)({ path: link.href });
										}
										return client({ path: link.href });
									})));
								});
								defineProperty(resource, name, links);
								defineProperty(resource, 'clientFor', function (relationship, clientOverride) {
									var link = links[relationship];
									if (!link) {
										throw new Error('Unknown relationship: ' + relationship);
									}
									if (link.deprecation) { deprecationWarning(relationship, link.deprecation); }
									if (link.templated === true) {
										return template(
											clientOverride || client,
											{ template: link.href }
										);
									}
									return pathPrefix(
										clientOverride || client,
										{ prefix: link.href }
									);
								});
								defineProperty(resource, 'requestFor', function (relationship, request, clientOverride) {
									var client = this.clientFor(relationship, clientOverride);
									return client(request);
								});
							});

							return root;
						});
					});

				},

				write: function (obj, opts) {
					return opts.registry.lookup(opts.mime.suffix).then(function (converter) {
						return converter.write(obj, opts);
					});
				}

			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012-2015 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			/**
			 * Create a new JSON converter with custom reviver/replacer.
			 *
			 * The extended converter must be published to a MIME registry in order
			 * to be used. The existing converter will not be modified.
			 *
			 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON
			 *
			 * @param {function} [reviver=undefined] custom JSON.parse reviver
			 * @param {function|Array} [replacer=undefined] custom JSON.stringify replacer
			 */
			function createConverter(reviver, replacer) {
				return {

					read: function (str) {
						return JSON.parse(str, reviver);
					},

					write: function (obj) {
						return JSON.stringify(obj, replacer);
					},

					extend: createConverter

				};
			}

			return createConverter();

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			var encodedSpaceRE, urlEncodedSpaceRE;

			encodedSpaceRE = /%20/g;
			urlEncodedSpaceRE = /\+/g;

			function urlEncode(str) {
				str = encodeURIComponent(str);
				// spec says space should be encoded as '+'
				return str.replace(encodedSpaceRE, '+');
			}

			function urlDecode(str) {
				// spec says space should be encoded as '+'
				str = str.replace(urlEncodedSpaceRE, ' ');
				return decodeURIComponent(str);
			}

			function append(str, name, value) {
				if (Array.isArray(value)) {
					value.forEach(function (value) {
						str = append(str, name, value);
					});
				}
				else {
					if (str.length > 0) {
						str += '&';
					}
					str += urlEncode(name);
					if (value !== undefined && value !== null) {
						str += '=' + urlEncode(value);
					}
				}
				return str;
			}

			return {

				read: function (str) {
					var obj = {};
					str.split('&').forEach(function (entry) {
						var pair, name, value;
						pair = entry.split('=');
						name = urlDecode(pair[0]);
						if (pair.length === 2) {
							value = urlDecode(pair[1]);
						}
						else {
							value = null;
						}
						if (name in obj) {
							if (!Array.isArray(obj[name])) {
								// convert to an array, perserving currnent value
								obj[name] = [obj[name]];
							}
							obj[name].push(value);
						}
						else {
							obj[name] = value;
						}
					});
					return obj;
				},

				write: function (obj) {
					var str = '';
					Object.keys(obj).forEach(function (name) {
						str = append(str, name, obj[name]);
					});
					return str;
				}

			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2014 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Michael Jackson
	 */

	/* global FormData, File, Blob */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			function isFormElement(object) {
				return object &&
					object.nodeType === 1 && // Node.ELEMENT_NODE
					object.tagName === 'FORM';
			}

			function createFormDataFromObject(object) {
				var formData = new FormData();

				var value;
				for (var property in object) {
					if (object.hasOwnProperty(property)) {
						value = object[property];

						if (value instanceof File) {
							formData.append(property, value, value.name);
						} else if (value instanceof Blob) {
							formData.append(property, value);
						} else {
							formData.append(property, String(value));
						}
					}
				}

				return formData;
			}

			return {

				write: function (object) {
					if (typeof FormData === 'undefined') {
						throw new Error('The multipart/form-data mime serializer requires FormData support');
					}

					// Support FormData directly.
					if (object instanceof FormData) {
						return object;
					}

					// Support <form> elements.
					if (isFormElement(object)) {
						return new FormData(object);
					}

					// Support plain objects, may contain File/Blob as value.
					if (typeof object === 'object' && object !== null) {
						return createFormDataFromObject(object);
					}

					throw new Error('Unable to create FormData from object ' + object);
				}

			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2012 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			return {

				read: function (str) {
					return str;
				},

				write: function (obj) {
					return obj.toString();
				}

			};
		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

		var makePromise = __webpack_require__(136);
		var Scheduler = __webpack_require__(125);
		var async = __webpack_require__(23).asap;

		return makePromise({
			scheduler: new Scheduler(async)
		});

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(__webpack_require__(1));


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		// Credit to Twisol (https://github.com/Twisol) for suggesting
		// this type of extensible queue + trampoline approach for next-tick conflation.

		/**
		 * Async task scheduler
		 * @param {function} async function to schedule a single async function
		 * @constructor
		 */
		function Scheduler(async) {
			this._async = async;
			this._running = false;

			this._queue = this;
			this._queueLen = 0;
			this._afterQueue = {};
			this._afterQueueLen = 0;

			var self = this;
			this.drain = function() {
				self._drain();
			};
		}

		/**
		 * Enqueue a task
		 * @param {{ run:function }} task
		 */
		Scheduler.prototype.enqueue = function(task) {
			this._queue[this._queueLen++] = task;
			this.run();
		};

		/**
		 * Enqueue a task to run after the main task queue
		 * @param {{ run:function }} task
		 */
		Scheduler.prototype.afterQueue = function(task) {
			this._afterQueue[this._afterQueueLen++] = task;
			this.run();
		};

		Scheduler.prototype.run = function() {
			if (!this._running) {
				this._running = true;
				this._async(this.drain);
			}
		};

		/**
		 * Drain the handler queue entirely, and then the after queue
		 */
		Scheduler.prototype._drain = function() {
			var i = 0;
			for (; i < this._queueLen; ++i) {
				this._queue[i].run();
				this._queue[i] = void 0;
			}

			this._queueLen = 0;
			this._running = false;

			for (i = 0; i < this._afterQueueLen; ++i) {
				this._afterQueue[i].run();
				this._afterQueue[i] = void 0;
			}

			this._afterQueueLen = 0;
		};

		return Scheduler;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

		var state = __webpack_require__(44);
		var applier = __webpack_require__(43);

		return function array(Promise) {

			var applyFold = applier(Promise);
			var toPromise = Promise.resolve;
			var all = Promise.all;

			var ar = Array.prototype.reduce;
			var arr = Array.prototype.reduceRight;
			var slice = Array.prototype.slice;

			// Additional array combinators

			Promise.any = any;
			Promise.some = some;
			Promise.settle = settle;

			Promise.map = map;
			Promise.filter = filter;
			Promise.reduce = reduce;
			Promise.reduceRight = reduceRight;

			/**
			 * When this promise fulfills with an array, do
			 * onFulfilled.apply(void 0, array)
			 * @param {function} onFulfilled function to apply
			 * @returns {Promise} promise for the result of applying onFulfilled
			 */
			Promise.prototype.spread = function(onFulfilled) {
				return this.then(all).then(function(array) {
					return onFulfilled.apply(this, array);
				});
			};

			return Promise;

			/**
			 * One-winner competitive race.
			 * Return a promise that will fulfill when one of the promises
			 * in the input array fulfills, or will reject when all promises
			 * have rejected.
			 * @param {array} promises
			 * @returns {Promise} promise for the first fulfilled value
			 */
			function any(promises) {
				var p = Promise._defer();
				var resolver = p._handler;
				var l = promises.length>>>0;

				var pending = l;
				var errors = [];

				for (var h, x, i = 0; i < l; ++i) {
					x = promises[i];
					if(x === void 0 && !(i in promises)) {
						--pending;
						continue;
					}

					h = Promise._handler(x);
					if(h.state() > 0) {
						resolver.become(h);
						Promise._visitRemaining(promises, i, h);
						break;
					} else {
						h.visit(resolver, handleFulfill, handleReject);
					}
				}

				if(pending === 0) {
					resolver.reject(new RangeError('any(): array must not be empty'));
				}

				return p;

				function handleFulfill(x) {
					/*jshint validthis:true*/
					errors = null;
					this.resolve(x); // this === resolver
				}

				function handleReject(e) {
					/*jshint validthis:true*/
					if(this.resolved) { // this === resolver
						return;
					}

					errors.push(e);
					if(--pending === 0) {
						this.reject(errors);
					}
				}
			}

			/**
			 * N-winner competitive race
			 * Return a promise that will fulfill when n input promises have
			 * fulfilled, or will reject when it becomes impossible for n
			 * input promises to fulfill (ie when promises.length - n + 1
			 * have rejected)
			 * @param {array} promises
			 * @param {number} n
			 * @returns {Promise} promise for the earliest n fulfillment values
			 *
			 * @deprecated
			 */
			function some(promises, n) {
				/*jshint maxcomplexity:7*/
				var p = Promise._defer();
				var resolver = p._handler;

				var results = [];
				var errors = [];

				var l = promises.length>>>0;
				var nFulfill = 0;
				var nReject;
				var x, i; // reused in both for() loops

				// First pass: count actual array items
				for(i=0; i<l; ++i) {
					x = promises[i];
					if(x === void 0 && !(i in promises)) {
						continue;
					}
					++nFulfill;
				}

				// Compute actual goals
				n = Math.max(n, 0);
				nReject = (nFulfill - n + 1);
				nFulfill = Math.min(n, nFulfill);

				if(n > nFulfill) {
					resolver.reject(new RangeError('some(): array must contain at least '
					+ n + ' item(s), but had ' + nFulfill));
				} else if(nFulfill === 0) {
					resolver.resolve(results);
				}

				// Second pass: observe each array item, make progress toward goals
				for(i=0; i<l; ++i) {
					x = promises[i];
					if(x === void 0 && !(i in promises)) {
						continue;
					}

					Promise._handler(x).visit(resolver, fulfill, reject, resolver.notify);
				}

				return p;

				function fulfill(x) {
					/*jshint validthis:true*/
					if(this.resolved) { // this === resolver
						return;
					}

					results.push(x);
					if(--nFulfill === 0) {
						errors = null;
						this.resolve(results);
					}
				}

				function reject(e) {
					/*jshint validthis:true*/
					if(this.resolved) { // this === resolver
						return;
					}

					errors.push(e);
					if(--nReject === 0) {
						results = null;
						this.reject(errors);
					}
				}
			}

			/**
			 * Apply f to the value of each promise in a list of promises
			 * and return a new list containing the results.
			 * @param {array} promises
			 * @param {function(x:*, index:Number):*} f mapping function
			 * @returns {Promise}
			 */
			function map(promises, f) {
				return Promise._traverse(f, promises);
			}

			/**
			 * Filter the provided array of promises using the provided predicate.  Input may
			 * contain promises and values
			 * @param {Array} promises array of promises and values
			 * @param {function(x:*, index:Number):boolean} predicate filtering predicate.
			 *  Must return truthy (or promise for truthy) for items to retain.
			 * @returns {Promise} promise that will fulfill with an array containing all items
			 *  for which predicate returned truthy.
			 */
			function filter(promises, predicate) {
				var a = slice.call(promises);
				return Promise._traverse(predicate, a).then(function(keep) {
					return filterSync(a, keep);
				});
			}

			function filterSync(promises, keep) {
				// Safe because we know all promises have fulfilled if we've made it this far
				var l = keep.length;
				var filtered = new Array(l);
				for(var i=0, j=0; i<l; ++i) {
					if(keep[i]) {
						filtered[j++] = Promise._handler(promises[i]).value;
					}
				}
				filtered.length = j;
				return filtered;

			}

			/**
			 * Return a promise that will always fulfill with an array containing
			 * the outcome states of all input promises.  The returned promise
			 * will never reject.
			 * @param {Array} promises
			 * @returns {Promise} promise for array of settled state descriptors
			 */
			function settle(promises) {
				return all(promises.map(settleOne));
			}

			function settleOne(p) {
				var h = Promise._handler(p);
				if(h.state() === 0) {
					return toPromise(p).then(state.fulfilled, state.rejected);
				}

				h._unreport();
				return state.inspect(h);
			}

			/**
			 * Traditional reduce function, similar to `Array.prototype.reduce()`, but
			 * input may contain promises and/or values, and reduceFunc
			 * may return either a value or a promise, *and* initialValue may
			 * be a promise for the starting value.
			 * @param {Array|Promise} promises array or promise for an array of anything,
			 *      may contain a mix of promises and values.
			 * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
			 * @returns {Promise} that will resolve to the final reduced value
			 */
			function reduce(promises, f /*, initialValue */) {
				return arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2])
						: ar.call(promises, liftCombine(f));
			}

			/**
			 * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but
			 * input may contain promises and/or values, and reduceFunc
			 * may return either a value or a promise, *and* initialValue may
			 * be a promise for the starting value.
			 * @param {Array|Promise} promises array or promise for an array of anything,
			 *      may contain a mix of promises and values.
			 * @param {function(accumulated:*, x:*, index:Number):*} f reduce function
			 * @returns {Promise} that will resolve to the final reduced value
			 */
			function reduceRight(promises, f /*, initialValue */) {
				return arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2])
						: arr.call(promises, liftCombine(f));
			}

			function liftCombine(f) {
				return function(z, x, i) {
					return applyFold(f, void 0, [z,x,i]);
				};
			}
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function flow(Promise) {

			var resolve = Promise.resolve;
			var reject = Promise.reject;
			var origCatch = Promise.prototype['catch'];

			/**
			 * Handle the ultimate fulfillment value or rejection reason, and assume
			 * responsibility for all errors.  If an error propagates out of result
			 * or handleFatalError, it will be rethrown to the host, resulting in a
			 * loud stack track on most platforms and a crash on some.
			 * @param {function?} onResult
			 * @param {function?} onError
			 * @returns {undefined}
			 */
			Promise.prototype.done = function(onResult, onError) {
				this._handler.visit(this._handler.receiver, onResult, onError);
			};

			/**
			 * Add Error-type and predicate matching to catch.  Examples:
			 * promise.catch(TypeError, handleTypeError)
			 *   .catch(predicate, handleMatchedErrors)
			 *   .catch(handleRemainingErrors)
			 * @param onRejected
			 * @returns {*}
			 */
			Promise.prototype['catch'] = Promise.prototype.otherwise = function(onRejected) {
				if (arguments.length < 2) {
					return origCatch.call(this, onRejected);
				}

				if(typeof onRejected !== 'function') {
					return this.ensure(rejectInvalidPredicate);
				}

				return origCatch.call(this, createCatchFilter(arguments[1], onRejected));
			};

			/**
			 * Wraps the provided catch handler, so that it will only be called
			 * if the predicate evaluates truthy
			 * @param {?function} handler
			 * @param {function} predicate
			 * @returns {function} conditional catch handler
			 */
			function createCatchFilter(handler, predicate) {
				return function(e) {
					return evaluatePredicate(e, predicate)
						? handler.call(this, e)
						: reject(e);
				};
			}

			/**
			 * Ensures that onFulfilledOrRejected will be called regardless of whether
			 * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT
			 * receive the promises' value or reason.  Any returned value will be disregarded.
			 * onFulfilledOrRejected may throw or return a rejected promise to signal
			 * an additional error.
			 * @param {function} handler handler to be called regardless of
			 *  fulfillment or rejection
			 * @returns {Promise}
			 */
			Promise.prototype['finally'] = Promise.prototype.ensure = function(handler) {
				if(typeof handler !== 'function') {
					return this;
				}

				return this.then(function(x) {
					return runSideEffect(handler, this, identity, x);
				}, function(e) {
					return runSideEffect(handler, this, reject, e);
				});
			};

			function runSideEffect (handler, thisArg, propagate, value) {
				var result = handler.call(thisArg);
				return maybeThenable(result)
					? propagateValue(result, propagate, value)
					: propagate(value);
			}

			function propagateValue (result, propagate, x) {
				return resolve(result).then(function () {
					return propagate(x);
				});
			}

			/**
			 * Recover from a failure by returning a defaultValue.  If defaultValue
			 * is a promise, it's fulfillment value will be used.  If defaultValue is
			 * a promise that rejects, the returned promise will reject with the
			 * same reason.
			 * @param {*} defaultValue
			 * @returns {Promise} new promise
			 */
			Promise.prototype['else'] = Promise.prototype.orElse = function(defaultValue) {
				return this.then(void 0, function() {
					return defaultValue;
				});
			};

			/**
			 * Shortcut for .then(function() { return value; })
			 * @param  {*} value
			 * @return {Promise} a promise that:
			 *  - is fulfilled if value is not a promise, or
			 *  - if value is a promise, will fulfill with its value, or reject
			 *    with its reason.
			 */
			Promise.prototype['yield'] = function(value) {
				return this.then(function() {
					return value;
				});
			};

			/**
			 * Runs a side effect when this promise fulfills, without changing the
			 * fulfillment value.
			 * @param {function} onFulfilledSideEffect
			 * @returns {Promise}
			 */
			Promise.prototype.tap = function(onFulfilledSideEffect) {
				return this.then(onFulfilledSideEffect)['yield'](this);
			};

			return Promise;
		};

		function rejectInvalidPredicate() {
			throw new TypeError('catch predicate must be a function');
		}

		function evaluatePredicate(e, predicate) {
			return isError(predicate) ? e instanceof predicate : predicate(e);
		}

		function isError(predicate) {
			return predicate === Error
				|| (predicate != null && predicate.prototype instanceof Error);
		}

		function maybeThenable(x) {
			return (typeof x === 'object' || typeof x === 'function') && x !== null;
		}

		function identity(x) {
			return x;
		}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */
	/** @author Jeff Escalante */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function fold(Promise) {

			Promise.prototype.fold = function(f, z) {
				var promise = this._beget();

				this._handler.fold(function(z, x, to) {
					Promise._handler(z).fold(function(x, z, to) {
						to.resolve(f.call(this, z, x));
					}, x, this, to);
				}, z, promise._handler.receiver, promise._handler);

				return promise;
			};

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

		var inspect = __webpack_require__(44).inspect;

		return function inspection(Promise) {

			Promise.prototype.inspect = function() {
				return inspect(Promise._handler(this));
			};

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function generate(Promise) {

			var resolve = Promise.resolve;

			Promise.iterate = iterate;
			Promise.unfold = unfold;

			return Promise;

			/**
			 * @deprecated Use github.com/cujojs/most streams and most.iterate
			 * Generate a (potentially infinite) stream of promised values:
			 * x, f(x), f(f(x)), etc. until condition(x) returns true
			 * @param {function} f function to generate a new x from the previous x
			 * @param {function} condition function that, given the current x, returns
			 *  truthy when the iterate should stop
			 * @param {function} handler function to handle the value produced by f
			 * @param {*|Promise} x starting value, may be a promise
			 * @return {Promise} the result of the last call to f before
			 *  condition returns true
			 */
			function iterate(f, condition, handler, x) {
				return unfold(function(x) {
					return [x, f(x)];
				}, condition, handler, x);
			}

			/**
			 * @deprecated Use github.com/cujojs/most streams and most.unfold
			 * Generate a (potentially infinite) stream of promised values
			 * by applying handler(generator(seed)) iteratively until
			 * condition(seed) returns true.
			 * @param {function} unspool function that generates a [value, newSeed]
			 *  given a seed.
			 * @param {function} condition function that, given the current seed, returns
			 *  truthy when the unfold should stop
			 * @param {function} handler function to handle the value produced by unspool
			 * @param x {*|Promise} starting value, may be a promise
			 * @return {Promise} the result of the last value produced by unspool before
			 *  condition returns true
			 */
			function unfold(unspool, condition, handler, x) {
				return resolve(x).then(function(seed) {
					return resolve(condition(seed)).then(function(done) {
						return done ? seed : resolve(unspool(seed)).spread(next);
					});
				});

				function next(item, newSeed) {
					return resolve(handler(item)).then(function() {
						return unfold(unspool, condition, handler, newSeed);
					});
				}
			}
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function progress(Promise) {

			/**
			 * @deprecated
			 * Register a progress handler for this promise
			 * @param {function} onProgress
			 * @returns {Promise}
			 */
			Promise.prototype.progress = function(onProgress) {
				return this.then(void 0, void 0, onProgress);
			};

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

		var env = __webpack_require__(23);
		var TimeoutError = __webpack_require__(42);

		function setTimeout(f, ms, x, y) {
			return env.setTimer(function() {
				f(x, y, ms);
			}, ms);
		}

		return function timed(Promise) {
			/**
			 * Return a new promise whose fulfillment value is revealed only
			 * after ms milliseconds
			 * @param {number} ms milliseconds
			 * @returns {Promise}
			 */
			Promise.prototype.delay = function(ms) {
				var p = this._beget();
				this._handler.fold(handleDelay, ms, void 0, p._handler);
				return p;
			};

			function handleDelay(ms, x, h) {
				setTimeout(resolveDelay, ms, x, h);
			}

			function resolveDelay(x, h) {
				h.resolve(x);
			}

			/**
			 * Return a new promise that rejects after ms milliseconds unless
			 * this promise fulfills earlier, in which case the returned promise
			 * fulfills with the same value.
			 * @param {number} ms milliseconds
			 * @param {Error|*=} reason optional rejection reason to use, defaults
			 *   to a TimeoutError if not provided
			 * @returns {Promise}
			 */
			Promise.prototype.timeout = function(ms, reason) {
				var p = this._beget();
				var h = p._handler;

				var t = setTimeout(onTimeout, ms, reason, p._handler);

				this._handler.visit(h,
					function onFulfill(x) {
						env.clearTimer(t);
						this.resolve(x); // this = h
					},
					function onReject(x) {
						env.clearTimer(t);
						this.reject(x); // this = h
					},
					h.notify);

				return p;
			};

			function onTimeout(reason, h, ms) {
				var e = typeof reason === 'undefined'
					? new TimeoutError('timed out after ' + ms + 'ms')
					: reason;
				h.reject(e);
			}

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {

		var setTimer = __webpack_require__(23).setTimer;
		var format = __webpack_require__(135);

		return function unhandledRejection(Promise) {

			var logError = noop;
			var logInfo = noop;
			var localConsole;

			if(typeof console !== 'undefined') {
				// Alias console to prevent things like uglify's drop_console option from
				// removing console.log/error. Unhandled rejections fall into the same
				// category as uncaught exceptions, and build tools shouldn't silence them.
				localConsole = console;
				logError = typeof localConsole.error !== 'undefined'
					? function (e) { localConsole.error(e); }
					: function (e) { localConsole.log(e); };

				logInfo = typeof localConsole.info !== 'undefined'
					? function (e) { localConsole.info(e); }
					: function (e) { localConsole.log(e); };
			}

			Promise.onPotentiallyUnhandledRejection = function(rejection) {
				enqueue(report, rejection);
			};

			Promise.onPotentiallyUnhandledRejectionHandled = function(rejection) {
				enqueue(unreport, rejection);
			};

			Promise.onFatalRejection = function(rejection) {
				enqueue(throwit, rejection.value);
			};

			var tasks = [];
			var reported = [];
			var running = null;

			function report(r) {
				if(!r.handled) {
					reported.push(r);
					logError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));
				}
			}

			function unreport(r) {
				var i = reported.indexOf(r);
				if(i >= 0) {
					reported.splice(i, 1);
					logInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));
				}
			}

			function enqueue(f, x) {
				tasks.push(f, x);
				if(running === null) {
					running = setTimer(flush, 0);
				}
			}

			function flush() {
				running = null;
				while(tasks.length > 0) {
					tasks.shift()(tasks.shift());
				}
			}

			return Promise;
		};

		function throwit(e) {
			throw e;
		}

		function noop() {}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function addWith(Promise) {
			/**
			 * Returns a promise whose handlers will be called with `this` set to
			 * the supplied receiver.  Subsequent promises derived from the
			 * returned promise will also have their handlers called with receiver
			 * as `this`. Calling `with` with undefined or no arguments will return
			 * a promise whose handlers will again be called in the usual Promises/A+
			 * way (no `this`) thus safely undoing any previous `with` in the
			 * promise chain.
			 *
			 * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+
			 * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)
			 *
			 * @param {object} receiver `this` value for all handlers attached to
			 *  the returned promise.
			 * @returns {Promise}
			 */
			Promise.prototype['with'] = Promise.prototype.withThis = function(receiver) {
				var p = this._beget();
				var child = p._handler;
				child.receiver = receiver;
				this._handler.chain(child, receiver);
				return p;
			};

			return Promise;
		};

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));



/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return {
			formatError: formatError,
			formatObject: formatObject,
			tryStringify: tryStringify
		};

		/**
		 * Format an error into a string.  If e is an Error and has a stack property,
		 * it's returned.  Otherwise, e is formatted using formatObject, with a
		 * warning added about e not being a proper Error.
		 * @param {*} e
		 * @returns {String} formatted string, suitable for output to developers
		 */
		function formatError(e) {
			var s = typeof e === 'object' && e !== null && (e.stack || e.message) ? e.stack || e.message : formatObject(e);
			return e instanceof Error ? s : s + ' (WARNING: non-Error used)';
		}

		/**
		 * Format an object, detecting "plain" objects and running them through
		 * JSON.stringify if possible.
		 * @param {Object} o
		 * @returns {string}
		 */
		function formatObject(o) {
			var s = String(o);
			if(s === '[object Object]' && typeof JSON !== 'undefined') {
				s = tryStringify(o, s);
			}
			return s;
		}

		/**
		 * Try to return the result of JSON.stringify(x).  If that fails, return
		 * defaultValue
		 * @param {*} x
		 * @param {*} defaultValue
		 * @returns {String|*} JSON.stringify(x) or defaultValue
		 */
		function tryStringify(x, defaultValue) {
			try {
				return JSON.stringify(x);
			} catch(e) {
				return defaultValue;
			}
		}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process) {/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	(function(define) { 'use strict';
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

		return function makePromise(environment) {

			var tasks = environment.scheduler;
			var emitRejection = initEmitRejection();

			var objectCreate = Object.create ||
				function(proto) {
					function Child() {}
					Child.prototype = proto;
					return new Child();
				};

			/**
			 * Create a promise whose fate is determined by resolver
			 * @constructor
			 * @returns {Promise} promise
			 * @name Promise
			 */
			function Promise(resolver, handler) {
				this._handler = resolver === Handler ? handler : init(resolver);
			}

			/**
			 * Run the supplied resolver
			 * @param resolver
			 * @returns {Pending}
			 */
			function init(resolver) {
				var handler = new Pending();

				try {
					resolver(promiseResolve, promiseReject, promiseNotify);
				} catch (e) {
					promiseReject(e);
				}

				return handler;

				/**
				 * Transition from pre-resolution state to post-resolution state, notifying
				 * all listeners of the ultimate fulfillment or rejection
				 * @param {*} x resolution value
				 */
				function promiseResolve (x) {
					handler.resolve(x);
				}
				/**
				 * Reject this promise with reason, which will be used verbatim
				 * @param {Error|*} reason rejection reason, strongly suggested
				 *   to be an Error type
				 */
				function promiseReject (reason) {
					handler.reject(reason);
				}

				/**
				 * @deprecated
				 * Issue a progress event, notifying all progress listeners
				 * @param {*} x progress event payload to pass to all listeners
				 */
				function promiseNotify (x) {
					handler.notify(x);
				}
			}

			// Creation

			Promise.resolve = resolve;
			Promise.reject = reject;
			Promise.never = never;

			Promise._defer = defer;
			Promise._handler = getHandler;

			/**
			 * Returns a trusted promise. If x is already a trusted promise, it is
			 * returned, otherwise returns a new trusted Promise which follows x.
			 * @param  {*} x
			 * @return {Promise} promise
			 */
			function resolve(x) {
				return isPromise(x) ? x
					: new Promise(Handler, new Async(getHandler(x)));
			}

			/**
			 * Return a reject promise with x as its reason (x is used verbatim)
			 * @param {*} x
			 * @returns {Promise} rejected promise
			 */
			function reject(x) {
				return new Promise(Handler, new Async(new Rejected(x)));
			}

			/**
			 * Return a promise that remains pending forever
			 * @returns {Promise} forever-pending promise.
			 */
			function never() {
				return foreverPendingPromise; // Should be frozen
			}

			/**
			 * Creates an internal {promise, resolver} pair
			 * @private
			 * @returns {Promise}
			 */
			function defer() {
				return new Promise(Handler, new Pending());
			}

			// Transformation and flow control

			/**
			 * Transform this promise's fulfillment value, returning a new Promise
			 * for the transformed result.  If the promise cannot be fulfilled, onRejected
			 * is called with the reason.  onProgress *may* be called with updates toward
			 * this promise's fulfillment.
			 * @param {function=} onFulfilled fulfillment handler
			 * @param {function=} onRejected rejection handler
			 * @param {function=} onProgress @deprecated progress handler
			 * @return {Promise} new promise
			 */
			Promise.prototype.then = function(onFulfilled, onRejected, onProgress) {
				var parent = this._handler;
				var state = parent.join().state();

				if ((typeof onFulfilled !== 'function' && state > 0) ||
					(typeof onRejected !== 'function' && state < 0)) {
					// Short circuit: value will not change, simply share handler
					return new this.constructor(Handler, parent);
				}

				var p = this._beget();
				var child = p._handler;

				parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);

				return p;
			};

			/**
			 * If this promise cannot be fulfilled due to an error, call onRejected to
			 * handle the error. Shortcut for .then(undefined, onRejected)
			 * @param {function?} onRejected
			 * @return {Promise}
			 */
			Promise.prototype['catch'] = function(onRejected) {
				return this.then(void 0, onRejected);
			};

			/**
			 * Creates a new, pending promise of the same type as this promise
			 * @private
			 * @returns {Promise}
			 */
			Promise.prototype._beget = function() {
				return begetFrom(this._handler, this.constructor);
			};

			function begetFrom(parent, Promise) {
				var child = new Pending(parent.receiver, parent.join().context);
				return new Promise(Handler, child);
			}

			// Array combinators

			Promise.all = all;
			Promise.race = race;
			Promise._traverse = traverse;

			/**
			 * Return a promise that will fulfill when all promises in the
			 * input array have fulfilled, or will reject when one of the
			 * promises rejects.
			 * @param {array} promises array of promises
			 * @returns {Promise} promise for array of fulfillment values
			 */
			function all(promises) {
				return traverseWith(snd, null, promises);
			}

			/**
			 * Array<Promise<X>> -> Promise<Array<f(X)>>
			 * @private
			 * @param {function} f function to apply to each promise's value
			 * @param {Array} promises array of promises
			 * @returns {Promise} promise for transformed values
			 */
			function traverse(f, promises) {
				return traverseWith(tryCatch2, f, promises);
			}

			function traverseWith(tryMap, f, promises) {
				var handler = typeof f === 'function' ? mapAt : settleAt;

				var resolver = new Pending();
				var pending = promises.length >>> 0;
				var results = new Array(pending);

				for (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {
					x = promises[i];

					if (x === void 0 && !(i in promises)) {
						--pending;
						continue;
					}

					traverseAt(promises, handler, i, x, resolver);
				}

				if(pending === 0) {
					resolver.become(new Fulfilled(results));
				}

				return new Promise(Handler, resolver);

				function mapAt(i, x, resolver) {
					if(!resolver.resolved) {
						traverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);
					}
				}

				function settleAt(i, x, resolver) {
					results[i] = x;
					if(--pending === 0) {
						resolver.become(new Fulfilled(results));
					}
				}
			}

			function traverseAt(promises, handler, i, x, resolver) {
				if (maybeThenable(x)) {
					var h = getHandlerMaybeThenable(x);
					var s = h.state();

					if (s === 0) {
						h.fold(handler, i, void 0, resolver);
					} else if (s > 0) {
						handler(i, h.value, resolver);
					} else {
						resolver.become(h);
						visitRemaining(promises, i+1, h);
					}
				} else {
					handler(i, x, resolver);
				}
			}

			Promise._visitRemaining = visitRemaining;
			function visitRemaining(promises, start, handler) {
				for(var i=start; i<promises.length; ++i) {
					markAsHandled(getHandler(promises[i]), handler);
				}
			}

			function markAsHandled(h, handler) {
				if(h === handler) {
					return;
				}

				var s = h.state();
				if(s === 0) {
					h.visit(h, void 0, h._unreport);
				} else if(s < 0) {
					h._unreport();
				}
			}

			/**
			 * Fulfill-reject competitive race. Return a promise that will settle
			 * to the same state as the earliest input promise to settle.
			 *
			 * WARNING: The ES6 Promise spec requires that race()ing an empty array
			 * must return a promise that is pending forever.  This implementation
			 * returns a singleton forever-pending promise, the same singleton that is
			 * returned by Promise.never(), thus can be checked with ===
			 *
			 * @param {array} promises array of promises to race
			 * @returns {Promise} if input is non-empty, a promise that will settle
			 * to the same outcome as the earliest input promise to settle. if empty
			 * is empty, returns a promise that will never settle.
			 */
			function race(promises) {
				if(typeof promises !== 'object' || promises === null) {
					return reject(new TypeError('non-iterable passed to race()'));
				}

				// Sigh, race([]) is untestable unless we return *something*
				// that is recognizable without calling .then() on it.
				return promises.length === 0 ? never()
					 : promises.length === 1 ? resolve(promises[0])
					 : runRace(promises);
			}

			function runRace(promises) {
				var resolver = new Pending();
				var i, x, h;
				for(i=0; i<promises.length; ++i) {
					x = promises[i];
					if (x === void 0 && !(i in promises)) {
						continue;
					}

					h = getHandler(x);
					if(h.state() !== 0) {
						resolver.become(h);
						visitRemaining(promises, i+1, h);
						break;
					} else {
						h.visit(resolver, resolver.resolve, resolver.reject);
					}
				}
				return new Promise(Handler, resolver);
			}

			// Promise internals
			// Below this, everything is @private

			/**
			 * Get an appropriate handler for x, without checking for cycles
			 * @param {*} x
			 * @returns {object} handler
			 */
			function getHandler(x) {
				if(isPromise(x)) {
					return x._handler.join();
				}
				return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);
			}

			/**
			 * Get a handler for thenable x.
			 * NOTE: You must only call this if maybeThenable(x) == true
			 * @param {object|function|Promise} x
			 * @returns {object} handler
			 */
			function getHandlerMaybeThenable(x) {
				return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);
			}

			/**
			 * Get a handler for potentially untrusted thenable x
			 * @param {*} x
			 * @returns {object} handler
			 */
			function getHandlerUntrusted(x) {
				try {
					var untrustedThen = x.then;
					return typeof untrustedThen === 'function'
						? new Thenable(untrustedThen, x)
						: new Fulfilled(x);
				} catch(e) {
					return new Rejected(e);
				}
			}

			/**
			 * Handler for a promise that is pending forever
			 * @constructor
			 */
			function Handler() {}

			Handler.prototype.when
				= Handler.prototype.become
				= Handler.prototype.notify // deprecated
				= Handler.prototype.fail
				= Handler.prototype._unreport
				= Handler.prototype._report
				= noop;

			Handler.prototype._state = 0;

			Handler.prototype.state = function() {
				return this._state;
			};

			/**
			 * Recursively collapse handler chain to find the handler
			 * nearest to the fully resolved value.
			 * @returns {object} handler nearest the fully resolved value
			 */
			Handler.prototype.join = function() {
				var h = this;
				while(h.handler !== void 0) {
					h = h.handler;
				}
				return h;
			};

			Handler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {
				this.when({
					resolver: to,
					receiver: receiver,
					fulfilled: fulfilled,
					rejected: rejected,
					progress: progress
				});
			};

			Handler.prototype.visit = function(receiver, fulfilled, rejected, progress) {
				this.chain(failIfRejected, receiver, fulfilled, rejected, progress);
			};

			Handler.prototype.fold = function(f, z, c, to) {
				this.when(new Fold(f, z, c, to));
			};

			/**
			 * Handler that invokes fail() on any handler it becomes
			 * @constructor
			 */
			function FailIfRejected() {}

			inherit(Handler, FailIfRejected);

			FailIfRejected.prototype.become = function(h) {
				h.fail();
			};

			var failIfRejected = new FailIfRejected();

			/**
			 * Handler that manages a queue of consumers waiting on a pending promise
			 * @constructor
			 */
			function Pending(receiver, inheritedContext) {
				Promise.createContext(this, inheritedContext);

				this.consumers = void 0;
				this.receiver = receiver;
				this.handler = void 0;
				this.resolved = false;
			}

			inherit(Handler, Pending);

			Pending.prototype._state = 0;

			Pending.prototype.resolve = function(x) {
				this.become(getHandler(x));
			};

			Pending.prototype.reject = function(x) {
				if(this.resolved) {
					return;
				}

				this.become(new Rejected(x));
			};

			Pending.prototype.join = function() {
				if (!this.resolved) {
					return this;
				}

				var h = this;

				while (h.handler !== void 0) {
					h = h.handler;
					if (h === this) {
						return this.handler = cycle();
					}
				}

				return h;
			};

			Pending.prototype.run = function() {
				var q = this.consumers;
				var handler = this.handler;
				this.handler = this.handler.join();
				this.consumers = void 0;

				for (var i = 0; i < q.length; ++i) {
					handler.when(q[i]);
				}
			};

			Pending.prototype.become = function(handler) {
				if(this.resolved) {
					return;
				}

				this.resolved = true;
				this.handler = handler;
				if(this.consumers !== void 0) {
					tasks.enqueue(this);
				}

				if(this.context !== void 0) {
					handler._report(this.context);
				}
			};

			Pending.prototype.when = function(continuation) {
				if(this.resolved) {
					tasks.enqueue(new ContinuationTask(continuation, this.handler));
				} else {
					if(this.consumers === void 0) {
						this.consumers = [continuation];
					} else {
						this.consumers.push(continuation);
					}
				}
			};

			/**
			 * @deprecated
			 */
			Pending.prototype.notify = function(x) {
				if(!this.resolved) {
					tasks.enqueue(new ProgressTask(x, this));
				}
			};

			Pending.prototype.fail = function(context) {
				var c = typeof context === 'undefined' ? this.context : context;
				this.resolved && this.handler.join().fail(c);
			};

			Pending.prototype._report = function(context) {
				this.resolved && this.handler.join()._report(context);
			};

			Pending.prototype._unreport = function() {
				this.resolved && this.handler.join()._unreport();
			};

			/**
			 * Wrap another handler and force it into a future stack
			 * @param {object} handler
			 * @constructor
			 */
			function Async(handler) {
				this.handler = handler;
			}

			inherit(Handler, Async);

			Async.prototype.when = function(continuation) {
				tasks.enqueue(new ContinuationTask(continuation, this));
			};

			Async.prototype._report = function(context) {
				this.join()._report(context);
			};

			Async.prototype._unreport = function() {
				this.join()._unreport();
			};

			/**
			 * Handler that wraps an untrusted thenable and assimilates it in a future stack
			 * @param {function} then
			 * @param {{then: function}} thenable
			 * @constructor
			 */
			function Thenable(then, thenable) {
				Pending.call(this);
				tasks.enqueue(new AssimilateTask(then, thenable, this));
			}

			inherit(Pending, Thenable);

			/**
			 * Handler for a fulfilled promise
			 * @param {*} x fulfillment value
			 * @constructor
			 */
			function Fulfilled(x) {
				Promise.createContext(this);
				this.value = x;
			}

			inherit(Handler, Fulfilled);

			Fulfilled.prototype._state = 1;

			Fulfilled.prototype.fold = function(f, z, c, to) {
				runContinuation3(f, z, this, c, to);
			};

			Fulfilled.prototype.when = function(cont) {
				runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);
			};

			var errorId = 0;

			/**
			 * Handler for a rejected promise
			 * @param {*} x rejection reason
			 * @constructor
			 */
			function Rejected(x) {
				Promise.createContext(this);

				this.id = ++errorId;
				this.value = x;
				this.handled = false;
				this.reported = false;

				this._report();
			}

			inherit(Handler, Rejected);

			Rejected.prototype._state = -1;

			Rejected.prototype.fold = function(f, z, c, to) {
				to.become(this);
			};

			Rejected.prototype.when = function(cont) {
				if(typeof cont.rejected === 'function') {
					this._unreport();
				}
				runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);
			};

			Rejected.prototype._report = function(context) {
				tasks.afterQueue(new ReportTask(this, context));
			};

			Rejected.prototype._unreport = function() {
				if(this.handled) {
					return;
				}
				this.handled = true;
				tasks.afterQueue(new UnreportTask(this));
			};

			Rejected.prototype.fail = function(context) {
				this.reported = true;
				emitRejection('unhandledRejection', this);
				Promise.onFatalRejection(this, context === void 0 ? this.context : context);
			};

			function ReportTask(rejection, context) {
				this.rejection = rejection;
				this.context = context;
			}

			ReportTask.prototype.run = function() {
				if(!this.rejection.handled && !this.rejection.reported) {
					this.rejection.reported = true;
					emitRejection('unhandledRejection', this.rejection) ||
						Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);
				}
			};

			function UnreportTask(rejection) {
				this.rejection = rejection;
			}

			UnreportTask.prototype.run = function() {
				if(this.rejection.reported) {
					emitRejection('rejectionHandled', this.rejection) ||
						Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);
				}
			};

			// Unhandled rejection hooks
			// By default, everything is a noop

			Promise.createContext
				= Promise.enterContext
				= Promise.exitContext
				= Promise.onPotentiallyUnhandledRejection
				= Promise.onPotentiallyUnhandledRejectionHandled
				= Promise.onFatalRejection
				= noop;

			// Errors and singletons

			var foreverPendingHandler = new Handler();
			var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);

			function cycle() {
				return new Rejected(new TypeError('Promise cycle'));
			}

			// Task runners

			/**
			 * Run a single consumer
			 * @constructor
			 */
			function ContinuationTask(continuation, handler) {
				this.continuation = continuation;
				this.handler = handler;
			}

			ContinuationTask.prototype.run = function() {
				this.handler.join().when(this.continuation);
			};

			/**
			 * Run a queue of progress handlers
			 * @constructor
			 */
			function ProgressTask(value, handler) {
				this.handler = handler;
				this.value = value;
			}

			ProgressTask.prototype.run = function() {
				var q = this.handler.consumers;
				if(q === void 0) {
					return;
				}

				for (var c, i = 0; i < q.length; ++i) {
					c = q[i];
					runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);
				}
			};

			/**
			 * Assimilate a thenable, sending it's value to resolver
			 * @param {function} then
			 * @param {object|function} thenable
			 * @param {object} resolver
			 * @constructor
			 */
			function AssimilateTask(then, thenable, resolver) {
				this._then = then;
				this.thenable = thenable;
				this.resolver = resolver;
			}

			AssimilateTask.prototype.run = function() {
				var h = this.resolver;
				tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);

				function _resolve(x) { h.resolve(x); }
				function _reject(x)  { h.reject(x); }
				function _notify(x)  { h.notify(x); }
			};

			function tryAssimilate(then, thenable, resolve, reject, notify) {
				try {
					then.call(thenable, resolve, reject, notify);
				} catch (e) {
					reject(e);
				}
			}

			/**
			 * Fold a handler value with z
			 * @constructor
			 */
			function Fold(f, z, c, to) {
				this.f = f; this.z = z; this.c = c; this.to = to;
				this.resolver = failIfRejected;
				this.receiver = this;
			}

			Fold.prototype.fulfilled = function(x) {
				this.f.call(this.c, this.z, x, this.to);
			};

			Fold.prototype.rejected = function(x) {
				this.to.reject(x);
			};

			Fold.prototype.progress = function(x) {
				this.to.notify(x);
			};

			// Other helpers

			/**
			 * @param {*} x
			 * @returns {boolean} true iff x is a trusted Promise
			 */
			function isPromise(x) {
				return x instanceof Promise;
			}

			/**
			 * Test just enough to rule out primitives, in order to take faster
			 * paths in some code
			 * @param {*} x
			 * @returns {boolean} false iff x is guaranteed *not* to be a thenable
			 */
			function maybeThenable(x) {
				return (typeof x === 'object' || typeof x === 'function') && x !== null;
			}

			function runContinuation1(f, h, receiver, next) {
				if(typeof f !== 'function') {
					return next.become(h);
				}

				Promise.enterContext(h);
				tryCatchReject(f, h.value, receiver, next);
				Promise.exitContext();
			}

			function runContinuation3(f, x, h, receiver, next) {
				if(typeof f !== 'function') {
					return next.become(h);
				}

				Promise.enterContext(h);
				tryCatchReject3(f, x, h.value, receiver, next);
				Promise.exitContext();
			}

			/**
			 * @deprecated
			 */
			function runNotify(f, x, h, receiver, next) {
				if(typeof f !== 'function') {
					return next.notify(x);
				}

				Promise.enterContext(h);
				tryCatchReturn(f, x, receiver, next);
				Promise.exitContext();
			}

			function tryCatch2(f, a, b) {
				try {
					return f(a, b);
				} catch(e) {
					return reject(e);
				}
			}

			/**
			 * Return f.call(thisArg, x), or if it throws return a rejected promise for
			 * the thrown exception
			 */
			function tryCatchReject(f, x, thisArg, next) {
				try {
					next.become(getHandler(f.call(thisArg, x)));
				} catch(e) {
					next.become(new Rejected(e));
				}
			}

			/**
			 * Same as above, but includes the extra argument parameter.
			 */
			function tryCatchReject3(f, x, y, thisArg, next) {
				try {
					f.call(thisArg, x, y, next);
				} catch(e) {
					next.become(new Rejected(e));
				}
			}

			/**
			 * @deprecated
			 * Return f.call(thisArg, x), or if it throws, *return* the exception
			 */
			function tryCatchReturn(f, x, thisArg, next) {
				try {
					next.notify(f.call(thisArg, x));
				} catch(e) {
					next.notify(e);
				}
			}

			function inherit(Parent, Child) {
				Child.prototype = objectCreate(Parent.prototype);
				Child.prototype.constructor = Child;
			}

			function snd(x, y) {
				return y;
			}

			function noop() {}

			function initEmitRejection() {
				/*global process, self, CustomEvent*/
				if(typeof process !== 'undefined' && process !== null
					&& typeof process.emit === 'function') {
					// Returning falsy here means to call the default
					// onPotentiallyUnhandledRejection API.  This is safe even in
					// browserify since process.emit always returns falsy in browserify:
					// https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46
					return function(type, rejection) {
						return type === 'unhandledRejection'
							? process.emit(type, rejection.value, rejection)
							: process.emit(type, rejection);
					};
				} else if(typeof self !== 'undefined' && typeof CustomEvent === 'function') {
					return (function(noop, self, CustomEvent) {
						var hasCustomEvent = false;
						try {
							var ev = new CustomEvent('unhandledRejection');
							hasCustomEvent = ev instanceof CustomEvent;
						} catch (e) {}

						return !hasCustomEvent ? noop : function(type, rejection) {
							var ev = new CustomEvent(type, {
								detail: {
									reason: rejection.value,
									key: rejection
								},
								bubbles: false,
								cancelable: true
							});

							return !self.dispatchEvent(ev);
						};
					}(noop, self, CustomEvent));
				}

				return noop;
			}

			return Promise;
		};
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}(__webpack_require__(1)));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2013 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			return {

				/**
				 * Find objects within a graph the contain a property of a certain name.
				 *
				 * NOTE: this method will not discover object graph cycles.
				 *
				 * @param {*} obj object to search on
				 * @param {string} prop name of the property to search for
				 * @param {Function} callback function to receive the found properties and their parent
				 */
				findProperties: function findProperties(obj, prop, callback) {
					if (typeof obj !== 'object' || obj === null) { return; }
					if (prop in obj) {
						callback(obj[prop], obj, prop);
					}
					Object.keys(obj).forEach(function (key) {
						findProperties(obj[key], prop, callback);
					});
				}

			};

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2013 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var when;

			when = __webpack_require__(8);

			/**
			 * Create a promise whose work is started only when a handler is registered.
			 *
			 * The work function will be invoked at most once. Thrown values will result
			 * in promise rejection.
			 *
			 * @param {Function} work function whose ouput is used to resolve the
			 *   returned promise.
			 * @returns {Promise} a lazy promise
			 */
			function lazyPromise(work) {
				var defer, started, resolver, promise, then;

				defer = when.defer();
				started = false;

				resolver = defer.resolver;
				promise = defer.promise;
				then = promise.then;

				promise.then = function () {
					if (!started) {
						started = true;
						when.attempt(work).then(resolver.resolve, resolver.reject);
					}
					return then.apply(promise, arguments);
				};

				return promise;
			}

			return lazyPromise;

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2015 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {

			var charMap;

			charMap = (function () {
				var strings = {
					alpha: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
					digit: '0123456789'
				};

				strings.genDelims = ':/?#[]@';
				strings.subDelims = '!$&\'()*+,;=';
				strings.reserved = strings.genDelims + strings.subDelims;
				strings.unreserved = strings.alpha + strings.digit + '-._~';
				strings.url = strings.reserved + strings.unreserved;
				strings.scheme = strings.alpha + strings.digit + '+-.';
				strings.userinfo = strings.unreserved + strings.subDelims + ':';
				strings.host = strings.unreserved + strings.subDelims;
				strings.port = strings.digit;
				strings.pchar = strings.unreserved + strings.subDelims + ':@';
				strings.segment = strings.pchar;
				strings.path = strings.segment + '/';
				strings.query = strings.pchar + '/?';
				strings.fragment = strings.pchar + '/?';

				return Object.keys(strings).reduce(function (charMap, set) {
					charMap[set] = strings[set].split('').reduce(function (chars, myChar) {
						chars[myChar] = true;
						return chars;
					}, {});
					return charMap;
				}, {});
			}());

			function encode(str, allowed) {
				if (typeof str !== 'string') {
					throw new Error('String required for URL encoding');
				}
				return str.split('').map(function (myChar) {
					if (allowed.hasOwnProperty(myChar)) {
						return myChar;
					}
					var code = myChar.charCodeAt(0);
					if (code <= 127) {
						return '%' + code.toString(16).toUpperCase();
					}
					else {
						return encodeURIComponent(myChar).toUpperCase();
					}
				}).join('');
			}

			function makeEncoder(allowed) {
				allowed = allowed || charMap.unreserved;
				return function (str) {
					return encode(str, allowed);
				};
			}

			function decode(str) {
				return decodeURIComponent(str);
			}

			return {

				/*
				 * Decode URL encoded strings
				 *
				 * @param {string} URL encoded string
				 * @returns {string} URL decoded string
				 */
				decode: decode,

				/*
				 * URL encode a string
				 *
				 * All but alpha-numerics and a very limited set of punctuation - . _ ~ are
				 * encoded.
				 *
				 * @param {string} string to encode
				 * @returns {string} URL encoded string
				 */
				encode: makeEncoder(),

				/*
				* URL encode a URL
				*
				* All character permitted anywhere in a URL are left unencoded even
				* if that character is not permitted in that portion of a URL.
				*
				* Note: This method is typically not what you want.
				*
				* @param {string} string to encode
				* @returns {string} URL encoded string
				*/
				encodeURL: makeEncoder(charMap.url),

				/*
				 * URL encode the scheme portion of a URL
				 *
				 * @param {string} string to encode
				 * @returns {string} URL encoded string
				 */
				encodeScheme: makeEncoder(charMap.scheme),

				/*
				 * URL encode the user info portion of a URL
				 *
				 * @param {string} string to encode
				 * @returns {string} URL encoded string
				 */
				encodeUserInfo: makeEncoder(charMap.userinfo),

				/*
				 * URL encode the host portion of a URL
				 *
				 * @param {string} string to encode
				 * @returns {string} URL encoded string
				 */
				encodeHost: makeEncoder(charMap.host),

				/*
				 * URL encode the port portion of a URL
				 *
				 * @param {string} string to encode
				 * @returns {string} URL encoded string
				 */
				encodePort: makeEncoder(charMap.port),

				/*
				 * URL encode a path segment portion of a URL
				 *
				 * @param {string} string to encode
				 * @returns {string} URL encoded string
				 */
				encodePathSegment: makeEncoder(charMap.segment),

				/*
				 * URL encode the path portion of a URL
				 *
				 * @param {string} string to encode
				 * @returns {string} URL encoded string
				 */
				encodePath: makeEncoder(charMap.path),

				/*
				 * URL encode the query portion of a URL
				 *
				 * @param {string} string to encode
				 * @returns {string} URL encoded string
				 */
				encodeQuery: makeEncoder(charMap.query),

				/*
				 * URL encode the fragment portion of a URL
				 *
				 * @param {string} string to encode
				 * @returns {string} URL encoded string
				 */
				encodeFragment: makeEncoder(charMap.fragment)

			};

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Copyright 2015 the original author or authors
	 * @license MIT, see LICENSE.txt for details
	 *
	 * @author Scott Andrews
	 */

	(function (define) {
		'use strict';

		var undef;

		!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {

			var uriEncoder, operations, prefixRE;

			uriEncoder = __webpack_require__(139);

			prefixRE = /^([^:]*):([0-9]+)$/;
			operations = {
				'':  { first: '',  separator: ',', named: false, empty: '',  encoder: uriEncoder.encode },
				'+': { first: '',  separator: ',', named: false, empty: '',  encoder: uriEncoder.encodeURL },
				'#': { first: '#', separator: ',', named: false, empty: '',  encoder: uriEncoder.encodeURL },
				'.': { first: '.', separator: '.', named: false, empty: '',  encoder: uriEncoder.encode },
				'/': { first: '/', separator: '/', named: false, empty: '',  encoder: uriEncoder.encode },
				';': { first: ';', separator: ';', named: true,  empty: '',  encoder: uriEncoder.encode },
				'?': { first: '?', separator: '&', named: true,  empty: '=', encoder: uriEncoder.encode },
				'&': { first: '&', separator: '&', named: true,  empty: '=', encoder: uriEncoder.encode },
				'=': { reserved: true },
				',': { reserved: true },
				'!': { reserved: true },
				'@': { reserved: true },
				'|': { reserved: true }
			};

			function apply(operation, expression, params) {
				/*jshint maxcomplexity:11 */
				return expression.split(',').reduce(function (result, variable) {
					var opts, value;

					opts = {};
					if (variable.slice(-1) === '*') {
						variable = variable.slice(0, -1);
						opts.explode = true;
					}
					if (prefixRE.test(variable)) {
						var prefix = prefixRE.exec(variable);
						variable = prefix[1];
						opts.maxLength = parseInt(prefix[2]);
					}

					variable = uriEncoder.decode(variable);
					value = params[variable];

					if (value === undef || value === null) {
						return result;
					}
					if (Array.isArray(value)) {
						result += value.reduce(function (result, value) {
							if (result.length) {
								result += opts.explode ? operation.separator : ',';
								if (operation.named && opts.explode) {
									result += operation.encoder(variable);
									result += value.length ? '=' : operation.empty;
								}
							}
							else {
								result += operation.first;
								if (operation.named) {
									result += operation.encoder(variable);
									result += value.length ? '=' : operation.empty;
								}
							}
							result += operation.encoder(value);
							return result;
						}, '');
					}
					else if (typeof value === 'object') {
						result += Object.keys(value).reduce(function (result, name) {
							if (result.length) {
								result += opts.explode ? operation.separator : ',';
							}
							else {
								result += operation.first;
								if (operation.named && !opts.explode) {
									result += operation.encoder(variable);
									result += value[name].length ? '=' : operation.empty;
								}
							}
							result += operation.encoder(name);
							result += opts.explode ? '=' : ',';
							result += operation.encoder(value[name]);
							return result;
						}, '');
					}
					else {
						value = String(value);
						if (opts.maxLength) {
							value = value.slice(0, opts.maxLength);
						}
						result += result.length ? operation.separator : operation.first;
						if (operation.named) {
							result += operation.encoder(variable);
							result += value.length ? '=' : operation.empty;
						}
						result += operation.encoder(value);
					}

					return result;
				}, '');
			}

			function expandExpression(expression, params) {
				var operation;

				operation = operations[expression.slice(0,1)];
				if (operation) {
					expression = expression.slice(1);
				}
				else {
					operation = operations[''];
				}

				if (operation.reserved) {
					throw new Error('Reserved expression operations are not supported');
				}

				return apply(operation, expression, params);
			}

			function expandTemplate(template, params) {
				var start, end, uri;

				uri = '';
				end = 0;
				while (true) {
					start = template.indexOf('{', end);
					if (start === -1) {
						// no more expressions
						uri += template.slice(end);
						break;
					}
					uri += template.slice(end, start);
					end = template.indexOf('}', start) + 1;
					uri += expandExpression(template.slice(start + 1, end - 1), params);
				}

				return uri;
			}

			return {

				/**
				 * Expand a URI Template with parameters to form a URI.
				 *
				 * Full implementation (level 4) of rfc6570.
				 * @see https://tools.ietf.org/html/rfc6570
				 *
				 * @param {string} template URI template
				 * @param {Object} [params] params to apply to the template durring expantion
				 * @returns {string} expanded URI
				 */
				expand: expandTemplate

			};

		}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}(
		__webpack_require__(1)
		// Boilerplate for AMD and Node
	));


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var isarray = __webpack_require__(142)

	/**
	 * Expose `pathToRegexp`.
	 */
	module.exports = pathToRegexp
	module.exports.parse = parse
	module.exports.compile = compile
	module.exports.tokensToFunction = tokensToFunction
	module.exports.tokensToRegExp = tokensToRegExp

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g')

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {String} str
	 * @return {Array}
	 */
	function parse (str) {
	  var tokens = []
	  var key = 0
	  var index = 0
	  var path = ''
	  var res

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0]
	    var escaped = res[1]
	    var offset = res.index
	    path += str.slice(index, offset)
	    index = offset + m.length

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1]
	      continue
	    }

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path)
	      path = ''
	    }

	    var prefix = res[2]
	    var name = res[3]
	    var capture = res[4]
	    var group = res[5]
	    var suffix = res[6]
	    var asterisk = res[7]

	    var repeat = suffix === '+' || suffix === '*'
	    var optional = suffix === '?' || suffix === '*'
	    var delimiter = prefix || '/'
	    var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?')

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      pattern: escapeGroup(pattern)
	    })
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index)
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path)
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {String}   str
	 * @return {Function}
	 */
	function compile (str) {
	  return tokensToFunction(parse(str))
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length)

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^' + tokens[i].pattern + '$')
	    }
	  }

	  return function (obj) {
	    var path = ''
	    var data = obj || {}

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i]

	      if (typeof token === 'string') {
	        path += token

	        continue
	      }

	      var value = data[token.name]
	      var segment

	      if (value == null) {
	        if (token.optional) {
	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received "' + value + '"')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encodeURIComponent(value[j])

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment
	        }

	        continue
	      }

	      segment = encodeURIComponent(value)

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {String} str
	 * @return {String}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {String} group
	 * @return {String}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {RegExp} re
	 * @param  {Array}  keys
	 * @return {RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {String}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {RegExp} path
	 * @param  {Array}  keys
	 * @return {RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g)

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        pattern: null
	      })
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {Array}  path
	 * @param  {Array}  keys
	 * @param  {Object} options
	 * @return {RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = []

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source)
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {String} path
	 * @param  {Array}  keys
	 * @param  {Object} options
	 * @return {RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  var tokens = parse(path)
	  var re = tokensToRegExp(tokens, options)

	  // Attach keys back to the regexp.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] !== 'string') {
	      keys.push(tokens[i])
	    }
	  }

	  return attachKeys(re, keys)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {Array}  tokens
	 * @param  {Array}  keys
	 * @param  {Object} options
	 * @return {RegExp}
	 */
	function tokensToRegExp (tokens, options) {
	  options = options || {}

	  var strict = options.strict
	  var end = options.end !== false
	  var route = ''
	  var lastToken = tokens[tokens.length - 1]
	  var endsWithSlash = typeof lastToken === 'string' && /\/$/.test(lastToken)

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i]

	    if (typeof token === 'string') {
	      route += escapeString(token)
	    } else {
	      var prefix = escapeString(token.prefix)
	      var capture = token.pattern

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*'
	      }

	      if (token.optional) {
	        if (prefix) {
	          capture = '(?:' + prefix + '(' + capture + '))?'
	        } else {
	          capture = '(' + capture + ')?'
	        }
	      } else {
	        capture = prefix + '(' + capture + ')'
	      }

	      route += capture
	    }
	  }

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?'
	  }

	  if (end) {
	    route += '$'
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithSlash ? '' : '(?=\\/|$)'
	  }

	  return new RegExp('^' + route, flags(options))
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(String|RegExp|Array)} path
	 * @param  {Array}                 [keys]
	 * @param  {Object}                [options]
	 * @return {RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  keys = keys || []

	  if (!isarray(keys)) {
	    options = keys
	    keys = []
	  } else if (!options) {
	    options = {}
	  }

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, keys, options)
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(path, keys, options)
	  }

	  return stringToRegexp(path, keys, options)
	}


/***/ },
/* 142 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var data = __webpack_require__(47);

	var DataHandler = {

	    init: function (context, next) {

	        if (context.init) data.init();
	        context.state.init.data = true;
	        context.save();

	        next();

	    },

	    library: function (context, next) {

	        data.library.init(function (err, lib) {

	            if (err) console.error(err);
	            else {
	                context.state.libraryCount = data.library.db.count();
	                console.log('DATA:: library loaded: ' + data.library.db.count());
	            }
	            context.save();
	            next();

	        });

	    },


	    search: function (context, next) {

	        data.search.getGenres(function (err, data) {

	            if (err) console.error(err);
	            else context.state.genres = data;

	            context.save();
	            next();

	        });
	    },

	    manga: function (context, next) {

	        var mangaID = context.params.id;

	        data.manga.get(mangaID, function (err, mangaData) {

	            if (err) console.error(err);
	            else context.state.manga = mangaData;

	            context.save();
	            next();

	        });
	    },

	    chapter: function (context, next) {

	        var chapterID = context.params.id;

	        data.chapter.get(chapterID, function (err, chapterData) {

	            if (err) console.err(err);
	            else context.state.chapter = chapterData;

	            context.save();
	            next();

	        });

	    }
	};

	module.exports = DataHandler;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var view = __webpack_require__(147);
	var data = __webpack_require__(47);

	var ViewHandler = {

	    init: function (context, next) {

	        if (context.init) view.init();
	        context.state.init = {};
	        context.state.init.view = true;
	        context.save();

	        next();

	    },


	    library: function(context, next) {

	        view.navbar.setType('menu');
	        view.navbar.setTitle('Library');
	        view.library.init();
	        if (context.state.libraryCount > 0 ) view.library.update(data.library.db.find());
	        else view.library.empty();
	    },


	    search: function(context, next) {
	        view.navbar.setType('menu');
	        view.navbar.setTitle('Search');
	        view.search.init();

	        if (context.state.genres) view.search.genres(context.state.genres);

	        var handleSearch = function (event) {
	            event.preventDefault();
	            var genreID, genre, i;

	            //close options
	            $('.collapsible-header.active').trigger('click.collapse');

	            var $genreInputs = $('.genres input');

	            // set some defaults
	            var options = {
	                all: null,
	                end: null,
	                start: null,
	                sort: 'pop',
	                genres: {good: [], bad: []},
	                string: $('#search').val()
	            };

	            // check for genres
	            for (i = $genreInputs.length -1; i >= 0; i-=1) {
	                genre = $genreInputs[i];
	                genreID = genre.id.substr(1, genre.id.length);
	                if (genre.checked) options.genres.good.push(genreID);
	                else options.genres.bad.push(genreID);
	            }

	            if (options.string === '' && options.genres.good.length === 0) {

	                data.search.top(function (err, docs) {

	                    if (err) return view.error(err);
	                    view.search.updateList(docs);

	                });

	            } else {

	                //return all matching mangas, no pagination
	                options.all = true;

	                data.search.run(options, function (err, docs) {

	                    if (err) return view.error(err);
	                    view.search.updateList(docs);

	                });
	            }
	        };


	        // set triggers for search
	        // on input, but more than 2 chars
	        $('.input-field').on('input', function (event) {
	            if ($('#search').val().length < 2) {
	                event.preventDefault();
	                return;
	            } else {
	                handleSearch();
	            }
	        });

	        // on form button
	        $('.form-button').on('click', handleSearch);

	        // on form submit (covers iOS not respecting preventDefault)
	        $('form').on('submit', handleSearch);

	        $('form').submit();
	    },


	    settings: function (context, next) {
	        view.navbar.setType('menu');
	        view.navbar.setTitle('Settings');
	        view.settings.init();
	    },


	    account: function (context, next) {
	        view.navbar.setType('menu');
	        view.navbar.setTitle('My Account');
	        view.account.init();
	    },


	    about: function (context, next) {
	        view.navbar.setType('menu');
	        view.navbar.setTitle('About Us');
	        view.about.init();
	    },


	    manga: function (context, next) {

	        view.navbar.setType('menu');
	        view.navbar.setTitle('Manga');


	        var manga = context.state.manga;

	        view.manga.init(manga);
	        view.navbar.setTitle(manga.title);




	    },


	    chapter: function (context, next) {
	        view.navbar.setType('menu');
	        view.navbar.setTitle('Chapter');

	        var chapter = context.state.chapter;

	        view.chapter.init(chapter.images);
	    }
	};


	module.exports = ViewHandler;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Firebase = __webpack_require__(28);
	var net = __webpack_require__(27);

	var mangaRef = new Firebase('https://flyleafco.firebaseio.com/catalog/mangaeden/manga');
	var metaRef = new Firebase('https://flyleafco.firebaseio.com/catalog/mangaeden/meta');

	var MangaEden = {

	    manga: function(mangaId, callback) {
	        if (mangaId === undefined || typeof mangaId !== 'string') callback(new Error('ERROR:: mangaId invalid'), null);

	        var path = 'http://www.mangaeden.com/api/manga/'+ mangaId +'/';
	        net.get(path, function(err, data) {

	            if (err) return callback(err, null);

	            var manga = JSON.parse(data);
	            console.log('mangaEden.js:: Got Manga: ' + manga.title);
	            callback(err, manga);
	        });
	    },

	    chapter: function(chapterId, callback) {
	        if (chapterId === undefined || typeof chapterId !== 'string') callback(new Error('ERROR:: chapterId invalid'), null);

	        var path = 'http://www.mangaeden.com/api/chapter/'+ chapterId +'/';
	        net.get(path, function(err, data) {

	            if (err) callback(err, null);

	            var chapter = JSON.parse(data);
	            console.log('mangaEden.js:: Got Chapter:', chapter);
	            callback(err, chapter);
	        });
	    }

	};

	module.exports = MangaEden;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Firebase = __webpack_require__(28);
	var net = __webpack_require__(27);

	var Auth = Object.create(net);

	Auth.firebase = new Firebase('https://flyleafco.firebaseio.com/');

	Auth.getAuth = function() {
	    return this.firebase.getAuth();
	};

	Auth.signIn = function(email, password, callback) {

	    this.firebase.authWithPassword({

	        'email': email,
	        'password': password

	    }, function onComplete (error, authData) {

	        if (error) callback(error, null);
	        else {
	            console.log('authData', authData);
	            callback(null, authData);

	        }
	    });
	};

	Auth.signUp = function(email, password, callback) {

	    this.firebase.createUser({

	        'email': email,
	        'password': password

	    }, function onComplete (error, userData) {

	        if (error) callback(error, null);
	        else {
	            console.log('userData', userData);
	            callback(null, userData);

	        }
	    });
	};

	Auth.signOut = function() {
	    this.firebase.unauth();
	};

	module.exports = Auth;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var material = __webpack_require__(148);
	var page = __webpack_require__(46);

	var View = {

	    navbar: {},

	    // Start navbar and side menu
	    init: function (context, next) {

	        // generate list items
	        var makeListItems = function () {
	            var library     = material.navListItem({iconClass: 'mdi-av-my-library-books', text: 'Library', href: '#!library'});
	            var search      = material.navListItem({iconClass: 'mdi-action-search', text: 'Search', href: '#!search'});
	            var settings    = material.navListItem({iconClass: 'mdi-action-settings', text: 'Settings', href: '#!settings'});
	            var account     = material.navListItem({iconClass: 'mdi-action-account-box', text: 'Account', href: '#!account'});
	            var about       = material.navListItem({iconClass: 'mdi-action-info', text: 'About Us', href: '#!about'});

	            return [library, search, settings, account, about];
	        };

	        // create list containers
	        var ulSideNav   = material.ul({classList: 'side-nav', id: 'mobile-nav'});
	        var ulTopNav    = material.ul({classList: ['right', 'hide-on-med-and-down']});

	        // add list items to ul containers
	        ulSideNav.add(makeListItems());
	        ulTopNav.add(makeListItems());

	        // create column that holds nav
	        var column12 = material.div({classList: ['col', 's12']})
	            .add(material.a({classList: 'nav-title', text: 'Flyleaf.co'}))
	            .add(material.a({classList: 'button-collapse', href: '/menu', data: { activates: 'mobile-nav' }})
	                .add(material.i({classList: 'mdi-navigation-menu'})))
	            .add(ulTopNav)
	            .add(ulSideNav);

	        var navbar = material.div({classList: 'navbar-fixed'})
	            .add(material.nav()
	                .add(material.div({classList: ['nav-wrapper', 'green']})
	                    .add(column12)));

	        material.render(navbar, document.body);
	        material.render(material.div({classList: 'main-view'}), document.body);
	        $('.button-collapse').sideNav({menuWidth: 240, activationWidth: 70, closeOnClick: true});

	        // End navbar and side menu

	        this.navbar = navbar;

	        this.navbar.setType = function (type) {

	            type = type || 'menu';
	            if (type === this.type) return;

	            var button = $('.button-collapse');
	            var icon = $('.button-collapse i');
	            var backClass = 'mdi-navigation-chevron-left';
	            var menuClass = 'mdi-navigation-menu';


	            button.off('click');
	            if (type === 'back') {
	                icon.removeClass(menuClass);
	                icon.addClass(backClass);
	                button.on('click', function(event) {
	                    event.preventDefault();
	                    window.history.back();
	                });
	            } else if (type === 'menu') {
	                icon.removeClass(backClass);
	                icon.addClass(menuClass);
	                button.sideNav({menuWidth: 240, activationWidth: 70, closeOnClick: true});
	            }

	            this.type = type;
	        };

	        this.navbar.setTitle = function (title) {
	            title = title || 'Flyleaf.co';
	            var navTitle = document.querySelector('.nav-title');
	            navTitle.innerHTML = title;
	        };
	    },


	    library: {
	        init: function () {
	            var mainContainer = material.div();
	            var listContainer = material.ul({id: 'library', classList: 'collection'});
	            var header = material.div({classList: 'collection-header', text: 'Loading..'});

	            mainContainer
	                .add(header)
	                .add(listContainer);

	           material.view(mainContainer);
	           this.header = header;
	        },

	        empty: function (err) {
	            if (err) console.log(err);
	            var mainContainer = material.div({classList: ['container', 'section']});
	            mainContainer
	                .add(material.p({text: 'You don\'t have books fool!'}));
	            material.view(mainContainer);

	        },

	        makeListItem: function (manga) {

	            var item = material.li({
	                classList: ['collection-item', 'avatar', 'waves-effect', 'waves-green'],
	                id: manga._id,
	                onclick: function () {
	                    // page('/manga/' + this.id);
	                    console.log('test');
	                }
	            });

	            var image = material.img({
	                classList: 'thumb-image',
	                src: 'http://cdn.mangaeden.com/mangasimg/' + manga.image,
	                alt: manga.title
	            });

	            var title = material.h6({
	                classList: ['title', 'flow-text', 'truncate'],
	                text: manga.title
	            });

	            item.add(image)
	                .add(title);


	            var details = document.createElement('p');
	                details.classList.add('flow-text');
	                details.innerHTML  = 'Author: ' + manga.author + '<br>' +
	                // 'Artist: ' + manga.artist + '<br>' +
	                'Latest Chapter: ' + manga.chapters_len;
	            item.appendChild(details);


	            return item;
	        },

	        update: function (libArray) {

	            var $library = $('#library'),
	                item, i;
	            for (i=0; i <= libArray.length -1; i++) {
	                item = this.makeListItem(libArray[i]);
	                $library.append(item);
	            }
	        },

	        append: function () {
	            // TODO: append item individually
	        }
	    },


	    search: {
	        init: function () {
	            var formWrapper = material.div({classList: 'form-wrapper'});

	            var inputField = material.div({classList: 'input-field'});
	            var searchForm = material.form().add(inputField);


	            inputField
	                .add(material.input({id: 'search', type: 'text', required: true}))
	                .add(material.label({'for': 'search'})
	                    .add(material.i({classList: 'mdi-action-search'})))
	                .add(material.div({classList: 'form-button'})
	                    .add(material.i({classList: 'mdi-content-send'})));

	            var header = material.div({classList: 'collection-header'})
	                    .add(material.div({text:'Search'}));

	            formWrapper
	                .add(header)
	                .add(searchForm);

	            material.view(formWrapper);

	            // var newFilter = function (name) {
	            //     return material.p()
	            //         .add(material.input({id: 'f'+name, type: 'checkbox', classList: 'filled-in'}))
	            //         .add(material.label({'for': 'f'+name, text: name}));
	            // };

	            // data.getGenres(function (err, genres) {
	            //     for (var i = 0; i < genres.length; i++) {
	            //         if (i%2 !== 0) genreRight.add(newFilter(genres[i]));
	            //         else genreLeft.add(newFilter(genres[i]));
	            //     }
	            // });
	        },

	        genres: function (genres) {

	            var i = 0;
	            var $formWrapper = $('.form-wrapper');
	            var collapsible = material.ul({classList: 'collapsible', id: 'filter'})
	                .set('data-collapsible', 'accordion');

	            var buttonGroup = material.div({classList: 'button-group'});
	            var filters = material.div({classList: 'filters'});
	            var genre = material.div({classList: 'genres'});

	            var genreLeft = material.div({classList: 'genresLeft'});
	            var genreRight = material.div({classList: 'genresRight'});

	            var newGenre = function (name) {
	                return material.p()
	                    .add(material.input({id: 'g'+name, type: 'checkbox', classList: 'filled-in'}))
	                    .add(material.label({'for': 'g'+name, text: name}));
	            };

	            collapsible
	                .add(material.li()
	                    .add(material.div({classList: 'collapsible-header'})
	                        .add(material.i({classList: 'mdi-content-filter-list'}))
	                        .add(material.text('Genres')))
	                    .add(material.div({classList: 'collapsible-body'})
	                        .add(filters
	                            .add(genre
	                                .add(genreLeft)
	                                .add(genreRight)))))
	                .add(material.li()
	                    .add(material.div({classList: 'collapsible-header'})
	                        .add(material.i({classList: 'mdi-content-sort'}))
	                        .add(material.text('Sort')))
	                    .add(material.div({classList: 'collapsible-body'})
	                        .add(material.p()
	                            .add(buttonGroup))));

	            buttonGroup
	                .add(material.button({
	                    classList: ['waves-effect', 'waves-light', 'green', 'btn'],
	                    innerHTML: 'POP &#x21F5'}))
	                .add(material.button({
	                    classList: ['waves-effect', 'waves-light', 'green', 'btn'],
	                    innerHTML: 'A-Z &#x21F5'}));

	            for (i = 0; i < genres.length; i+=1) {
	                if (i%2 !== 0) genreRight.add(newGenre(genres[i]));
	                else genreLeft.add(newGenre(genres[i]));
	            }


	            $formWrapper.append(collapsible);
	            $('#filter').collapsible();

	        },

	        updateList: function (mangaList) {
	            var listContainer = $('#results')[0];
	            if (listContainer === undefined) {
	                material.node(material.ul({id: 'results', classList: 'collection'}));
	                listContainer  = $('#results')[0];
	            }

	            listContainer.innerHTML = '';

	            var onclick = function () {
	                // console.log(page);
	                page('/manga/' + this.id);

	            };

	            for (var i = 0; i <= mangaList.length - 1; i++) {

	                var item = material.li({
	                    classList: ['collection-item', 'waves-effect', 'waves-green'],
	                    id: mangaList[i]._id,
	                    onclick: onclick
	                });

	                item.add(material.h6({
	                    classList: ['title', 'flow-text', 'truncate'],
	                    text: mangaList[i].title
	                }));

	                listContainer.appendChild(item);
	            }

	            material.node(listContainer);
	        }
	    },


	    settings: {
	        init: function () {
	            material.view(material.p({text: 'Nothing here yet', classList: 'container'}));
	        }
	    },


	    account: {
	        init: function () {
	            material.view(material.p({text: 'Nothing here yet.', classList: 'container'}));
	        }
	    },


	    about: {
	        init: function () {
	            var mainContainer = material.div({classList: ['container', 'section']});
	            mainContainer
	                .add(material.text('Flyleaf.co is made by '))
	                .add(material.a({text: '@mythrilco', href: 'https://twitter.com/MythrilCo'}))
	                .add(material.br())
	                .add(material.text('Tweet at me if you have any issues.'))
	                .add(material.br())
	                .add(material.text('If you know what Github is and have an account, you can report issues '))
	                .add(material.a({text: 'here.', href: 'https://github.com/aerze/flyleaf/issues'}))
	                .add(material.br())
	                .add(material.br())
	                .add(material.p({text: 'Thanks for reading! :)'}));

	            material.view(mainContainer);
	        }
	    },


	    manga: {
	        init: function (manga) {
	            var main = material.div();
	            // start parallax

	            var parallaxContainer = material.div({classList: 'parallax-container'});
	            var parallaxDiv = material.div({classList: 'parallax'});
	            var _image = material.img({src: 'http://cdn.mangaeden.com/mangasimg/' + manga.image, classList: 'z-depth-5'});

	            parallaxContainer
	                .add(parallaxDiv
	                    .add(_image));

	            main.add(parallaxContainer);

	            // end parallax
	            // start section

	            var sectionDiv = material.div({classList: ['container', 'white']});

	            sectionDiv
	                .add(material.h3({text: manga.title}))
	                .add(material.h5({text: 'Author: ' + manga.author}))
	                .add(material.h5({text: 'Artist: ' + manga.artist}));

	            //  start button

	            // var _saveString = 'Save';
	            // var _saveIconString = 'mdi-action-favorite-outline';
	            // if (data.checkLibrary(manga._id)) {
	            //     _saveString = 'Saved';
	            //     _saveIconString = 'mdi-action-favorite';
	            // }

	            // var _saveBook = material.button({
	            //     classList: ['waves-effect', 'green', 'waves-light', 'btn'],
	            //     text: _saveString,
	            //     onclick: function () {
	            //         var text = this.textContent;
	            //         if (data.checkLibrary(manga._id)) {
	            //             // _saveBook.textContent = 'Already Saved!';
	            //         } else {
	            //             data.saveBook(manga, function (err) {
	            //                 if (err) text = 'ERROR: Could Not Save';
	            //                 else text = 'Saved!';
	            //                 _saveBook.textContent = text;
	            //             });
	            //         }
	            //     }
	            // });

	            // sectionDiv
	            //     .add(_saveBook
	            //         .add(material.i({classList: [ _saveIconString, 'left' ]})));

	            // End button


	            // end section
	            // start collapsible

	            var collapsibleContainer = material.ul({classList: 'collapsible'})
	                    .set('data-collapsible', 'accordion');


	            var tagsCollapsibleHeader = material.div({
	                classList: ['collapsible-header', 'waves-effect', 'waves-green'],
	                text: 'Tags'
	            });
	            var tagsCollapsibleBody = material.div({classList: 'collapsible-body'});
	            var _categories = material.ul({classList: 'container'});
	            for (var i = manga.categories.length - 1; i >= 0; i--) {
	                _categories.add(material.li({text:manga.categories[i]}));
	            }


	            collapsibleContainer
	                .add(material.li()
	                    .add(tagsCollapsibleHeader
	                        .add(material.i({classList: 'mdi-notification-more'})))
	                    .add(tagsCollapsibleBody
	                        .add(_categories)));



	            var summaryCollapsibleHeader = material.div({
	                classList: ['collapsible-header', 'waves-effect', 'waves-green'],
	                text: 'Summary'
	            });
	            var summaryCollapsibleBody = material.div({classList: 'collapsible-body'});
	            var _description = material.p({innerHTML: manga.description});

	            collapsibleContainer
	                .add(material.li()
	                    .add(summaryCollapsibleHeader
	                        .add(material.i({classList: 'mdi-action-speaker-notes'})))
	                    .add(summaryCollapsibleBody
	                        .add(_description)));

	            var loadChapter = function () {
	                // flyleaf.data.readChapter(manga._id, this.index, 0);
	                // flyleaf.setID('chapterIndex', this.index);
	                // var chapterNumber = this.textContent.split(':')[0];
	                // flyleaf.display.setNavTitle(chapterNumber);

	                page('/chapter/' + this.id);
	            };

	            var _chapters = material.ul({classList: 'collection'});

	            _chapters
	                .add(material.li({classList: 'collection-header'})
	                    .add(material.h4({text: 'Chapters'})));
	            for (var j = 0; j < manga.chapters.length; j++) {
	                var label = (manga.chapters[j][2] === null || manga.chapters[j][2] === manga.chapters[j][0].toString()) ?
	                    'CH ' + manga.chapters[j][0] :
	                    'CH ' + manga.chapters[j][0] + ': ' + manga.chapters[j][2];

	                var _chapterListItem = createElement('li');
	                var _chapterDiv = document.createElement('div');
	                    _chapterDiv.appendChild(document.createTextNode(label));
	                var _chapterA = document.createElement('a');
	                    _chapterA.classList.add('secondary-content');
	                var _chapterIcon = document.createElement('i');

	                if (manga.chapters[j][4] === undefined) {
	                    _chapterIcon.classList.add('mdi-action-bookmark-outline');
	                } else if (parseInt(manga.chapters[j][4]) >= 0) {
	                    _chapterIcon.classList.add('mdi-action-bookmark');
	                } else {
	                    _chapterIcon.classList.add('mdi-action-done');
	                }
	                    _chapterA.appendChild(_chapterIcon);
	                    _chapterDiv.appendChild(_chapterA);
	                    _chapterListItem.appendChild(_chapterDiv);

	                    _chapterListItem.index = j;
	                    _chapterListItem.id = manga.chapters[j][3];
	                    _chapterListItem.onclick = loadChapter;
	                    _chapterListItem.classList.add('collection-item', 'waves-effect', 'waves-green');
	                _chapters.appendChild(_chapterListItem);
	            }

	            main
	                .add(sectionDiv)
	                .add(collapsibleContainer)
	                .appendChild(_chapters);

	            material.view(main);

	            $(document).ready(function(){
	              $('.parallax').parallax();
	              $('.collapsible').collapsible();
	            });


	            function createElement (elem, text) {
	                var element = document.createElement(elem);
	                element.textContent = text;

	                return element;
	            }
	        }
	    },


	    chapter: {
	        init: function (images) {
	            //  for (var i = chapterInfo.images.length - 1; i >= 0; i--) {
	            //     container
	            //         .add(Render.img({
	            //             classList: ['page', 'responsive-img'],
	            //             src: 'http://cdn.mangaeden.com/mangasimg/' + chapterInfo.images[i][1]
	            //         }))
	            //         .add(Render.br());

	            //     // images += '<img class="page responsive-img" src="http://cdn.mangaeden.com/mangasimg/' + chapterInfo.images[i][1] + '"></img><br>';
	            // }
	            console.log(images);

	            var mainContainer = material.div();

	            for (var i = images.length - 1; i >= 0; i--) {
	                mainContainer
	                    .add(material.img({
	                        classList: ['page', 'responsive-img'],
	                        src: 'http://cdn.mangaeden.com/mangasimg/' + images[i][1]
	                    }))
	                    .add(material.br());
	            }

	            material.view(mainContainer);
	        }
	    },


	    error: function (error) {
	        console.dir(error);
	        this.navbar.setTitle('Oh Snap!');
	        var mainContainer = material.div({classList: ['container', 'section']});
	            mainContainer
	                .add(material.h5({text:error.message}))
	                .add(material.h6({text:error.stack}));
	            material.view(mainContainer);
	    }

	};


	module.exports = View;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var render = __webpack_require__(149);

	var Material = Object.create(render);

	Material.navListItem = function (options) {
	        
	    var text = options.text || '';
	    var href = options.href || '#';
	    var iconClass = [];
	        iconClass.push('left');
	        
	    if (options.iconClass) iconClass.push(options.iconClass);
	    
	    var navli = this.li()
	        .add(this.a({href: href})
	            .add(this.i({classList: iconClass}))
	            .add(this.text(text)));
	    
	    return navli;
	}


	Material.modal = function (id, content, footer) {
	    
	    var modal = this.div({ id: id, classList: 'modal'});
	    var modalContent = this.div({classList: 'modal-content'}).add(content);
	    var modalFooter = this.div({classList: 'modal-footer'}).add(footer);
	    
	    modal.add(modalContent);
	    if (footer) modal.add(modalFooter);
	    
	    return modal;
	    // <div id="modal1" class="modal">
	    //     <div class="modal-content">
	    //       <h4>Modal Header</h4>
	    //       <p>A bunch of text</p>
	    //     </div>
	    //     <div class="modal-footer">
	    //       <a href="#!" class=" modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
	    //     </div>
	    // </div>
	}

	Material.render = Material.node;
	Material.renderView = function (node, view) {
	    view = view || document.querySelector('.main-view');
	    view.innerHTML = '';
	    $(window).scrollTop(0);
	    view.appendChild(node);
	}

	module.exports = Material;

/***/ },
/* 149 */
/***/ function(module, exports) {

	'use strict';
	/*jshint browser: true, jquery: true */

	var Render = {
	    view: function (node, view) {
	        view = view || document.querySelector('.main-view');
	        view.innerHTML = '';
	        $(window).scrollTop(0);
	        view.appendChild(node);
	    },
	    node: function (node, view) {
	        view = view || document.querySelector('.main-view');
	        view.appendChild(node);
	    },
	    // fullpage: function (node) {
	    //     var mainNode = document.querySelector('body');
	    //     var fullpage = document.querySelector('.fullpage');
	    //     var container = document.querySelector('.container');

	    //     if (fullpage) {
	    //         setTimeout( function () {
	    //             container.classList.add('fade-out');
	    //             setTimeout(function () {
	    //                 fullpage.remove();
	    //                 fadeInPage();
	    //             }, 1000);
	    //         }, 1000);
	    //     } else {
	    //         fadeInPage();
	    //     }

	    //     function fadeInPage () {
	    //         mainNode.innerHTML = '';
	    //         mainNode.appendChild(node);
	    //         node.classList.add('fade-in');
	    //     }
	    // },
	    element: function (elementType, options) {
	        var element = document.createElement(elementType);
	            element.add = function (node) {
	                if (Array.isArray(node)) {
	                    for (var i = 0; i <= node.length - 1; i+=1) {
	                        this.appendChild(node[i]);
	                    }
	                } else this.appendChild(node); 

	                return this;
	            };
	            element.addTo = function (node) {
	                node.appendChild(this);
	                return this;
	            };
	            element.set = function (key, value) {
	                this.setAttribute(key, value);
	                return this;
	            };

	        if (options) {
	            if (options.classList) {
	                if (Array.isArray(options.classList)) {
	                    for (var i = 0; i <= options.classList.length - 1; i+=1) {
	                        element.classList.add(options.classList[i]);
	                    }
	                } else { element.classList.add(options.classList); }
	            }
	            if (options.id) {
	                element.id = options.id;
	            }
	            if (options.text) {
	                var text = document.createTextNode(options.text);
	                element.appendChild(text);
	            }
	            if (options.innerHTML) {
	                element.innerHTML = options.innerHTML;
	            }
	            if (options.onclick) {
	                element.onclick = options.onclick;
	            }
	            if (options.data) {
	                for (var key in options.data) {
	                    if (options.data.hasOwnProperty(key)) {
	                        var value = options.data[key];
	                        element.setAttribute('data-' + key, value);
	                    }
	                }
	            }
	        }

	        return element;
	    },
	    i:  function (options) { return this.element('i', options); },
	    p:  function (options) { return this.element('p', options); },
	    h1: function (options) { return this.element('h1', options); },
	    h2: function (options) { return this.element('h2', options); },
	    h3: function (options) { return this.element('h3', options); },
	    h4: function (options) { return this.element('h4', options); },
	    h5: function (options) { return this.element('h5', options); },
	    h6: function (options) { return this.element('h6', options); },
	    hr: function (options) { return this.element('hr', options); },
	    br: function (options) { return this.element('br', options); },
	    ul: function (options) { return this.element('ul', options); },
	    li: function (options) { return this.element('li', options); },
	    div:    function (options) { return this.element('div', options); },
	    nav:    function (options) { return this.element('nav', options); },
	    text:   function (text)    { return document.createTextNode(text); },
	    form:   function (options) { return this.element('form', options); },
	    legend: function (options) { return this.element('legend', options); },
	    fieldset: function (options) { return this.element('fieldset', options); },

	    a: function (options) {
	        var a = this.element('a', options);
	        if (options) {
	            if (options.href) {
	                a.setAttribute('href', options.href);
	            }
	        }
	        return a;
	    },

	    img: function (options) {
	        var img = this.element('img', options);
	        if (options) {
	            if (options.src) { img.src = options.src; }
	            if (options.alt) { img.alt = options.alt; }
	        }
	        return img;
	    },

	    label: function (options) {
	        var label = this.element('label', options);
	        if (options && options.for) label.setAttribute('for', options.for);
	        return label;
	    },

	    input: function (options) {
	        var input = this.element('input', options);
	        if (options) {
	            if (options.type) input.setAttribute('type', options.type);
	            if (options.placeholder) input.setAttribute('placeholder', options.placeholder);
	            if (options.name) input.setAttribute('name', options.name);
	            if (options.required) input.setAttribute('required', 'required');
	        }

	        return input;
	    },

	    button: function (options) {
	        var button = this.element('button', options);
	        if (options) {
	            if (options.type) {
	                button.setAttribute('type', options.type);
	            }
	        }
	        return button;
	    }
	};

	module.exports = Render;

/***/ },
/* 150 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ }
/******/ ]);